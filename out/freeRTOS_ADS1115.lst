
mis_proyectos/freeRTOS_ADS1115/out/freeRTOS_ADS1115.elf:     file format elf32-littlearm
mis_proyectos/freeRTOS_ADS1115/out/freeRTOS_ADS1115.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003b15

Program Header:
0x70000001 off    0x00014da4 vaddr 0x1a004da4 paddr 0x1a004da4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x00002ae0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004dac memsz 0x00004dac flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004dac align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004da4  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a004dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          00002ae0  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004da4  1a004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 17 .noinit       00000000  10002b68  10002b68  00020084  2**2
                  CONTENTS
 18 .debug_info   0002d550  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000060e9  00000000  00000000  0004d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b94e  00000000  00000000  000536bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00001018  00000000  00000000  0005f00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000010f0  00000000  00000000  00060023  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000107c4  00000000  00000000  00061113  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0001479c  00000000  00000000  000718d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002db63  00000000  00000000  00086073  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000b3bd6  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000b3c55  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002be8  00000000  00000000  000b3c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004da4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b68 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 stringManipulation.c
00000000 l    df *ABS*	00000000 test_ADS1115.c
10000088 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 ADS1115.c
1a0005d0 l     F .text	00000038 readRegister
00000000 l    df *ABS*	00000000 heap_1.c
10000090 l     O .bss	00002000 ucHeap
1000008c l     O .bss	00000004 pucAlignedHeap.11323
10002090 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00081e l     F .text	0000001e prvIsQueueFull
1a00083c l     F .text	0000001a prvIsQueueEmpty
1a000856 l     F .text	00000076 prvCopyDataToQueue
1a0008cc l     F .text	00000024 prvCopyDataFromQueue
1a0008f0 l     F .text	0000006e prvUnlockQueue
1a0009e4 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002094 l     O .bss	00000168 uxIdleTaskStack.10613
100021fc l     O .bss	000005a0 uxTimerTaskStack.10620
1000279c l     O .bss	00000060 xIdleTaskTCB.10612
100027fc l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000f78 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000fa4 l     F .text	00000092 prvInitialiseNewTask
1a001038 l     F .text	00000068 prvInitialiseTaskLists
1a0010a0 l     F .text	000000ac prvAddNewTaskToReadyList
1a00114c l     F .text	00000038 prvDeleteTCB
1a001184 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0011d0 l     F .text	00000028 prvIdleTask
1a0011f8 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002860 l     O .bss	00000004 pxDelayedTaskList
10002864 l     O .bss	00000004 pxOverflowDelayedTaskList
10002868 l     O .bss	0000008c pxReadyTasksLists
100028f4 l     O .bss	00000004 uxCurrentNumberOfTasks
100028f8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100028fc l     O .bss	00000004 uxPendedTicks
10002900 l     O .bss	00000004 uxSchedulerSuspended
10002904 l     O .bss	00000004 uxTaskNumber
10002908 l     O .bss	00000004 uxTopReadyPriority
1000290c l     O .bss	00000014 xDelayedTaskList1
10002920 l     O .bss	00000014 xDelayedTaskList2
10002934 l     O .bss	00000004 xNextTaskUnblockTime
10002938 l     O .bss	00000004 xNumOfOverflows
1000293c l     O .bss	00000014 xPendingReadyList
10002950 l     O .bss	00000004 xSchedulerRunning
10002954 l     O .bss	00000014 xSuspendedTaskList
10002968 l     O .bss	00000014 xTasksWaitingTermination
1000297c l     O .bss	00000004 xTickCount
10002980 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001a44 l     F .text	00000020 prvGetNextExpireTime
1a001a64 l     F .text	00000048 prvInsertTimerInActiveList
1a001aac l     F .text	00000070 prvCheckForValidListAndQueue
1a001b1c l     F .text	00000040 prvInitialiseNewTimer
1a001eec l     F .text	00000016 prvTimerTask
1a001c78 l     F .text	00000078 prvSwitchTimerLists
1a001cf0 l     F .text	0000002c prvSampleTimeNow
1a001d1c l     F .text	00000060 prvProcessExpiredTimer
1a001d7c l     F .text	00000074 prvProcessTimerOrBlockTask
1a001df0 l     F .text	000000fc prvProcessReceivedCommands
10002984 l     O .bss	00000004 pxCurrentTimerList
10002988 l     O .bss	00000004 pxOverflowTimerList
1000298c l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002a2c l     O .bss	00000014 xActiveTimerList1
10002a40 l     O .bss	00000014 xActiveTimerList2
10002a54 l     O .bss	00000004 xLastTime.11662
10002a58 l     O .bss	00000050 xStaticTimerQueue.11712
10002aa8 l     O .bss	00000004 xTimerQueue
10002aac l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001f04 l     F .text	00000040 prvTaskExitError
1a001f44 l     F .text	00000022 prvPortStartFirstTask
1a001f6c l     F .text	0000000e vPortEnableVFP
1a001fd0 l       .text	00000000 pxCurrentTCBConst2
1a0020b0 l       .text	00000000 pxCurrentTCBConst
10002ab0 l     O .bss	00000001 ucMaxSysCallPriority
10002ab4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004a9c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002ab8 l     O .bss	00000004 callBackFuncParams
10002ac0 l     O .bss	00000008 tickCounter
10002ac8 l     O .bss	00000004 tickHookFunction
10002acc l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a002408 l     F .text	00000030 i2cHardwareInit
1a002438 l     F .text	0000003c i2cHardwareRead
1a002474 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0024fe l     F .text	00000002 errorOcurred
1a002500 l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00260c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002afc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 board.c
1a002ab8 l     F .text	00000044 Board_LED_Init
1a002afc l     F .text	00000040 Board_TEC_Init
1a002b3c l     F .text	00000040 Board_GPIO_Init
1a002b7c l     F .text	00000038 Board_SPI_Init
1a002bb4 l     F .text	00000024 Board_I2C_Init
1a002bd8 l     F .text	00000030 Board_ADC_Init
1a004c30 l     O .text	00000008 GpioButtons
1a004c38 l     O .text	0000000c GpioLeds
1a004c44 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004c5c l     O .text	00000004 InitClkStates
1a004c60 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002d24 l     F .text	0000002c Chip_UART_GetIndex
1a004cd4 l     O .text	00000008 UART_BClock
1a004cdc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002ecc l     F .text	00000014 Chip_ADC_GetClockIndex
1a002ee0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002fa8 l     F .text	000000a4 pll_calc_divs
1a00304c l     F .text	0000010c pll_get_frac
1a003158 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0033cc l     F .text	00000022 Chip_Clock_GetDivRate
10002b00 l     O .bss	00000008 audio_usb_pll_freq
1a004cf0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004d5c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000004c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003a60 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003a74 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 s_modf.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 
1a004da4 l       .bss_RAM5	00000000 __init_array_end
1a004da4 l       .bss_RAM5	00000000 __preinit_array_end
1a004da4 l       .bss_RAM5	00000000 __init_array_start
1a004da4 l       .bss_RAM5	00000000 __preinit_array_start
1a0031f0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a003634 g     F .text	0000000e Chip_I2CM_Xfer
1a002584 g     F .text	00000044 TIMER2_IRQHandler
1a0024b0 g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002a28 g     F .text	00000090 int64ToString
1a002018 g     F .text	0000002c vPortExitCritical
1a003f68 g     F .text	0000005a .hidden __floatdidf
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a000e60 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003834 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a002f86 g     F .text	0000000c Chip_ADC_SetResolution
1a0020b4 g     F .text	0000002c SysTick_Handler
1a002da4 g     F .text	00000040 Chip_UART_SetBaud
1a0029ec g     F .text	00000008 printString
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a002050 g     F .text	00000064 PendSV_Handler
1a000c14 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004dac g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a0024be g     F .text	00000028 i2cRead
1000285c g     O .bss	00000004 pxCurrentTCB
53ff3d7a g       *ABS*	00000000 __valid_user_code_checksum
1a004dac g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a000660 g     F .text	0000000c setGain
1a000654 g     F .text	0000000c setADC_ADDRESS
1a0018d0 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0025c8 g     F .text	00000044 TIMER3_IRQHandler
1a00346e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a000738 g     F .text	00000020 getLastConvertion_resistance
1a002118 g     F .text	00000110 xPortStartScheduler
1a0048c0 g     F .text	00000016 memcpy
1a0017dc g     F .text	00000030 vTaskPlaceOnEventList
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a003ef0 g     F .text	00000022 .hidden __floatsidf
1a0020e0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0039e0 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004578 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b68 g       .noinit	00000000 _noinit
1a000808 g     F .text	00000016 vPortFree
1a002362 g     F .text	00000018 uartWriteString
10002b64 g     O .bss	00000004 SystemCoreClock
1a002d50 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a00237c g     F .text	00000034 tickerCallback
1a002228 g     F .text	0000005c vPortValidateInterruptPriority
1a000618 g     F .text	0000003a writeRegister
1a000180  w    F .text	00000002 UsageFault_Handler
1a0034ec g     F .text	0000004c Chip_Clock_GetRate
1a000ece g     F .text	00000018 vListInsertEnd
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a0029dc g     F .text	00000010 printInitUart
1a002cac g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003ed0 g     F .text	0000001e .hidden __aeabi_ui2d
1a0039b0 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0045a8 g     F .text	000002cc .hidden __udivmoddi4
1a003c4c g     F .text	00000000 .hidden __aeabi_drsub
1a004c2c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000ec8 g     F .text	00000006 vListInitialiseItem
1a0003f0 g     F .text	00000032 myTask
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a000ce0 g     F .text	00000158 xQueueReceive
10002b14 g     O .bss	00000040 xQueueRegistry
1a003f14 g     F .text	00000042 .hidden __extendsfdf2
1a004218 g     F .text	000001d0 .hidden __aeabi_ddiv
1a000f5c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a003c58 g     F .text	00000276 .hidden __adddf3
1a004da4 g       .ARM.exidx	00000000 __exidx_start
10002b08 g     O .bss	00000004 colaMsg
1a003fc4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a004878 g     F .text	00000048 __libc_init_array
1a003ed0 g     F .text	0000001e .hidden __floatunsidf
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000798 g     F .text	00000070 pvPortMalloc
1a002c2c g     F .text	0000002c Board_Init
1a003b98 g     F .text	00000002 _init
1a000eb2 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a004438 g     F .text	0000009e .hidden __aeabi_d2f
1a00140c g     F .text	0000000c xTaskGetTickCount
1a000a98 g     F .text	0000017c xQueueGenericSend
1a000300 g     F .text	00000068 integerToString
1a00018a  w    F .text	00000002 RTC_IRQHandler
10002b68 g       .bss	00000000 _ebss
1a002504 g     F .text	00000040 TIMER0_IRQHandler
1a0023b0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a003642 g     F .text	00000024 Chip_I2CM_XferBlocking
1a000368 g     F .text	00000088 floatToString
1a003978 g     F .text	00000038 Chip_I2C_SetClockRate
1a0043e8 g     F .text	0000004e .hidden __fixdfsi
1a001994 g     F .text	000000b0 xTaskPriorityDisinherit
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0031a4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001844 g     F .text	0000008c xTaskRemoveFromEventList
1a000f76 g     F .text	00000002 vApplicationMallocFailedHook
1a003c58 g     F .text	00000276 .hidden __aeabi_dadd
1a00018c g     F .text	0000001e data_init
1a0048e6 g     F .text	0000001e strcat
1a003f58 g     F .text	0000006a .hidden __aeabi_ul2d
1a002544 g     F .text	00000040 TIMER1_IRQHandler
1a003954 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a0029f4 g     F .text	00000010 printEnter
1a0006dc g     F .text	00000040 getLastConversionResults
1a003b9c g     F .text	000000b0 modf
1a003360 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004af0 g     O .text	00000136 gpioPinsInit
1a002348 g     F .text	0000001a uartWriteByte
1a003a8c g     F .text	00000012 Chip_SSP_SetClockRate
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a0018e8 g     F .text	00000080 xTaskCheckForTimeOut
1a003448 g     F .text	00000026 Chip_Clock_GetBaseClock
10000088 g       .bss	00000000 _bss
1a002f54 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003c54 g     F .text	0000027a .hidden __aeabi_dsub
1a0013fc g     F .text	00000010 vTaskSuspendAll
1a003f58 g     F .text	0000006a .hidden __floatundidf
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a003a9e g     F .text	0000003e Chip_SSP_SetBitRate
1a000f1a g     F .text	00000028 uxListRemove
1a0036bc g     F .text	00000002 Chip_GPIO_Init
1a004c58 g     O .text	00000004 OscRateIn
1a0022cc g     F .text	0000007c uartInit
1a001290 g     F .text	00000072 xTaskCreateStatic
10002b68 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001714 g     F .text	000000c8 vTaskSwitchContext
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000a06 g     F .text	00000090 xQueueGenericCreateStatic
1a00180c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a003ef0 g     F .text	00000022 .hidden __aeabi_i2d
1a002640 g     F .text	00000194 gpioInit
1a000f44 g     F .text	00000018 vApplicationGetIdleTaskMemory
10002b0c g     O .bss	00000001 m_conversionDelay
1a001c0c g     F .text	0000006c xTimerGenericCommand
1a000f74 g     F .text	00000002 vApplicationStackOverflowHook
1a004874  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004218 g     F .text	000001d0 .hidden __divdf3
1a003fc4 g     F .text	00000254 .hidden __muldf3
1a00282c g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a003a10 g     F .text	00000018 Chip_I2C_IsStateChanged
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a00320c g     F .text	0000001c Chip_Clock_GetDividerDivisor
10002b0d g     O .bss	00000001 m_i2cAddress
1a0002fc g       .text	00000000 __CRP_WORD_START__
10002b0e g     O .bss	00000001 m_bitShift
1a0048d6 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000550 g     F .text	00000080 main
1a000758 g     F .text	00000040 getLastConvertion_temperature
1a00018a  w    F .text	00000002 WDT_IRQHandler
1a000ee6 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001fb0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a001b5c g     F .text	00000064 xTimerCreateTimerTask
1a004438 g     F .text	0000009e .hidden __truncdfsf2
1a003f68 g     F .text	0000005a .hidden __aeabi_l2d
1a0022a0 g     F .text	00000018 uartTxReady
1a001624 g     F .text	000000a4 vTaskDelayUntil
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a00347c g     F .text	0000003c Chip_Clock_EnableOpts
1a003228 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003668 g     F .text	00000054 fpuInit
1a0032e0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002c58 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a0029a4 g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0027d4 g     F .text	00000056 gpioWrite
1a001530 g     F .text	000000f4 xTaskResumeAll
1a001368 g     F .text	00000094 vTaskStartScheduler
1a002f14 g     F .text	00000040 Chip_ADC_Init
10002b60 g     O .bss	00000004 g_pUsbApi
1a002c74 g     F .text	00000038 Board_SetupMuxing
1a002de4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0023fc g     F .text	0000000c tickRead
10002b58 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000424 g     F .text	0000012c taskTempMeasure
1a0022b8 g     F .text	00000014 uartTxWrite
1a00018a  w    F .text	00000002 CAN0_IRQHandler
1a003538 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a001968 g     F .text	0000000c vTaskMissedYield
10002b68 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003adc g     F .text	00000038 Chip_SSP_Init
1a002a04 g     F .text	00000024 printIntFormat
1a003a28 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a000e38 g     F .text	00000028 vQueueAddToRegistry
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a001418 g     F .text	00000118 xTaskIncrementTick
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a0024e6 g     F .text	00000018 i2cWrite
1a002c08 g     F .text	00000024 Board_Debug_Init
1a000960 g     F .text	00000084 xQueueGenericReset
10000084 g       .data	00000000 _edata
1a003814 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a001302 g     F .text	00000066 xTaskCreate
1a0036c0 g     F .text	00000154 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a003b14 g     F .text	00000084 ResetISR
1a002f94 g     F .text	00000014 SystemCoreClockUpdate
1a0043e8 g     F .text	0000004e .hidden __aeabi_d2iz
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a0016c8 g     F .text	0000004c vTaskDelay
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001974 g     F .text	00000020 xTaskGetSchedulerState
1a00293c g     F .text	00000068 delayInaccurateUs
1a004874  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a004904 g     F .text	00000010 strlen
1a001f80 g     F .text	0000002c pxPortInitialiseStack
1a0034b8 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001bc0 g     F .text	0000004c xTimerCreateStatic
1a00071c g     F .text	0000001c getLastConvertion_voltage
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a003f14 g     F .text	00000042 .hidden __aeabi_f2d
1a002848 g     F .text	000000f4 boardInit
1a001fd4 g     F .text	00000044 vPortEnterCritical
1a003c54 g     F .text	0000027a .hidden __subdf3
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000608 g     F .text	00000010 beginConnection
1a0044d8 g     F .text	00000000 .hidden __aeabi_ldivmod
10002b10 g     O .bss	00000002 m_gain
1a0033f0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00066c g     F .text	00000070 readADC_SingleEnded
1a002284 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a002d18 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 15 3b 00 1a 79 01 00 1a 7b 01 00 1a     .....;..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7a 3d ff 53     }...........z=.S
	...
1a00002c:	b1 1f 00 1a 85 01 00 1a 00 00 00 00 51 20 00 1a     ............Q ..
1a00003c:	b5 20 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     . ..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 2d 28 00 1a 8b 01 00 1a 8b 01 00 1a     ....-(..........
1a00006c:	8b 01 00 1a 05 25 00 1a 45 25 00 1a 85 25 00 1a     .....%..E%...%..
1a00007c:	c9 25 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .%..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a004dac 	.word	0x1a004dac
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a004dac 	.word	0x1a004dac
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004dac 	.word	0x1a004dac
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004dac 	.word	0x1a004dac
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004dac 	.word	0x1a004dac
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00002ae0 	.word	0x00002ae0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <integerToString>:
#include <math.h>
#include <string.h>

char* integerToString(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000300:	1e93      	subs	r3, r2, #2
1a000302:	2b22      	cmp	r3, #34	; 0x22
1a000304:	d802      	bhi.n	1a00030c <integerToString+0xc>
char* integerToString(int value, char* result, int base) {
1a000306:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a000308:	460d      	mov	r5, r1
1a00030a:	e005      	b.n	1a000318 <integerToString+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030c:	2300      	movs	r3, #0
1a00030e:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a000310:	4608      	mov	r0, r1
1a000312:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000314:	4635      	mov	r5, r6
      value /= base;
1a000316:	4620      	mov	r0, r4
1a000318:	fb90 f4f2 	sdiv	r4, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00031c:	fb02 0314 	mls	r3, r2, r4, r0
1a000320:	3323      	adds	r3, #35	; 0x23
1a000322:	1c6e      	adds	r6, r5, #1
1a000324:	4f0f      	ldr	r7, [pc, #60]	; (1a000364 <integerToString+0x64>)
1a000326:	5cfb      	ldrb	r3, [r7, r3]
1a000328:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00032a:	2c00      	cmp	r4, #0
1a00032c:	d1f2      	bne.n	1a000314 <integerToString+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a00032e:	2800      	cmp	r0, #0
1a000330:	db04      	blt.n	1a00033c <integerToString+0x3c>
   *ptr-- = '\0';
1a000332:	1e72      	subs	r2, r6, #1
1a000334:	2300      	movs	r3, #0
1a000336:	7033      	strb	r3, [r6, #0]
   char* ptr = result, *ptr1 = result, tmp_char;
1a000338:	460b      	mov	r3, r1
   while(ptr1 < ptr) {
1a00033a:	e00d      	b.n	1a000358 <integerToString+0x58>
   if (tmp_value < 0) *ptr++ = '-';
1a00033c:	1cae      	adds	r6, r5, #2
1a00033e:	232d      	movs	r3, #45	; 0x2d
1a000340:	706b      	strb	r3, [r5, #1]
1a000342:	e7f6      	b.n	1a000332 <integerToString+0x32>
      tmp_char = *ptr;
1a000344:	4614      	mov	r4, r2
1a000346:	f814 0901 	ldrb.w	r0, [r4], #-1
      *ptr--= *ptr1;
1a00034a:	461d      	mov	r5, r3
1a00034c:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000350:	7016      	strb	r6, [r2, #0]
      *ptr1++ = tmp_char;
1a000352:	7018      	strb	r0, [r3, #0]
1a000354:	462b      	mov	r3, r5
      *ptr--= *ptr1;
1a000356:	4622      	mov	r2, r4
   while(ptr1 < ptr) {
1a000358:	429a      	cmp	r2, r3
1a00035a:	d8f3      	bhi.n	1a000344 <integerToString+0x44>
}
1a00035c:	4608      	mov	r0, r1
1a00035e:	bcf0      	pop	{r4, r5, r6, r7}
1a000360:	4770      	bx	lr
1a000362:	bf00      	nop
1a000364:	1a004914 	.word	0x1a004914

1a000368 <floatToString>:

char* floatToString(float value, char* result) {
1a000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00036a:	b087      	sub	sp, #28
1a00036c:	4605      	mov	r5, r0
    int i;
    int fractionAbs;
    char *strEntero, *strDecimal;
    char strRes[15];

    parteDecimal = modf(value,&parteEntera);
1a00036e:	ee10 0a10 	vmov	r0, s0
1a000372:	f003 fdcf 	bl	1a003f14 <__aeabi_f2d>
1a000376:	ec41 0b10 	vmov	d0, r0, r1
1a00037a:	a804      	add	r0, sp, #16
1a00037c:	f003 fc0e 	bl	1a003b9c <modf>
1a000380:	ec57 6b10 	vmov	r6, r7, d0

    for(i=0;i<4;i++){
1a000384:	2400      	movs	r4, #0
1a000386:	e008      	b.n	1a00039a <floatToString+0x32>
        parteDecimal = parteDecimal * 10;
1a000388:	2200      	movs	r2, #0
1a00038a:	4b17      	ldr	r3, [pc, #92]	; (1a0003e8 <floatToString+0x80>)
1a00038c:	4630      	mov	r0, r6
1a00038e:	4639      	mov	r1, r7
1a000390:	f003 fe18 	bl	1a003fc4 <__aeabi_dmul>
1a000394:	4606      	mov	r6, r0
1a000396:	460f      	mov	r7, r1
    for(i=0;i<4;i++){
1a000398:	3401      	adds	r4, #1
1a00039a:	2c03      	cmp	r4, #3
1a00039c:	ddf4      	ble.n	1a000388 <floatToString+0x20>
    }
    result = integerToString((int) parteEntera,result,10);
1a00039e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0003a2:	f004 f821 	bl	1a0043e8 <__aeabi_d2iz>
1a0003a6:	220a      	movs	r2, #10
1a0003a8:	4629      	mov	r1, r5
1a0003aa:	f7ff ffa9 	bl	1a000300 <integerToString>
1a0003ae:	4604      	mov	r4, r0
    strcat(result,".");
1a0003b0:	f004 faa8 	bl	1a004904 <strlen>
1a0003b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0003ec <floatToString+0x84>)
1a0003b6:	881b      	ldrh	r3, [r3, #0]
1a0003b8:	5223      	strh	r3, [r4, r0]
    fractionAbs = fabs((int) parteDecimal);
1a0003ba:	4630      	mov	r0, r6
1a0003bc:	4639      	mov	r1, r7
1a0003be:	f004 f813 	bl	1a0043e8 <__aeabi_d2iz>
1a0003c2:	f003 fd95 	bl	1a003ef0 <__aeabi_i2d>
1a0003c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a0003ca:	4619      	mov	r1, r3
1a0003cc:	f004 f80c 	bl	1a0043e8 <__aeabi_d2iz>
    strcat(result,integerToString(fractionAbs,strRes,10));
1a0003d0:	220a      	movs	r2, #10
1a0003d2:	4669      	mov	r1, sp
1a0003d4:	f7ff ff94 	bl	1a000300 <integerToString>
1a0003d8:	4601      	mov	r1, r0
1a0003da:	4620      	mov	r0, r4
1a0003dc:	f004 fa83 	bl	1a0048e6 <strcat>

    return result;
}
1a0003e0:	4620      	mov	r0, r4
1a0003e2:	b007      	add	sp, #28
1a0003e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0003e6:	bf00      	nop
1a0003e8:	40240000 	.word	0x40240000
1a0003ec:	1a004a18 	.word	0x1a004a18

1a0003f0 <myTask>:

/*==================[definiciones de funciones externas]=====================*/

// ----------------- CON vTaskDelayUntil----------------------------
void myTask( void* taskParmPtr )
{
1a0003f0:	b510      	push	{r4, lr}
1a0003f2:	b082      	sub	sp, #8
   // ---------- CONFIGURACIONES ------------------------------
	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a0003f4:	f001 f80a 	bl	1a00140c <xTaskGetTickCount>
1a0003f8:	9001      	str	r0, [sp, #4]
	uint8_t delay_on =100;
1a0003fa:	2464      	movs	r4, #100	; 0x64

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      // Intercambia el estado del LEDB
      gpioWrite( LED2, HIGH );
1a0003fc:	2101      	movs	r1, #1
1a0003fe:	202c      	movs	r0, #44	; 0x2c
1a000400:	f002 f9e8 	bl	1a0027d4 <gpioWrite>

      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( delay_on / portTICK_RATE_MS );
1a000404:	4620      	mov	r0, r4
1a000406:	f001 f95f 	bl	1a0016c8 <vTaskDelay>
      gpioWrite( LED2, LOW);
1a00040a:	2100      	movs	r1, #0
1a00040c:	202c      	movs	r0, #44	; 0x2c
1a00040e:	f002 f9e1 	bl	1a0027d4 <gpioWrite>
      delay_on += 100;
1a000412:	3464      	adds	r4, #100	; 0x64
1a000414:	b2e4      	uxtb	r4, r4
      if( delay_on == 1000) delay_on = 0;

      vTaskDelayUntil(&tiempo_inicio_ciclo,1000/ portTICK_RATE_MS);
1a000416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00041a:	a801      	add	r0, sp, #4
1a00041c:	f001 f902 	bl	1a001624 <vTaskDelayUntil>
1a000420:	e7ec      	b.n	1a0003fc <myTask+0xc>
1a000422:	Address 0x000000001a000422 is out of bounds.


1a000424 <taskTempMeasure>:


   }
}
void taskTempMeasure( void* taskParmPtr )
{
1a000424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000428:	b08c      	sub	sp, #48	; 0x30
   // ---------- CONFIGURACIONES ------------------------------
	uint16_t result;
	char buffer[30];
	int channel;

	TickType_t tiempo_inicio_ciclo = xTaskGetTickCount();
1a00042a:	f000 ffef 	bl	1a00140c <xTaskGetTickCount>
1a00042e:	9003      	str	r0, [sp, #12]

	debugPrintlnString( "Beginning connection to the ADC..." );
1a000430:	4c3d      	ldr	r4, [pc, #244]	; (1a000528 <taskTempMeasure+0x104>)
1a000432:	493e      	ldr	r1, [pc, #248]	; (1a00052c <taskTempMeasure+0x108>)
1a000434:	7820      	ldrb	r0, [r4, #0]
1a000436:	f002 fad9 	bl	1a0029ec <printString>
1a00043a:	7820      	ldrb	r0, [r4, #0]
1a00043c:	f002 fada 	bl	1a0029f4 <printEnter>
	beginConnection();
1a000440:	f000 f8e2 	bl	1a000608 <beginConnection>
	debugPrintlnString( "Setting the I2C address of the ADC..." );
1a000444:	493a      	ldr	r1, [pc, #232]	; (1a000530 <taskTempMeasure+0x10c>)
1a000446:	7820      	ldrb	r0, [r4, #0]
1a000448:	f002 fad0 	bl	1a0029ec <printString>
1a00044c:	7820      	ldrb	r0, [r4, #0]
1a00044e:	f002 fad1 	bl	1a0029f4 <printEnter>
	setADC_ADDRESS(ADS1115_I2C_ADDRESS_GND);
1a000452:	2048      	movs	r0, #72	; 0x48
1a000454:	f000 f8fe 	bl	1a000654 <setADC_ADDRESS>
	debugPrintlnString( "Setting the GAIN of the PGA of the ADC..." );
1a000458:	4936      	ldr	r1, [pc, #216]	; (1a000534 <taskTempMeasure+0x110>)
1a00045a:	7820      	ldrb	r0, [r4, #0]
1a00045c:	f002 fac6 	bl	1a0029ec <printString>
1a000460:	7820      	ldrb	r0, [r4, #0]
1a000462:	f002 fac7 	bl	1a0029f4 <printEnter>
	setGain(GAIN_0256);
1a000466:	f44f 6020 	mov.w	r0, #2560	; 0xa00
1a00046a:	f000 f8f9 	bl	1a000660 <setGain>

	debugPrintlnString( "Begin to read the ADC..." );
1a00046e:	4932      	ldr	r1, [pc, #200]	; (1a000538 <taskTempMeasure+0x114>)
1a000470:	7820      	ldrb	r0, [r4, #0]
1a000472:	f002 fabb 	bl	1a0029ec <printString>
1a000476:	7820      	ldrb	r0, [r4, #0]
1a000478:	f002 fabc 	bl	1a0029f4 <printEnter>
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {

	   for (channel = 0 ; channel <=0 ; channel++){
1a00047c:	2500      	movs	r5, #0
1a00047e:	2d00      	cmp	r5, #0
1a000480:	dcfc      	bgt.n	1a00047c <taskTempMeasure+0x58>
		   result = readADC_SingleEnded(channel);
1a000482:	b2e8      	uxtb	r0, r5
1a000484:	f000 f8f2 	bl	1a00066c <readADC_SingleEnded>
1a000488:	4680      	mov	r8, r0

		   debugPrintString( "Result of channel " );
1a00048a:	4c27      	ldr	r4, [pc, #156]	; (1a000528 <taskTempMeasure+0x104>)
1a00048c:	492b      	ldr	r1, [pc, #172]	; (1a00053c <taskTempMeasure+0x118>)
1a00048e:	7820      	ldrb	r0, [r4, #0]
1a000490:	f002 faac 	bl	1a0029ec <printString>
		   debugPrintInt(channel);
1a000494:	7820      	ldrb	r0, [r4, #0]
1a000496:	260a      	movs	r6, #10
1a000498:	9600      	str	r6, [sp, #0]
1a00049a:	462a      	mov	r2, r5
1a00049c:	17eb      	asrs	r3, r5, #31
1a00049e:	f002 fab1 	bl	1a002a04 <printIntFormat>
		   debugPrintString( ": ");
1a0004a2:	4927      	ldr	r1, [pc, #156]	; (1a000540 <taskTempMeasure+0x11c>)
1a0004a4:	7820      	ldrb	r0, [r4, #0]
1a0004a6:	f002 faa1 	bl	1a0029ec <printString>
		   debugPrintString(integerToString(result,buffer,10));
1a0004aa:	7827      	ldrb	r7, [r4, #0]
1a0004ac:	4632      	mov	r2, r6
1a0004ae:	a904      	add	r1, sp, #16
1a0004b0:	4640      	mov	r0, r8
1a0004b2:	f7ff ff25 	bl	1a000300 <integerToString>
1a0004b6:	4601      	mov	r1, r0
1a0004b8:	4638      	mov	r0, r7
1a0004ba:	f002 fa97 	bl	1a0029ec <printString>
		   debugPrintString( "--- Volts: " );
1a0004be:	4921      	ldr	r1, [pc, #132]	; (1a000544 <taskTempMeasure+0x120>)
1a0004c0:	7820      	ldrb	r0, [r4, #0]
1a0004c2:	f002 fa93 	bl	1a0029ec <printString>
		   debugPrintString(floatToString(getLastConvertion_voltage(),buffer));
1a0004c6:	7826      	ldrb	r6, [r4, #0]
1a0004c8:	f000 f928 	bl	1a00071c <getLastConvertion_voltage>
1a0004cc:	a804      	add	r0, sp, #16
1a0004ce:	f7ff ff4b 	bl	1a000368 <floatToString>
1a0004d2:	4601      	mov	r1, r0
1a0004d4:	4630      	mov	r0, r6
1a0004d6:	f002 fa89 	bl	1a0029ec <printString>
		   debugPrintString( "--- Resistance: " );
1a0004da:	491b      	ldr	r1, [pc, #108]	; (1a000548 <taskTempMeasure+0x124>)
1a0004dc:	7820      	ldrb	r0, [r4, #0]
1a0004de:	f002 fa85 	bl	1a0029ec <printString>
		   debugPrintString(floatToString(getLastConvertion_resistance(),buffer));
1a0004e2:	7826      	ldrb	r6, [r4, #0]
1a0004e4:	f000 f928 	bl	1a000738 <getLastConvertion_resistance>
1a0004e8:	a804      	add	r0, sp, #16
1a0004ea:	f7ff ff3d 	bl	1a000368 <floatToString>
1a0004ee:	4601      	mov	r1, r0
1a0004f0:	4630      	mov	r0, r6
1a0004f2:	f002 fa7b 	bl	1a0029ec <printString>
		   debugPrintString( "--- Temperature: " );
1a0004f6:	4915      	ldr	r1, [pc, #84]	; (1a00054c <taskTempMeasure+0x128>)
1a0004f8:	7820      	ldrb	r0, [r4, #0]
1a0004fa:	f002 fa77 	bl	1a0029ec <printString>
		   debugPrintlnString(floatToString(getLastConvertion_temperature(),buffer));
1a0004fe:	7826      	ldrb	r6, [r4, #0]
1a000500:	f000 f92a 	bl	1a000758 <getLastConvertion_temperature>
1a000504:	a804      	add	r0, sp, #16
1a000506:	f7ff ff2f 	bl	1a000368 <floatToString>
1a00050a:	4601      	mov	r1, r0
1a00050c:	4630      	mov	r0, r6
1a00050e:	f002 fa6d 	bl	1a0029ec <printString>
1a000512:	7820      	ldrb	r0, [r4, #0]
1a000514:	f002 fa6e 	bl	1a0029f4 <printEnter>


		   vTaskDelayUntil(&tiempo_inicio_ciclo,1000/ portTICK_RATE_MS);
1a000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a00051c:	a803      	add	r0, sp, #12
1a00051e:	f001 f881 	bl	1a001624 <vTaskDelayUntil>
	   for (channel = 0 ; channel <=0 ; channel++){
1a000522:	3501      	adds	r5, #1
1a000524:	e7ab      	b.n	1a00047e <taskTempMeasure+0x5a>
1a000526:	bf00      	nop
1a000528:	10000088 	.word	0x10000088
1a00052c:	1a0049a4 	.word	0x1a0049a4
1a000530:	1a0049c8 	.word	0x1a0049c8
1a000534:	1a0049f0 	.word	0x1a0049f0
1a000538:	1a004a1c 	.word	0x1a004a1c
1a00053c:	1a004a38 	.word	0x1a004a38
1a000540:	1a004a4c 	.word	0x1a004a4c
1a000544:	1a004a50 	.word	0x1a004a50
1a000548:	1a004a5c 	.word	0x1a004a5c
1a00054c:	1a004a70 	.word	0x1a004a70

1a000550 <main>:
{
1a000550:	b500      	push	{lr}
1a000552:	b083      	sub	sp, #12
   boardConfig();
1a000554:	f002 f978 	bl	1a002848 <boardInit>
   debugPrintConfigUart( UART_USB, 9600);
1a000558:	4c16      	ldr	r4, [pc, #88]	; (1a0005b4 <main+0x64>)
1a00055a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00055e:	2103      	movs	r1, #3
1a000560:	4620      	mov	r0, r4
1a000562:	f002 fa3b 	bl	1a0029dc <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a000566:	4914      	ldr	r1, [pc, #80]	; (1a0005b8 <main+0x68>)
1a000568:	7820      	ldrb	r0, [r4, #0]
1a00056a:	f002 fa3f 	bl	1a0029ec <printString>
1a00056e:	7820      	ldrb	r0, [r4, #0]
1a000570:	f002 fa40 	bl	1a0029f4 <printEnter>
   gpioWrite( LED3, ON );
1a000574:	2101      	movs	r1, #1
1a000576:	202d      	movs	r0, #45	; 0x2d
1a000578:	f002 f92c 	bl	1a0027d4 <gpioWrite>
   xTaskCreate(
1a00057c:	2500      	movs	r5, #0
1a00057e:	9501      	str	r5, [sp, #4]
1a000580:	2601      	movs	r6, #1
1a000582:	9600      	str	r6, [sp, #0]
1a000584:	462b      	mov	r3, r5
1a000586:	22b4      	movs	r2, #180	; 0xb4
1a000588:	490c      	ldr	r1, [pc, #48]	; (1a0005bc <main+0x6c>)
1a00058a:	480d      	ldr	r0, [pc, #52]	; (1a0005c0 <main+0x70>)
1a00058c:	f000 feb9 	bl	1a001302 <xTaskCreate>
   xTaskCreate(
1a000590:	9501      	str	r5, [sp, #4]
1a000592:	9600      	str	r6, [sp, #0]
1a000594:	462b      	mov	r3, r5
1a000596:	22b4      	movs	r2, #180	; 0xb4
1a000598:	490a      	ldr	r1, [pc, #40]	; (1a0005c4 <main+0x74>)
1a00059a:	480b      	ldr	r0, [pc, #44]	; (1a0005c8 <main+0x78>)
1a00059c:	f000 feb1 	bl	1a001302 <xTaskCreate>
   debugPrintlnString( "Iniciando scheduler" );
1a0005a0:	490a      	ldr	r1, [pc, #40]	; (1a0005cc <main+0x7c>)
1a0005a2:	7820      	ldrb	r0, [r4, #0]
1a0005a4:	f002 fa22 	bl	1a0029ec <printString>
1a0005a8:	7820      	ldrb	r0, [r4, #0]
1a0005aa:	f002 fa23 	bl	1a0029f4 <printEnter>
   vTaskStartScheduler();
1a0005ae:	f000 fedb 	bl	1a001368 <vTaskStartScheduler>
1a0005b2:	e7fe      	b.n	1a0005b2 <main+0x62>
1a0005b4:	10000088 	.word	0x10000088
1a0005b8:	1a00495c 	.word	0x1a00495c
1a0005bc:	1a004978 	.word	0x1a004978
1a0005c0:	1a0003f1 	.word	0x1a0003f1
1a0005c4:	1a004980 	.word	0x1a004980
1a0005c8:	1a000425 	.word	0x1a000425
1a0005cc:	1a004990 	.word	0x1a004990

1a0005d0 <readRegister>:
	else
		return -1;

}

static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
1a0005d0:	b500      	push	{lr}
1a0005d2:	b089      	sub	sp, #36	; 0x24
1a0005d4:	aa08      	add	r2, sp, #32
1a0005d6:	f802 1d09 	strb.w	r1, [r2, #-9]!
                uint8_t* receiveDataBuffer,
                uint16_t receiveDataBufferSize,
                bool_t   sendReadStop );
	 */

	if( i2cRead( I2C0, i2cAddress, &reg,1,TRUE,bufferRead,2,TRUE) )
1a0005da:	2301      	movs	r3, #1
1a0005dc:	9303      	str	r3, [sp, #12]
1a0005de:	2102      	movs	r1, #2
1a0005e0:	9102      	str	r1, [sp, #8]
1a0005e2:	a907      	add	r1, sp, #28
1a0005e4:	9101      	str	r1, [sp, #4]
1a0005e6:	9300      	str	r3, [sp, #0]
1a0005e8:	4601      	mov	r1, r0
1a0005ea:	2000      	movs	r0, #0
1a0005ec:	f001 ff67 	bl	1a0024be <i2cRead>
1a0005f0:	b140      	cbz	r0, 1a000604 <readRegister+0x34>
		result = (bufferRead[0] << 8) | bufferRead[1];
1a0005f2:	f89d 301c 	ldrb.w	r3, [sp, #28]
1a0005f6:	f89d 001d 	ldrb.w	r0, [sp, #29]
1a0005fa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	else
		result = 0;

	return result;
}
1a0005fe:	b009      	add	sp, #36	; 0x24
1a000600:	f85d fb04 	ldr.w	pc, [sp], #4
		result = 0;
1a000604:	2000      	movs	r0, #0
1a000606:	e7fa      	b.n	1a0005fe <readRegister+0x2e>

1a000608 <beginConnection>:
uint8_t	beginConnection() {
1a000608:	b508      	push	{r3, lr}
    return i2cInit(I2C0, ADS1115_CLOCKRATE );
1a00060a:	4902      	ldr	r1, [pc, #8]	; (1a000614 <beginConnection+0xc>)
1a00060c:	2000      	movs	r0, #0
1a00060e:	f001 ff4f 	bl	1a0024b0 <i2cInit>
}
1a000612:	bd08      	pop	{r3, pc}
1a000614:	00061a80 	.word	0x00061a80

1a000618 <writeRegister>:
	if( (reg <0) || (reg>3) ){
1a000618:	2903      	cmp	r1, #3
1a00061a:	d901      	bls.n	1a000620 <writeRegister+0x8>
		return -1;
1a00061c:	20ff      	movs	r0, #255	; 0xff
}
1a00061e:	4770      	bx	lr
uint8_t writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
1a000620:	b500      	push	{lr}
1a000622:	b085      	sub	sp, #20
1a000624:	460b      	mov	r3, r1
1a000626:	4601      	mov	r1, r0
	transmitDataBuffer[0] = reg;
1a000628:	f88d 300c 	strb.w	r3, [sp, #12]
	transmitDataBuffer[1] = (uint8_t) (value >> 8);
1a00062c:	0a13      	lsrs	r3, r2, #8
1a00062e:	f88d 300d 	strb.w	r3, [sp, #13]
	transmitDataBuffer[2] = value & 0xff ;
1a000632:	f88d 200e 	strb.w	r2, [sp, #14]
	if( i2cWrite(I2C0, i2cAddress, transmitDataBuffer, 3, TRUE) )
1a000636:	2301      	movs	r3, #1
1a000638:	9300      	str	r3, [sp, #0]
1a00063a:	2303      	movs	r3, #3
1a00063c:	aa03      	add	r2, sp, #12
1a00063e:	2000      	movs	r0, #0
1a000640:	f001 ff51 	bl	1a0024e6 <i2cWrite>
1a000644:	b918      	cbnz	r0, 1a00064e <writeRegister+0x36>
		return -1;
1a000646:	20ff      	movs	r0, #255	; 0xff
}
1a000648:	b005      	add	sp, #20
1a00064a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 3;
1a00064e:	2003      	movs	r0, #3
1a000650:	e7fa      	b.n	1a000648 <writeRegister+0x30>
1a000652:	Address 0x000000001a000652 is out of bounds.


1a000654 <setADC_ADDRESS>:

void setADC_ADDRESS(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
1a000654:	4b01      	ldr	r3, [pc, #4]	; (1a00065c <setADC_ADDRESS+0x8>)
1a000656:	7018      	strb	r0, [r3, #0]
}
1a000658:	4770      	bx	lr
1a00065a:	bf00      	nop
1a00065c:	10002b0d 	.word	0x10002b0d

1a000660 <setGain>:


void setGain(adsGain_t gain)
{
    m_gain = gain;
1a000660:	4b01      	ldr	r3, [pc, #4]	; (1a000668 <setGain+0x8>)
1a000662:	8018      	strh	r0, [r3, #0]
}
1a000664:	4770      	bx	lr
1a000666:	bf00      	nop
1a000668:	10002b10 	.word	0x10002b10

1a00066c <readADC_SingleEnded>:
  return m_gain;
}

uint16_t readADC_SingleEnded(uint8_t channel) {

    if (channel > 3)
1a00066c:	2803      	cmp	r0, #3
1a00066e:	d82f      	bhi.n	1a0006d0 <readADC_SingleEnded+0x64>
uint16_t readADC_SingleEnded(uint8_t channel) {
1a000670:	b510      	push	{r4, lr}
                        ADS1115_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                        ADS1115_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                        ADS1115_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)
    */
    // Set PGA/voltage range
    config |= m_gain;
1a000672:	4b18      	ldr	r3, [pc, #96]	; (1a0006d4 <readADC_SingleEnded+0x68>)
1a000674:	881b      	ldrh	r3, [r3, #0]
1a000676:	f443 72c1 	orr.w	r2, r3, #386	; 0x182
1a00067a:	f042 0201 	orr.w	r2, r2, #1

    // Set single-ended input channel
    switch (channel)
1a00067e:	2803      	cmp	r0, #3
1a000680:	d807      	bhi.n	1a000692 <readADC_SingleEnded+0x26>
1a000682:	e8df f000 	tbb	[pc, r0]
1a000686:	1602      	.short	0x1602
1a000688:	201b      	.short	0x201b
    {
        case (0):
          config |= ADS1115_REG_CONFIG_MUX_SINGLE_0;
1a00068a:	f443 4283 	orr.w	r2, r3, #16768	; 0x4180
1a00068e:	f042 0203 	orr.w	r2, r2, #3

    // Set 'start single-conversion' bit
    config |= ADS1115_REG_CONFIG_OS_SINGLE;

    // Write config register to the ADC
    writeRegister(m_i2cAddress, ADS1115_REG_POINTER_CONFIG, config);
1a000692:	4c11      	ldr	r4, [pc, #68]	; (1a0006d8 <readADC_SingleEnded+0x6c>)
1a000694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
1a000698:	2101      	movs	r1, #1
1a00069a:	7820      	ldrb	r0, [r4, #0]
1a00069c:	f7ff ffbc 	bl	1a000618 <writeRegister>

    // Wait for the conversion to complete
    delayInaccurateUs(ADS1115_CONVERSIONDELAY*2);
1a0006a0:	2010      	movs	r0, #16
1a0006a2:	2100      	movs	r1, #0
1a0006a4:	f002 f94a 	bl	1a00293c <delayInaccurateUs>

    // Read the conversion results
    // Shift 12-bit results right 4 bits for the ADS1115
    return readRegister(m_i2cAddress, ADS1115_REG_POINTER_CONVERT);
1a0006a8:	2100      	movs	r1, #0
1a0006aa:	7820      	ldrb	r0, [r4, #0]
1a0006ac:	f7ff ff90 	bl	1a0005d0 <readRegister>
}
1a0006b0:	bd10      	pop	{r4, pc}
          config |= ADS1115_REG_CONFIG_MUX_SINGLE_1;
1a0006b2:	f443 42a3 	orr.w	r2, r3, #20864	; 0x5180
1a0006b6:	f042 0203 	orr.w	r2, r2, #3
          break;
1a0006ba:	e7ea      	b.n	1a000692 <readADC_SingleEnded+0x26>
          config |= ADS1115_REG_CONFIG_MUX_SINGLE_2;
1a0006bc:	f443 42c3 	orr.w	r2, r3, #24960	; 0x6180
1a0006c0:	f042 0203 	orr.w	r2, r2, #3
          break;
1a0006c4:	e7e5      	b.n	1a000692 <readADC_SingleEnded+0x26>
          config |= ADS1115_REG_CONFIG_MUX_SINGLE_3;
1a0006c6:	f443 42e3 	orr.w	r2, r3, #29056	; 0x7180
1a0006ca:	f042 0203 	orr.w	r2, r2, #3
          break;
1a0006ce:	e7e0      	b.n	1a000692 <readADC_SingleEnded+0x26>
        return 0;
1a0006d0:	2000      	movs	r0, #0
}
1a0006d2:	4770      	bx	lr
1a0006d4:	10002b10 	.word	0x10002b10
1a0006d8:	10002b0d 	.word	0x10002b0d

1a0006dc <getLastConversionResults>:
  writeRegister(m_i2cAddress, ADS1115_REG_POINTER_CONFIG, config);
}


int16_t getLastConversionResults()
{
1a0006dc:	b508      	push	{r3, lr}
  // Wait for the conversion to complete
  delay(m_conversionDelay);
1a0006de:	4b0c      	ldr	r3, [pc, #48]	; (1a000710 <getLastConversionResults+0x34>)
1a0006e0:	7818      	ldrb	r0, [r3, #0]
1a0006e2:	2100      	movs	r1, #0
1a0006e4:	f002 f95e 	bl	1a0029a4 <delay>

  // Read the conversion results
  uint16_t res = readRegister(m_i2cAddress, ADS1115_REG_POINTER_CONVERT) >> m_bitShift;
1a0006e8:	2100      	movs	r1, #0
1a0006ea:	4b0a      	ldr	r3, [pc, #40]	; (1a000714 <getLastConversionResults+0x38>)
1a0006ec:	7818      	ldrb	r0, [r3, #0]
1a0006ee:	f7ff ff6f 	bl	1a0005d0 <readRegister>
1a0006f2:	4b09      	ldr	r3, [pc, #36]	; (1a000718 <getLastConversionResults+0x3c>)
1a0006f4:	781a      	ldrb	r2, [r3, #0]
1a0006f6:	4110      	asrs	r0, r2
  if (m_bitShift == 0)
1a0006f8:	b13a      	cbz	r2, 1a00070a <getLastConversionResults+0x2e>
1a0006fa:	b283      	uxth	r3, r0
  }
  else
  {
    // Shift 12-bit results right 4 bits for the ADS1115,
    // making sure we keep the sign bit intact
    if (res > 0x07FF)
1a0006fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000700:	d301      	bcc.n	1a000706 <getLastConversionResults+0x2a>
    {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
1a000702:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    }
    return (int16_t)res;
1a000706:	b218      	sxth	r0, r3
  }
}
1a000708:	bd08      	pop	{r3, pc}
    return (int16_t)res;
1a00070a:	b200      	sxth	r0, r0
1a00070c:	e7fc      	b.n	1a000708 <getLastConversionResults+0x2c>
1a00070e:	bf00      	nop
1a000710:	10002b0c 	.word	0x10002b0c
1a000714:	10002b0d 	.word	0x10002b0d
1a000718:	10002b0e 	.word	0x10002b0e

1a00071c <getLastConvertion_voltage>:
//-- The PT100 are 2 wire devices measured in single shot-mode, no diferential mode.
//-- These functions ARE ONLY SUITABLE for reading the thermistors PT100 by applying 5V DC voltage
//-- With a resistor of 3.3Kohm in series to the PT100, the voltage measures is the voltage in the PT100

float  getLastConvertion_voltage() //-- Only for thermistors PT100 connected to the ADC
{
1a00071c:	b508      	push	{r3, lr}
	const float VPS = 0.256 / 32768.0; //-- Resolución en Volts
	//-- La resolución del ADC es de 15 bits el bit 16 es del signo.
	return getLastConversionResults() * VPS;
1a00071e:	f7ff ffdd 	bl	1a0006dc <getLastConversionResults>
1a000722:	ee07 0a90 	vmov	s15, r0
1a000726:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
1a00072a:	eddf 7a02 	vldr	s15, [pc, #8]	; 1a000734 <getLastConvertion_voltage+0x18>
1a00072e:	ee20 0a27 	vmul.f32	s0, s0, s15
1a000732:	bd08      	pop	{r3, pc}
1a000734:	3703126f 	.word	0x3703126f

1a000738 <getLastConvertion_resistance>:

float  getLastConvertion_resistance() //-- Only for thermistors PT100 connected to the ADC
{
1a000738:	b508      	push	{r3, lr}
	 float convVolt;
	 convVolt = getLastConvertion_voltage();
1a00073a:	f7ff ffef 	bl	1a00071c <getLastConvertion_voltage>
	 return (3300 * convVolt ) / (5 - convVolt);
1a00073e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a000754 <getLastConvertion_resistance+0x1c>
1a000742:	ee20 7a07 	vmul.f32	s14, s0, s14
1a000746:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
1a00074a:	ee37 0ac0 	vsub.f32	s0, s15, s0
}
1a00074e:	ee87 0a00 	vdiv.f32	s0, s14, s0
1a000752:	bd08      	pop	{r3, pc}
1a000754:	454e4000 	.word	0x454e4000

1a000758 <getLastConvertion_temperature>:

float  getLastConvertion_temperature() //-- Only for thermistors PT100 connected to the ADC
{
1a000758:	b508      	push	{r3, lr}
	return 2.597 * getLastConvertion_resistance() - 259.7;
1a00075a:	f7ff ffed 	bl	1a000738 <getLastConvertion_resistance>
1a00075e:	ee10 0a10 	vmov	r0, s0
1a000762:	f003 fbd7 	bl	1a003f14 <__aeabi_f2d>
1a000766:	a308      	add	r3, pc, #32	; (adr r3, 1a000788 <getLastConvertion_temperature+0x30>)
1a000768:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00076c:	f003 fc2a 	bl	1a003fc4 <__aeabi_dmul>
1a000770:	a307      	add	r3, pc, #28	; (adr r3, 1a000790 <getLastConvertion_temperature+0x38>)
1a000772:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000776:	f003 fa6d 	bl	1a003c54 <__aeabi_dsub>
1a00077a:	f003 fe5d 	bl	1a004438 <__aeabi_d2f>

}
1a00077e:	ee00 0a10 	vmov	s0, r0
1a000782:	bd08      	pop	{r3, pc}
1a000784:	f3af 8000 	nop.w
1a000788:	ef9db22d 	.word	0xef9db22d
1a00078c:	4004c6a7 	.word	0x4004c6a7
1a000790:	33333333 	.word	0x33333333
1a000794:	40703b33 	.word	0x40703b33

1a000798 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000798:	b538      	push	{r3, r4, r5, lr}
1a00079a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a00079c:	f010 0f07 	tst.w	r0, #7
1a0007a0:	d002      	beq.n	1a0007a8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0007a2:	f020 0407 	bic.w	r4, r0, #7
1a0007a6:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0007a8:	f000 fe28 	bl	1a0013fc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0007ac:	4b13      	ldr	r3, [pc, #76]	; (1a0007fc <pvPortMalloc+0x64>)
1a0007ae:	681b      	ldr	r3, [r3, #0]
1a0007b0:	b17b      	cbz	r3, 1a0007d2 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0007b2:	4b13      	ldr	r3, [pc, #76]	; (1a000800 <pvPortMalloc+0x68>)
1a0007b4:	681b      	ldr	r3, [r3, #0]
1a0007b6:	441c      	add	r4, r3
1a0007b8:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0007bc:	4294      	cmp	r4, r2
1a0007be:	d80e      	bhi.n	1a0007de <pvPortMalloc+0x46>
1a0007c0:	42a3      	cmp	r3, r4
1a0007c2:	d310      	bcc.n	1a0007e6 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0007c4:	f000 feb4 	bl	1a001530 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007c8:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0007ca:	f000 fbd4 	bl	1a000f76 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0007ce:	4628      	mov	r0, r5
1a0007d0:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0007d2:	4b0c      	ldr	r3, [pc, #48]	; (1a000804 <pvPortMalloc+0x6c>)
1a0007d4:	f023 0307 	bic.w	r3, r3, #7
1a0007d8:	4a08      	ldr	r2, [pc, #32]	; (1a0007fc <pvPortMalloc+0x64>)
1a0007da:	6013      	str	r3, [r2, #0]
1a0007dc:	e7e9      	b.n	1a0007b2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0007de:	f000 fea7 	bl	1a001530 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007e2:	2500      	movs	r5, #0
1a0007e4:	e7f1      	b.n	1a0007ca <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0007e6:	4a05      	ldr	r2, [pc, #20]	; (1a0007fc <pvPortMalloc+0x64>)
1a0007e8:	6815      	ldr	r5, [r2, #0]
1a0007ea:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0007ec:	4b04      	ldr	r3, [pc, #16]	; (1a000800 <pvPortMalloc+0x68>)
1a0007ee:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0007f0:	f000 fe9e 	bl	1a001530 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0007f4:	2d00      	cmp	r5, #0
1a0007f6:	d1ea      	bne.n	1a0007ce <pvPortMalloc+0x36>
1a0007f8:	e7e7      	b.n	1a0007ca <pvPortMalloc+0x32>
1a0007fa:	bf00      	nop
1a0007fc:	1000008c 	.word	0x1000008c
1a000800:	10002090 	.word	0x10002090
1a000804:	10000098 	.word	0x10000098

1a000808 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000808:	b140      	cbz	r0, 1a00081c <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00080a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00080e:	f383 8811 	msr	BASEPRI, r3
1a000812:	f3bf 8f6f 	isb	sy
1a000816:	f3bf 8f4f 	dsb	sy
1a00081a:	e7fe      	b.n	1a00081a <vPortFree+0x12>
}
1a00081c:	4770      	bx	lr

1a00081e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00081e:	b510      	push	{r4, lr}
1a000820:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000822:	f001 fbd7 	bl	1a001fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000826:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00082a:	429a      	cmp	r2, r3
1a00082c:	d004      	beq.n	1a000838 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00082e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000830:	f001 fbf2 	bl	1a002018 <vPortExitCritical>

	return xReturn;
}
1a000834:	4620      	mov	r0, r4
1a000836:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000838:	2401      	movs	r4, #1
1a00083a:	e7f9      	b.n	1a000830 <prvIsQueueFull+0x12>

1a00083c <prvIsQueueEmpty>:
{
1a00083c:	b510      	push	{r4, lr}
1a00083e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000840:	f001 fbc8 	bl	1a001fd4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000846:	b123      	cbz	r3, 1a000852 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000848:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00084a:	f001 fbe5 	bl	1a002018 <vPortExitCritical>
}
1a00084e:	4620      	mov	r0, r4
1a000850:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000852:	2401      	movs	r4, #1
1a000854:	e7f9      	b.n	1a00084a <prvIsQueueEmpty+0xe>

1a000856 <prvCopyDataToQueue>:
{
1a000856:	b570      	push	{r4, r5, r6, lr}
1a000858:	4604      	mov	r4, r0
1a00085a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00085c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00085e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000860:	b95a      	cbnz	r2, 1a00087a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000862:	6803      	ldr	r3, [r0, #0]
1a000864:	b11b      	cbz	r3, 1a00086e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000866:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000868:	3501      	adds	r5, #1
1a00086a:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00086c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00086e:	6840      	ldr	r0, [r0, #4]
1a000870:	f001 f890 	bl	1a001994 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000874:	2300      	movs	r3, #0
1a000876:	6063      	str	r3, [r4, #4]
1a000878:	e7f6      	b.n	1a000868 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00087a:	b96e      	cbnz	r6, 1a000898 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00087c:	6880      	ldr	r0, [r0, #8]
1a00087e:	f004 f81f 	bl	1a0048c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000882:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000884:	68a3      	ldr	r3, [r4, #8]
1a000886:	4413      	add	r3, r2
1a000888:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00088a:	6862      	ldr	r2, [r4, #4]
1a00088c:	4293      	cmp	r3, r2
1a00088e:	d319      	bcc.n	1a0008c4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000890:	6823      	ldr	r3, [r4, #0]
1a000892:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000894:	2000      	movs	r0, #0
1a000896:	e7e7      	b.n	1a000868 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000898:	68c0      	ldr	r0, [r0, #12]
1a00089a:	f004 f811 	bl	1a0048c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a00089e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0008a0:	4252      	negs	r2, r2
1a0008a2:	68e3      	ldr	r3, [r4, #12]
1a0008a4:	4413      	add	r3, r2
1a0008a6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0008a8:	6821      	ldr	r1, [r4, #0]
1a0008aa:	428b      	cmp	r3, r1
1a0008ac:	d202      	bcs.n	1a0008b4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0008ae:	6863      	ldr	r3, [r4, #4]
1a0008b0:	441a      	add	r2, r3
1a0008b2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0008b4:	2e02      	cmp	r6, #2
1a0008b6:	d001      	beq.n	1a0008bc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0008b8:	2000      	movs	r0, #0
1a0008ba:	e7d5      	b.n	1a000868 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0008bc:	b125      	cbz	r5, 1a0008c8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0008be:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0008c0:	2000      	movs	r0, #0
1a0008c2:	e7d1      	b.n	1a000868 <prvCopyDataToQueue+0x12>
1a0008c4:	2000      	movs	r0, #0
1a0008c6:	e7cf      	b.n	1a000868 <prvCopyDataToQueue+0x12>
1a0008c8:	2000      	movs	r0, #0
1a0008ca:	e7cd      	b.n	1a000868 <prvCopyDataToQueue+0x12>

1a0008cc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0008cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0008ce:	b172      	cbz	r2, 1a0008ee <prvCopyDataFromQueue+0x22>
{
1a0008d0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0008d2:	68c3      	ldr	r3, [r0, #12]
1a0008d4:	4413      	add	r3, r2
1a0008d6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0008d8:	6844      	ldr	r4, [r0, #4]
1a0008da:	42a3      	cmp	r3, r4
1a0008dc:	d301      	bcc.n	1a0008e2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0008de:	6803      	ldr	r3, [r0, #0]
1a0008e0:	60c3      	str	r3, [r0, #12]
1a0008e2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0008e4:	68c1      	ldr	r1, [r0, #12]
1a0008e6:	4620      	mov	r0, r4
1a0008e8:	f003 ffea 	bl	1a0048c0 <memcpy>
}
1a0008ec:	bd10      	pop	{r4, pc}
1a0008ee:	4770      	bx	lr

1a0008f0 <prvUnlockQueue>:
{
1a0008f0:	b538      	push	{r3, r4, r5, lr}
1a0008f2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0008f4:	f001 fb6e 	bl	1a001fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0008f8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0008fc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0008fe:	e003      	b.n	1a000908 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000900:	f001 f832 	bl	1a001968 <vTaskMissedYield>
			--cTxLock;
1a000904:	3c01      	subs	r4, #1
1a000906:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000908:	2c00      	cmp	r4, #0
1a00090a:	dd08      	ble.n	1a00091e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00090c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00090e:	b133      	cbz	r3, 1a00091e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000910:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000914:	f000 ff96 	bl	1a001844 <xTaskRemoveFromEventList>
1a000918:	2800      	cmp	r0, #0
1a00091a:	d0f3      	beq.n	1a000904 <prvUnlockQueue+0x14>
1a00091c:	e7f0      	b.n	1a000900 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00091e:	23ff      	movs	r3, #255	; 0xff
1a000920:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000924:	f001 fb78 	bl	1a002018 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000928:	f001 fb54 	bl	1a001fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00092c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000930:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000932:	e003      	b.n	1a00093c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000934:	f001 f818 	bl	1a001968 <vTaskMissedYield>
				--cRxLock;
1a000938:	3c01      	subs	r4, #1
1a00093a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00093c:	2c00      	cmp	r4, #0
1a00093e:	dd08      	ble.n	1a000952 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000940:	692b      	ldr	r3, [r5, #16]
1a000942:	b133      	cbz	r3, 1a000952 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000944:	f105 0010 	add.w	r0, r5, #16
1a000948:	f000 ff7c 	bl	1a001844 <xTaskRemoveFromEventList>
1a00094c:	2800      	cmp	r0, #0
1a00094e:	d0f3      	beq.n	1a000938 <prvUnlockQueue+0x48>
1a000950:	e7f0      	b.n	1a000934 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000952:	23ff      	movs	r3, #255	; 0xff
1a000954:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000958:	f001 fb5e 	bl	1a002018 <vPortExitCritical>
}
1a00095c:	bd38      	pop	{r3, r4, r5, pc}
1a00095e:	Address 0x000000001a00095e is out of bounds.


1a000960 <xQueueGenericReset>:
{
1a000960:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000962:	b940      	cbnz	r0, 1a000976 <xQueueGenericReset+0x16>
1a000964:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000968:	f383 8811 	msr	BASEPRI, r3
1a00096c:	f3bf 8f6f 	isb	sy
1a000970:	f3bf 8f4f 	dsb	sy
1a000974:	e7fe      	b.n	1a000974 <xQueueGenericReset+0x14>
1a000976:	4604      	mov	r4, r0
1a000978:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00097a:	f001 fb2b 	bl	1a001fd4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00097e:	6821      	ldr	r1, [r4, #0]
1a000980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000982:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000984:	fb03 1002 	mla	r0, r3, r2, r1
1a000988:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00098a:	2000      	movs	r0, #0
1a00098c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00098e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000990:	3a01      	subs	r2, #1
1a000992:	fb02 1303 	mla	r3, r2, r3, r1
1a000996:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000998:	23ff      	movs	r3, #255	; 0xff
1a00099a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00099e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0009a2:	b9a5      	cbnz	r5, 1a0009ce <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009a4:	6923      	ldr	r3, [r4, #16]
1a0009a6:	b91b      	cbnz	r3, 1a0009b0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0009a8:	f001 fb36 	bl	1a002018 <vPortExitCritical>
}
1a0009ac:	2001      	movs	r0, #1
1a0009ae:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0009b0:	f104 0010 	add.w	r0, r4, #16
1a0009b4:	f000 ff46 	bl	1a001844 <xTaskRemoveFromEventList>
1a0009b8:	2800      	cmp	r0, #0
1a0009ba:	d0f5      	beq.n	1a0009a8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0009bc:	4b08      	ldr	r3, [pc, #32]	; (1a0009e0 <xQueueGenericReset+0x80>)
1a0009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009c2:	601a      	str	r2, [r3, #0]
1a0009c4:	f3bf 8f4f 	dsb	sy
1a0009c8:	f3bf 8f6f 	isb	sy
1a0009cc:	e7ec      	b.n	1a0009a8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0009ce:	f104 0010 	add.w	r0, r4, #16
1a0009d2:	f000 fa6e 	bl	1a000eb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0009d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009da:	f000 fa6a 	bl	1a000eb2 <vListInitialise>
1a0009de:	e7e3      	b.n	1a0009a8 <xQueueGenericReset+0x48>
1a0009e0:	e000ed04 	.word	0xe000ed04

1a0009e4 <prvInitialiseNewQueue>:
{
1a0009e4:	b538      	push	{r3, r4, r5, lr}
1a0009e6:	461d      	mov	r5, r3
1a0009e8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0009ea:	460b      	mov	r3, r1
1a0009ec:	b149      	cbz	r1, 1a000a02 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0009ee:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0009f0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0009f2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0009f4:	2101      	movs	r1, #1
1a0009f6:	4620      	mov	r0, r4
1a0009f8:	f7ff ffb2 	bl	1a000960 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0009fc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000a00:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000a02:	6024      	str	r4, [r4, #0]
1a000a04:	e7f4      	b.n	1a0009f0 <prvInitialiseNewQueue+0xc>

1a000a06 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a06:	b940      	cbnz	r0, 1a000a1a <xQueueGenericCreateStatic+0x14>
1a000a08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a0c:	f383 8811 	msr	BASEPRI, r3
1a000a10:	f3bf 8f6f 	isb	sy
1a000a14:	f3bf 8f4f 	dsb	sy
1a000a18:	e7fe      	b.n	1a000a18 <xQueueGenericCreateStatic+0x12>
	{
1a000a1a:	b510      	push	{r4, lr}
1a000a1c:	b084      	sub	sp, #16
1a000a1e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000a20:	b153      	cbz	r3, 1a000a38 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000a22:	b192      	cbz	r2, 1a000a4a <xQueueGenericCreateStatic+0x44>
1a000a24:	b989      	cbnz	r1, 1a000a4a <xQueueGenericCreateStatic+0x44>
1a000a26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a2a:	f383 8811 	msr	BASEPRI, r3
1a000a2e:	f3bf 8f6f 	isb	sy
1a000a32:	f3bf 8f4f 	dsb	sy
1a000a36:	e7fe      	b.n	1a000a36 <xQueueGenericCreateStatic+0x30>
1a000a38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a3c:	f383 8811 	msr	BASEPRI, r3
1a000a40:	f3bf 8f6f 	isb	sy
1a000a44:	f3bf 8f4f 	dsb	sy
1a000a48:	e7fe      	b.n	1a000a48 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000a4a:	b94a      	cbnz	r2, 1a000a60 <xQueueGenericCreateStatic+0x5a>
1a000a4c:	b141      	cbz	r1, 1a000a60 <xQueueGenericCreateStatic+0x5a>
1a000a4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a52:	f383 8811 	msr	BASEPRI, r3
1a000a56:	f3bf 8f6f 	isb	sy
1a000a5a:	f3bf 8f4f 	dsb	sy
1a000a5e:	e7fe      	b.n	1a000a5e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000a60:	2050      	movs	r0, #80	; 0x50
1a000a62:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000a64:	9803      	ldr	r0, [sp, #12]
1a000a66:	2850      	cmp	r0, #80	; 0x50
1a000a68:	d008      	beq.n	1a000a7c <xQueueGenericCreateStatic+0x76>
1a000a6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a6e:	f383 8811 	msr	BASEPRI, r3
1a000a72:	f3bf 8f6f 	isb	sy
1a000a76:	f3bf 8f4f 	dsb	sy
1a000a7a:	e7fe      	b.n	1a000a7a <xQueueGenericCreateStatic+0x74>
1a000a7c:	4620      	mov	r0, r4
1a000a7e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000a80:	2301      	movs	r3, #1
1a000a82:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a86:	9400      	str	r4, [sp, #0]
1a000a88:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000a8c:	f7ff ffaa 	bl	1a0009e4 <prvInitialiseNewQueue>
	}
1a000a90:	4620      	mov	r0, r4
1a000a92:	b004      	add	sp, #16
1a000a94:	bd10      	pop	{r4, pc}
1a000a96:	Address 0x000000001a000a96 is out of bounds.


1a000a98 <xQueueGenericSend>:
{
1a000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a9a:	b085      	sub	sp, #20
1a000a9c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000a9e:	b160      	cbz	r0, 1a000aba <xQueueGenericSend+0x22>
1a000aa0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000aa2:	b999      	cbnz	r1, 1a000acc <xQueueGenericSend+0x34>
1a000aa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000aa6:	b18a      	cbz	r2, 1a000acc <xQueueGenericSend+0x34>
1a000aa8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aac:	f383 8811 	msr	BASEPRI, r3
1a000ab0:	f3bf 8f6f 	isb	sy
1a000ab4:	f3bf 8f4f 	dsb	sy
1a000ab8:	e7fe      	b.n	1a000ab8 <xQueueGenericSend+0x20>
1a000aba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000abe:	f383 8811 	msr	BASEPRI, r3
1a000ac2:	f3bf 8f6f 	isb	sy
1a000ac6:	f3bf 8f4f 	dsb	sy
1a000aca:	e7fe      	b.n	1a000aca <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000acc:	2b02      	cmp	r3, #2
1a000ace:	d10b      	bne.n	1a000ae8 <xQueueGenericSend+0x50>
1a000ad0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ad2:	2a01      	cmp	r2, #1
1a000ad4:	d008      	beq.n	1a000ae8 <xQueueGenericSend+0x50>
1a000ad6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ada:	f383 8811 	msr	BASEPRI, r3
1a000ade:	f3bf 8f6f 	isb	sy
1a000ae2:	f3bf 8f4f 	dsb	sy
1a000ae6:	e7fe      	b.n	1a000ae6 <xQueueGenericSend+0x4e>
1a000ae8:	461e      	mov	r6, r3
1a000aea:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000aec:	f000 ff42 	bl	1a001974 <xTaskGetSchedulerState>
1a000af0:	b950      	cbnz	r0, 1a000b08 <xQueueGenericSend+0x70>
1a000af2:	9b01      	ldr	r3, [sp, #4]
1a000af4:	b153      	cbz	r3, 1a000b0c <xQueueGenericSend+0x74>
1a000af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000afa:	f383 8811 	msr	BASEPRI, r3
1a000afe:	f3bf 8f6f 	isb	sy
1a000b02:	f3bf 8f4f 	dsb	sy
1a000b06:	e7fe      	b.n	1a000b06 <xQueueGenericSend+0x6e>
1a000b08:	2500      	movs	r5, #0
1a000b0a:	e03a      	b.n	1a000b82 <xQueueGenericSend+0xea>
1a000b0c:	2500      	movs	r5, #0
1a000b0e:	e038      	b.n	1a000b82 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000b10:	4632      	mov	r2, r6
1a000b12:	4639      	mov	r1, r7
1a000b14:	4620      	mov	r0, r4
1a000b16:	f7ff fe9e 	bl	1a000856 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b1c:	b94b      	cbnz	r3, 1a000b32 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000b1e:	b1a8      	cbz	r0, 1a000b4c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000b20:	4b3b      	ldr	r3, [pc, #236]	; (1a000c10 <xQueueGenericSend+0x178>)
1a000b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b26:	601a      	str	r2, [r3, #0]
1a000b28:	f3bf 8f4f 	dsb	sy
1a000b2c:	f3bf 8f6f 	isb	sy
1a000b30:	e00c      	b.n	1a000b4c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b36:	f000 fe85 	bl	1a001844 <xTaskRemoveFromEventList>
1a000b3a:	b138      	cbz	r0, 1a000b4c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000b3c:	4b34      	ldr	r3, [pc, #208]	; (1a000c10 <xQueueGenericSend+0x178>)
1a000b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b42:	601a      	str	r2, [r3, #0]
1a000b44:	f3bf 8f4f 	dsb	sy
1a000b48:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b4c:	f001 fa64 	bl	1a002018 <vPortExitCritical>
				return pdPASS;
1a000b50:	2001      	movs	r0, #1
}
1a000b52:	b005      	add	sp, #20
1a000b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000b56:	f001 fa5f 	bl	1a002018 <vPortExitCritical>
					return errQUEUE_FULL;
1a000b5a:	2000      	movs	r0, #0
1a000b5c:	e7f9      	b.n	1a000b52 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b5e:	a802      	add	r0, sp, #8
1a000b60:	f000 feb6 	bl	1a0018d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000b64:	2501      	movs	r5, #1
1a000b66:	e019      	b.n	1a000b9c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000b68:	2300      	movs	r3, #0
1a000b6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b6e:	e021      	b.n	1a000bb4 <xQueueGenericSend+0x11c>
1a000b70:	2300      	movs	r3, #0
1a000b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b76:	e023      	b.n	1a000bc0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000b78:	4620      	mov	r0, r4
1a000b7a:	f7ff feb9 	bl	1a0008f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b7e:	f000 fcd7 	bl	1a001530 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000b82:	f001 fa27 	bl	1a001fd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b8a:	429a      	cmp	r2, r3
1a000b8c:	d3c0      	bcc.n	1a000b10 <xQueueGenericSend+0x78>
1a000b8e:	2e02      	cmp	r6, #2
1a000b90:	d0be      	beq.n	1a000b10 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000b92:	9b01      	ldr	r3, [sp, #4]
1a000b94:	2b00      	cmp	r3, #0
1a000b96:	d0de      	beq.n	1a000b56 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000b98:	2d00      	cmp	r5, #0
1a000b9a:	d0e0      	beq.n	1a000b5e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000b9c:	f001 fa3c 	bl	1a002018 <vPortExitCritical>
		vTaskSuspendAll();
1a000ba0:	f000 fc2c 	bl	1a0013fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ba4:	f001 fa16 	bl	1a001fd4 <vPortEnterCritical>
1a000ba8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000bac:	b25b      	sxtb	r3, r3
1a000bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bb2:	d0d9      	beq.n	1a000b68 <xQueueGenericSend+0xd0>
1a000bb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000bb8:	b25b      	sxtb	r3, r3
1a000bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bbe:	d0d7      	beq.n	1a000b70 <xQueueGenericSend+0xd8>
1a000bc0:	f001 fa2a 	bl	1a002018 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000bc4:	a901      	add	r1, sp, #4
1a000bc6:	a802      	add	r0, sp, #8
1a000bc8:	f000 fe8e 	bl	1a0018e8 <xTaskCheckForTimeOut>
1a000bcc:	b9c8      	cbnz	r0, 1a000c02 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000bce:	4620      	mov	r0, r4
1a000bd0:	f7ff fe25 	bl	1a00081e <prvIsQueueFull>
1a000bd4:	2800      	cmp	r0, #0
1a000bd6:	d0cf      	beq.n	1a000b78 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000bd8:	9901      	ldr	r1, [sp, #4]
1a000bda:	f104 0010 	add.w	r0, r4, #16
1a000bde:	f000 fdfd 	bl	1a0017dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000be2:	4620      	mov	r0, r4
1a000be4:	f7ff fe84 	bl	1a0008f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000be8:	f000 fca2 	bl	1a001530 <xTaskResumeAll>
1a000bec:	2800      	cmp	r0, #0
1a000bee:	d1c8      	bne.n	1a000b82 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000bf0:	4b07      	ldr	r3, [pc, #28]	; (1a000c10 <xQueueGenericSend+0x178>)
1a000bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bf6:	601a      	str	r2, [r3, #0]
1a000bf8:	f3bf 8f4f 	dsb	sy
1a000bfc:	f3bf 8f6f 	isb	sy
1a000c00:	e7bf      	b.n	1a000b82 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000c02:	4620      	mov	r0, r4
1a000c04:	f7ff fe74 	bl	1a0008f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000c08:	f000 fc92 	bl	1a001530 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000c0c:	2000      	movs	r0, #0
1a000c0e:	e7a0      	b.n	1a000b52 <xQueueGenericSend+0xba>
1a000c10:	e000ed04 	.word	0xe000ed04

1a000c14 <xQueueGenericSendFromISR>:
{
1a000c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000c18:	b160      	cbz	r0, 1a000c34 <xQueueGenericSendFromISR+0x20>
1a000c1a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c1c:	b999      	cbnz	r1, 1a000c46 <xQueueGenericSendFromISR+0x32>
1a000c1e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000c20:	b188      	cbz	r0, 1a000c46 <xQueueGenericSendFromISR+0x32>
1a000c22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c26:	f383 8811 	msr	BASEPRI, r3
1a000c2a:	f3bf 8f6f 	isb	sy
1a000c2e:	f3bf 8f4f 	dsb	sy
1a000c32:	e7fe      	b.n	1a000c32 <xQueueGenericSendFromISR+0x1e>
1a000c34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c38:	f383 8811 	msr	BASEPRI, r3
1a000c3c:	f3bf 8f6f 	isb	sy
1a000c40:	f3bf 8f4f 	dsb	sy
1a000c44:	e7fe      	b.n	1a000c44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c46:	2b02      	cmp	r3, #2
1a000c48:	d10b      	bne.n	1a000c62 <xQueueGenericSendFromISR+0x4e>
1a000c4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000c4c:	2801      	cmp	r0, #1
1a000c4e:	d008      	beq.n	1a000c62 <xQueueGenericSendFromISR+0x4e>
1a000c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c54:	f383 8811 	msr	BASEPRI, r3
1a000c58:	f3bf 8f6f 	isb	sy
1a000c5c:	f3bf 8f4f 	dsb	sy
1a000c60:	e7fe      	b.n	1a000c60 <xQueueGenericSendFromISR+0x4c>
1a000c62:	461f      	mov	r7, r3
1a000c64:	4690      	mov	r8, r2
1a000c66:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000c68:	f001 fade 	bl	1a002228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000c6c:	f3ef 8611 	mrs	r6, BASEPRI
1a000c70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c74:	f383 8811 	msr	BASEPRI, r3
1a000c78:	f3bf 8f6f 	isb	sy
1a000c7c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c84:	429a      	cmp	r2, r3
1a000c86:	d303      	bcc.n	1a000c90 <xQueueGenericSendFromISR+0x7c>
1a000c88:	2f02      	cmp	r7, #2
1a000c8a:	d001      	beq.n	1a000c90 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000c8c:	2000      	movs	r0, #0
1a000c8e:	e00f      	b.n	1a000cb0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000c90:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000c94:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c96:	463a      	mov	r2, r7
1a000c98:	4649      	mov	r1, r9
1a000c9a:	4620      	mov	r0, r4
1a000c9c:	f7ff fddb 	bl	1a000856 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000ca0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000ca4:	d008      	beq.n	1a000cb8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000ca6:	1c6b      	adds	r3, r5, #1
1a000ca8:	b25b      	sxtb	r3, r3
1a000caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000cae:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000cb0:	f386 8811 	msr	BASEPRI, r6
}
1a000cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000cba:	b15b      	cbz	r3, 1a000cd4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cc0:	f000 fdc0 	bl	1a001844 <xTaskRemoveFromEventList>
1a000cc4:	b140      	cbz	r0, 1a000cd8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000cc6:	f1b8 0f00 	cmp.w	r8, #0
1a000cca:	d007      	beq.n	1a000cdc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000ccc:	2001      	movs	r0, #1
1a000cce:	f8c8 0000 	str.w	r0, [r8]
1a000cd2:	e7ed      	b.n	1a000cb0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000cd4:	2001      	movs	r0, #1
1a000cd6:	e7eb      	b.n	1a000cb0 <xQueueGenericSendFromISR+0x9c>
1a000cd8:	2001      	movs	r0, #1
1a000cda:	e7e9      	b.n	1a000cb0 <xQueueGenericSendFromISR+0x9c>
1a000cdc:	2001      	movs	r0, #1
1a000cde:	e7e7      	b.n	1a000cb0 <xQueueGenericSendFromISR+0x9c>

1a000ce0 <xQueueReceive>:
{
1a000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ce2:	b085      	sub	sp, #20
1a000ce4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000ce6:	b160      	cbz	r0, 1a000d02 <xQueueReceive+0x22>
1a000ce8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cea:	b999      	cbnz	r1, 1a000d14 <xQueueReceive+0x34>
1a000cec:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000cee:	b18b      	cbz	r3, 1a000d14 <xQueueReceive+0x34>
	__asm volatile
1a000cf0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cf4:	f383 8811 	msr	BASEPRI, r3
1a000cf8:	f3bf 8f6f 	isb	sy
1a000cfc:	f3bf 8f4f 	dsb	sy
1a000d00:	e7fe      	b.n	1a000d00 <xQueueReceive+0x20>
1a000d02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d06:	f383 8811 	msr	BASEPRI, r3
1a000d0a:	f3bf 8f6f 	isb	sy
1a000d0e:	f3bf 8f4f 	dsb	sy
1a000d12:	e7fe      	b.n	1a000d12 <xQueueReceive+0x32>
1a000d14:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d16:	f000 fe2d 	bl	1a001974 <xTaskGetSchedulerState>
1a000d1a:	b950      	cbnz	r0, 1a000d32 <xQueueReceive+0x52>
1a000d1c:	9b01      	ldr	r3, [sp, #4]
1a000d1e:	b153      	cbz	r3, 1a000d36 <xQueueReceive+0x56>
1a000d20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d24:	f383 8811 	msr	BASEPRI, r3
1a000d28:	f3bf 8f6f 	isb	sy
1a000d2c:	f3bf 8f4f 	dsb	sy
1a000d30:	e7fe      	b.n	1a000d30 <xQueueReceive+0x50>
1a000d32:	2600      	movs	r6, #0
1a000d34:	e03e      	b.n	1a000db4 <xQueueReceive+0xd4>
1a000d36:	2600      	movs	r6, #0
1a000d38:	e03c      	b.n	1a000db4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d3a:	4639      	mov	r1, r7
1a000d3c:	4620      	mov	r0, r4
1a000d3e:	f7ff fdc5 	bl	1a0008cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d42:	3d01      	subs	r5, #1
1a000d44:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d46:	6923      	ldr	r3, [r4, #16]
1a000d48:	b923      	cbnz	r3, 1a000d54 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000d4a:	f001 f965 	bl	1a002018 <vPortExitCritical>
				return pdPASS;
1a000d4e:	2001      	movs	r0, #1
}
1a000d50:	b005      	add	sp, #20
1a000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d54:	f104 0010 	add.w	r0, r4, #16
1a000d58:	f000 fd74 	bl	1a001844 <xTaskRemoveFromEventList>
1a000d5c:	2800      	cmp	r0, #0
1a000d5e:	d0f4      	beq.n	1a000d4a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000d60:	4b34      	ldr	r3, [pc, #208]	; (1a000e34 <xQueueReceive+0x154>)
1a000d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d66:	601a      	str	r2, [r3, #0]
1a000d68:	f3bf 8f4f 	dsb	sy
1a000d6c:	f3bf 8f6f 	isb	sy
1a000d70:	e7eb      	b.n	1a000d4a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000d72:	f001 f951 	bl	1a002018 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d76:	2000      	movs	r0, #0
1a000d78:	e7ea      	b.n	1a000d50 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d7a:	a802      	add	r0, sp, #8
1a000d7c:	f000 fda8 	bl	1a0018d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d80:	2601      	movs	r6, #1
1a000d82:	e021      	b.n	1a000dc8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000d84:	2300      	movs	r3, #0
1a000d86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000d8a:	e029      	b.n	1a000de0 <xQueueReceive+0x100>
1a000d8c:	2300      	movs	r3, #0
1a000d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d92:	e02b      	b.n	1a000dec <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000d94:	4620      	mov	r0, r4
1a000d96:	f7ff fdab 	bl	1a0008f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000d9a:	f000 fbc9 	bl	1a001530 <xTaskResumeAll>
1a000d9e:	e009      	b.n	1a000db4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000da0:	4620      	mov	r0, r4
1a000da2:	f7ff fda5 	bl	1a0008f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000da6:	f000 fbc3 	bl	1a001530 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000daa:	4620      	mov	r0, r4
1a000dac:	f7ff fd46 	bl	1a00083c <prvIsQueueEmpty>
1a000db0:	2800      	cmp	r0, #0
1a000db2:	d13d      	bne.n	1a000e30 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000db4:	f001 f90e 	bl	1a001fd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000dba:	2d00      	cmp	r5, #0
1a000dbc:	d1bd      	bne.n	1a000d3a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dbe:	9b01      	ldr	r3, [sp, #4]
1a000dc0:	2b00      	cmp	r3, #0
1a000dc2:	d0d6      	beq.n	1a000d72 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000dc4:	2e00      	cmp	r6, #0
1a000dc6:	d0d8      	beq.n	1a000d7a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000dc8:	f001 f926 	bl	1a002018 <vPortExitCritical>
		vTaskSuspendAll();
1a000dcc:	f000 fb16 	bl	1a0013fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000dd0:	f001 f900 	bl	1a001fd4 <vPortEnterCritical>
1a000dd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000dd8:	b25b      	sxtb	r3, r3
1a000dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dde:	d0d1      	beq.n	1a000d84 <xQueueReceive+0xa4>
1a000de0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000de4:	b25b      	sxtb	r3, r3
1a000de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dea:	d0cf      	beq.n	1a000d8c <xQueueReceive+0xac>
1a000dec:	f001 f914 	bl	1a002018 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000df0:	a901      	add	r1, sp, #4
1a000df2:	a802      	add	r0, sp, #8
1a000df4:	f000 fd78 	bl	1a0018e8 <xTaskCheckForTimeOut>
1a000df8:	2800      	cmp	r0, #0
1a000dfa:	d1d1      	bne.n	1a000da0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000dfc:	4620      	mov	r0, r4
1a000dfe:	f7ff fd1d 	bl	1a00083c <prvIsQueueEmpty>
1a000e02:	2800      	cmp	r0, #0
1a000e04:	d0c6      	beq.n	1a000d94 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000e06:	9901      	ldr	r1, [sp, #4]
1a000e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e0c:	f000 fce6 	bl	1a0017dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e10:	4620      	mov	r0, r4
1a000e12:	f7ff fd6d 	bl	1a0008f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e16:	f000 fb8b 	bl	1a001530 <xTaskResumeAll>
1a000e1a:	2800      	cmp	r0, #0
1a000e1c:	d1ca      	bne.n	1a000db4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000e1e:	4b05      	ldr	r3, [pc, #20]	; (1a000e34 <xQueueReceive+0x154>)
1a000e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e24:	601a      	str	r2, [r3, #0]
1a000e26:	f3bf 8f4f 	dsb	sy
1a000e2a:	f3bf 8f6f 	isb	sy
1a000e2e:	e7c1      	b.n	1a000db4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000e30:	2000      	movs	r0, #0
1a000e32:	e78d      	b.n	1a000d50 <xQueueReceive+0x70>
1a000e34:	e000ed04 	.word	0xe000ed04

1a000e38 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e38:	2300      	movs	r3, #0
1a000e3a:	2b07      	cmp	r3, #7
1a000e3c:	d80c      	bhi.n	1a000e58 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000e3e:	4a07      	ldr	r2, [pc, #28]	; (1a000e5c <vQueueAddToRegistry+0x24>)
1a000e40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000e44:	b10a      	cbz	r2, 1a000e4a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e46:	3301      	adds	r3, #1
1a000e48:	e7f7      	b.n	1a000e3a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000e4a:	4a04      	ldr	r2, [pc, #16]	; (1a000e5c <vQueueAddToRegistry+0x24>)
1a000e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000e50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000e54:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000e56:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000e58:	4770      	bx	lr
1a000e5a:	bf00      	nop
1a000e5c:	10002b14 	.word	0x10002b14

1a000e60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000e60:	b570      	push	{r4, r5, r6, lr}
1a000e62:	4604      	mov	r4, r0
1a000e64:	460d      	mov	r5, r1
1a000e66:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000e68:	f001 f8b4 	bl	1a001fd4 <vPortEnterCritical>
1a000e6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e70:	b25b      	sxtb	r3, r3
1a000e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e76:	d00d      	beq.n	1a000e94 <vQueueWaitForMessageRestricted+0x34>
1a000e78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e7c:	b25b      	sxtb	r3, r3
1a000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e82:	d00b      	beq.n	1a000e9c <vQueueWaitForMessageRestricted+0x3c>
1a000e84:	f001 f8c8 	bl	1a002018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000e88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000e8a:	b15b      	cbz	r3, 1a000ea4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000e8c:	4620      	mov	r0, r4
1a000e8e:	f7ff fd2f 	bl	1a0008f0 <prvUnlockQueue>
	}
1a000e92:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000e94:	2300      	movs	r3, #0
1a000e96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e9a:	e7ed      	b.n	1a000e78 <vQueueWaitForMessageRestricted+0x18>
1a000e9c:	2300      	movs	r3, #0
1a000e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ea2:	e7ef      	b.n	1a000e84 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000ea4:	4632      	mov	r2, r6
1a000ea6:	4629      	mov	r1, r5
1a000ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000eac:	f000 fcae 	bl	1a00180c <vTaskPlaceOnEventListRestricted>
1a000eb0:	e7ec      	b.n	1a000e8c <vQueueWaitForMessageRestricted+0x2c>

1a000eb2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eb2:	f100 0308 	add.w	r3, r0, #8
1a000eb6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ebc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ebe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ec0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000ec2:	2300      	movs	r3, #0
1a000ec4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000ec6:	4770      	bx	lr

1a000ec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000ec8:	2300      	movs	r3, #0
1a000eca:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000ecc:	4770      	bx	lr

1a000ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000ece:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000ed0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000ed2:	689a      	ldr	r2, [r3, #8]
1a000ed4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000ed6:	689a      	ldr	r2, [r3, #8]
1a000ed8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000eda:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000edc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000ede:	6803      	ldr	r3, [r0, #0]
1a000ee0:	3301      	adds	r3, #1
1a000ee2:	6003      	str	r3, [r0, #0]
}
1a000ee4:	4770      	bx	lr

1a000ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000ee6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000ee8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000eea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000eee:	d002      	beq.n	1a000ef6 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ef0:	f100 0208 	add.w	r2, r0, #8
1a000ef4:	e002      	b.n	1a000efc <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000ef6:	6902      	ldr	r2, [r0, #16]
1a000ef8:	e004      	b.n	1a000f04 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000efa:	461a      	mov	r2, r3
1a000efc:	6853      	ldr	r3, [r2, #4]
1a000efe:	681c      	ldr	r4, [r3, #0]
1a000f00:	42ac      	cmp	r4, r5
1a000f02:	d9fa      	bls.n	1a000efa <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000f04:	6853      	ldr	r3, [r2, #4]
1a000f06:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000f08:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000f0a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000f0c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f10:	6803      	ldr	r3, [r0, #0]
1a000f12:	3301      	adds	r3, #1
1a000f14:	6003      	str	r3, [r0, #0]
}
1a000f16:	bc30      	pop	{r4, r5}
1a000f18:	4770      	bx	lr

1a000f1a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000f1a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000f1c:	6842      	ldr	r2, [r0, #4]
1a000f1e:	6881      	ldr	r1, [r0, #8]
1a000f20:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000f22:	6882      	ldr	r2, [r0, #8]
1a000f24:	6841      	ldr	r1, [r0, #4]
1a000f26:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000f28:	685a      	ldr	r2, [r3, #4]
1a000f2a:	4282      	cmp	r2, r0
1a000f2c:	d006      	beq.n	1a000f3c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000f2e:	2200      	movs	r2, #0
1a000f30:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000f32:	681a      	ldr	r2, [r3, #0]
1a000f34:	3a01      	subs	r2, #1
1a000f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000f38:	6818      	ldr	r0, [r3, #0]
}
1a000f3a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000f3c:	6882      	ldr	r2, [r0, #8]
1a000f3e:	605a      	str	r2, [r3, #4]
1a000f40:	e7f5      	b.n	1a000f2e <uxListRemove+0x14>
1a000f42:	Address 0x000000001a000f42 is out of bounds.


1a000f44 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000f44:	4b03      	ldr	r3, [pc, #12]	; (1a000f54 <vApplicationGetIdleTaskMemory+0x10>)
1a000f46:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000f48:	4b03      	ldr	r3, [pc, #12]	; (1a000f58 <vApplicationGetIdleTaskMemory+0x14>)
1a000f4a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000f4c:	235a      	movs	r3, #90	; 0x5a
1a000f4e:	6013      	str	r3, [r2, #0]
}
1a000f50:	4770      	bx	lr
1a000f52:	bf00      	nop
1a000f54:	1000279c 	.word	0x1000279c
1a000f58:	10002094 	.word	0x10002094

1a000f5c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000f5c:	4b03      	ldr	r3, [pc, #12]	; (1a000f6c <vApplicationGetTimerTaskMemory+0x10>)
1a000f5e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000f60:	4b03      	ldr	r3, [pc, #12]	; (1a000f70 <vApplicationGetTimerTaskMemory+0x14>)
1a000f62:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000f64:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000f68:	6013      	str	r3, [r2, #0]
1a000f6a:	4770      	bx	lr
1a000f6c:	100027fc 	.word	0x100027fc
1a000f70:	100021fc 	.word	0x100021fc

1a000f74 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000f74:	e7fe      	b.n	1a000f74 <vApplicationStackOverflowHook>

1a000f76 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000f76:	e7fe      	b.n	1a000f76 <vApplicationMallocFailedHook>

1a000f78 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000f78:	4b08      	ldr	r3, [pc, #32]	; (1a000f9c <prvResetNextTaskUnblockTime+0x24>)
1a000f7a:	681b      	ldr	r3, [r3, #0]
1a000f7c:	681b      	ldr	r3, [r3, #0]
1a000f7e:	b13b      	cbz	r3, 1a000f90 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000f80:	4b06      	ldr	r3, [pc, #24]	; (1a000f9c <prvResetNextTaskUnblockTime+0x24>)
1a000f82:	681b      	ldr	r3, [r3, #0]
1a000f84:	68db      	ldr	r3, [r3, #12]
1a000f86:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000f88:	685a      	ldr	r2, [r3, #4]
1a000f8a:	4b05      	ldr	r3, [pc, #20]	; (1a000fa0 <prvResetNextTaskUnblockTime+0x28>)
1a000f8c:	601a      	str	r2, [r3, #0]
	}
}
1a000f8e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000f90:	4b03      	ldr	r3, [pc, #12]	; (1a000fa0 <prvResetNextTaskUnblockTime+0x28>)
1a000f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000f96:	601a      	str	r2, [r3, #0]
1a000f98:	4770      	bx	lr
1a000f9a:	bf00      	nop
1a000f9c:	10002860 	.word	0x10002860
1a000fa0:	10002934 	.word	0x10002934

1a000fa4 <prvInitialiseNewTask>:
{
1a000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000fa8:	4681      	mov	r9, r0
1a000faa:	460d      	mov	r5, r1
1a000fac:	4617      	mov	r7, r2
1a000fae:	469a      	mov	sl, r3
1a000fb0:	9e08      	ldr	r6, [sp, #32]
1a000fb2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000fb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000fb8:	0092      	lsls	r2, r2, #2
1a000fba:	21a5      	movs	r1, #165	; 0xa5
1a000fbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000fbe:	f003 fc8a 	bl	1a0048d6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000fc4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000fc8:	3a01      	subs	r2, #1
1a000fca:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000fce:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000fd2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000fd4:	2300      	movs	r3, #0
1a000fd6:	2b0f      	cmp	r3, #15
1a000fd8:	d807      	bhi.n	1a000fea <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000fda:	5ce9      	ldrb	r1, [r5, r3]
1a000fdc:	18e2      	adds	r2, r4, r3
1a000fde:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000fe2:	5cea      	ldrb	r2, [r5, r3]
1a000fe4:	b10a      	cbz	r2, 1a000fea <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000fe6:	3301      	adds	r3, #1
1a000fe8:	e7f5      	b.n	1a000fd6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000fea:	2300      	movs	r3, #0
1a000fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000ff0:	2e06      	cmp	r6, #6
1a000ff2:	d900      	bls.n	1a000ff6 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000ff4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000ff6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000ff8:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000ffa:	2500      	movs	r5, #0
1a000ffc:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000ffe:	1d20      	adds	r0, r4, #4
1a001000:	f7ff ff62 	bl	1a000ec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001004:	f104 0018 	add.w	r0, r4, #24
1a001008:	f7ff ff5e 	bl	1a000ec8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00100c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00100e:	f1c6 0607 	rsb	r6, r6, #7
1a001012:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001014:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001016:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001018:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00101c:	4652      	mov	r2, sl
1a00101e:	4649      	mov	r1, r9
1a001020:	4638      	mov	r0, r7
1a001022:	f000 ffad 	bl	1a001f80 <pxPortInitialiseStack>
1a001026:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001028:	f1b8 0f00 	cmp.w	r8, #0
1a00102c:	d001      	beq.n	1a001032 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00102e:	f8c8 4000 	str.w	r4, [r8]
}
1a001032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001036:	Address 0x000000001a001036 is out of bounds.


1a001038 <prvInitialiseTaskLists>:
{
1a001038:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00103a:	2400      	movs	r4, #0
1a00103c:	e007      	b.n	1a00104e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00103e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001042:	0093      	lsls	r3, r2, #2
1a001044:	480e      	ldr	r0, [pc, #56]	; (1a001080 <prvInitialiseTaskLists+0x48>)
1a001046:	4418      	add	r0, r3
1a001048:	f7ff ff33 	bl	1a000eb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00104c:	3401      	adds	r4, #1
1a00104e:	2c06      	cmp	r4, #6
1a001050:	d9f5      	bls.n	1a00103e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001052:	4d0c      	ldr	r5, [pc, #48]	; (1a001084 <prvInitialiseTaskLists+0x4c>)
1a001054:	4628      	mov	r0, r5
1a001056:	f7ff ff2c 	bl	1a000eb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00105a:	4c0b      	ldr	r4, [pc, #44]	; (1a001088 <prvInitialiseTaskLists+0x50>)
1a00105c:	4620      	mov	r0, r4
1a00105e:	f7ff ff28 	bl	1a000eb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001062:	480a      	ldr	r0, [pc, #40]	; (1a00108c <prvInitialiseTaskLists+0x54>)
1a001064:	f7ff ff25 	bl	1a000eb2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001068:	4809      	ldr	r0, [pc, #36]	; (1a001090 <prvInitialiseTaskLists+0x58>)
1a00106a:	f7ff ff22 	bl	1a000eb2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00106e:	4809      	ldr	r0, [pc, #36]	; (1a001094 <prvInitialiseTaskLists+0x5c>)
1a001070:	f7ff ff1f 	bl	1a000eb2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001074:	4b08      	ldr	r3, [pc, #32]	; (1a001098 <prvInitialiseTaskLists+0x60>)
1a001076:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001078:	4b08      	ldr	r3, [pc, #32]	; (1a00109c <prvInitialiseTaskLists+0x64>)
1a00107a:	601c      	str	r4, [r3, #0]
}
1a00107c:	bd38      	pop	{r3, r4, r5, pc}
1a00107e:	bf00      	nop
1a001080:	10002868 	.word	0x10002868
1a001084:	1000290c 	.word	0x1000290c
1a001088:	10002920 	.word	0x10002920
1a00108c:	1000293c 	.word	0x1000293c
1a001090:	10002968 	.word	0x10002968
1a001094:	10002954 	.word	0x10002954
1a001098:	10002860 	.word	0x10002860
1a00109c:	10002864 	.word	0x10002864

1a0010a0 <prvAddNewTaskToReadyList>:
{
1a0010a0:	b510      	push	{r4, lr}
1a0010a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0010a4:	f000 ff96 	bl	1a001fd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0010a8:	4a21      	ldr	r2, [pc, #132]	; (1a001130 <prvAddNewTaskToReadyList+0x90>)
1a0010aa:	6813      	ldr	r3, [r2, #0]
1a0010ac:	3301      	adds	r3, #1
1a0010ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0010b0:	4b20      	ldr	r3, [pc, #128]	; (1a001134 <prvAddNewTaskToReadyList+0x94>)
1a0010b2:	681b      	ldr	r3, [r3, #0]
1a0010b4:	b15b      	cbz	r3, 1a0010ce <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0010b6:	4b20      	ldr	r3, [pc, #128]	; (1a001138 <prvAddNewTaskToReadyList+0x98>)
1a0010b8:	681b      	ldr	r3, [r3, #0]
1a0010ba:	b96b      	cbnz	r3, 1a0010d8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0010bc:	4b1d      	ldr	r3, [pc, #116]	; (1a001134 <prvAddNewTaskToReadyList+0x94>)
1a0010be:	681b      	ldr	r3, [r3, #0]
1a0010c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0010c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010c4:	429a      	cmp	r2, r3
1a0010c6:	d807      	bhi.n	1a0010d8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0010c8:	4b1a      	ldr	r3, [pc, #104]	; (1a001134 <prvAddNewTaskToReadyList+0x94>)
1a0010ca:	601c      	str	r4, [r3, #0]
1a0010cc:	e004      	b.n	1a0010d8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0010ce:	4b19      	ldr	r3, [pc, #100]	; (1a001134 <prvAddNewTaskToReadyList+0x94>)
1a0010d0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0010d2:	6813      	ldr	r3, [r2, #0]
1a0010d4:	2b01      	cmp	r3, #1
1a0010d6:	d027      	beq.n	1a001128 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0010d8:	4a18      	ldr	r2, [pc, #96]	; (1a00113c <prvAddNewTaskToReadyList+0x9c>)
1a0010da:	6813      	ldr	r3, [r2, #0]
1a0010dc:	3301      	adds	r3, #1
1a0010de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0010e0:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0010e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010e4:	2201      	movs	r2, #1
1a0010e6:	409a      	lsls	r2, r3
1a0010e8:	4915      	ldr	r1, [pc, #84]	; (1a001140 <prvAddNewTaskToReadyList+0xa0>)
1a0010ea:	6808      	ldr	r0, [r1, #0]
1a0010ec:	4302      	orrs	r2, r0
1a0010ee:	600a      	str	r2, [r1, #0]
1a0010f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010f4:	009a      	lsls	r2, r3, #2
1a0010f6:	1d21      	adds	r1, r4, #4
1a0010f8:	4812      	ldr	r0, [pc, #72]	; (1a001144 <prvAddNewTaskToReadyList+0xa4>)
1a0010fa:	4410      	add	r0, r2
1a0010fc:	f7ff fee7 	bl	1a000ece <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001100:	f000 ff8a 	bl	1a002018 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001104:	4b0c      	ldr	r3, [pc, #48]	; (1a001138 <prvAddNewTaskToReadyList+0x98>)
1a001106:	681b      	ldr	r3, [r3, #0]
1a001108:	b16b      	cbz	r3, 1a001126 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00110a:	4b0a      	ldr	r3, [pc, #40]	; (1a001134 <prvAddNewTaskToReadyList+0x94>)
1a00110c:	681b      	ldr	r3, [r3, #0]
1a00110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001112:	429a      	cmp	r2, r3
1a001114:	d207      	bcs.n	1a001126 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001116:	4b0c      	ldr	r3, [pc, #48]	; (1a001148 <prvAddNewTaskToReadyList+0xa8>)
1a001118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00111c:	601a      	str	r2, [r3, #0]
1a00111e:	f3bf 8f4f 	dsb	sy
1a001122:	f3bf 8f6f 	isb	sy
}
1a001126:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001128:	f7ff ff86 	bl	1a001038 <prvInitialiseTaskLists>
1a00112c:	e7d4      	b.n	1a0010d8 <prvAddNewTaskToReadyList+0x38>
1a00112e:	bf00      	nop
1a001130:	100028f4 	.word	0x100028f4
1a001134:	1000285c 	.word	0x1000285c
1a001138:	10002950 	.word	0x10002950
1a00113c:	10002904 	.word	0x10002904
1a001140:	10002908 	.word	0x10002908
1a001144:	10002868 	.word	0x10002868
1a001148:	e000ed04 	.word	0xe000ed04

1a00114c <prvDeleteTCB>:
	{
1a00114c:	b510      	push	{r4, lr}
1a00114e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001150:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001154:	b933      	cbnz	r3, 1a001164 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001156:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001158:	f7ff fb56 	bl	1a000808 <vPortFree>
				vPortFree( pxTCB );
1a00115c:	4620      	mov	r0, r4
1a00115e:	f7ff fb53 	bl	1a000808 <vPortFree>
	}
1a001162:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001164:	2b01      	cmp	r3, #1
1a001166:	d00a      	beq.n	1a00117e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001168:	2b02      	cmp	r3, #2
1a00116a:	d0fa      	beq.n	1a001162 <prvDeleteTCB+0x16>
1a00116c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001170:	f383 8811 	msr	BASEPRI, r3
1a001174:	f3bf 8f6f 	isb	sy
1a001178:	f3bf 8f4f 	dsb	sy
1a00117c:	e7fe      	b.n	1a00117c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00117e:	f7ff fb43 	bl	1a000808 <vPortFree>
1a001182:	e7ee      	b.n	1a001162 <prvDeleteTCB+0x16>

1a001184 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001184:	4b0f      	ldr	r3, [pc, #60]	; (1a0011c4 <prvCheckTasksWaitingTermination+0x40>)
1a001186:	681b      	ldr	r3, [r3, #0]
1a001188:	b1d3      	cbz	r3, 1a0011c0 <prvCheckTasksWaitingTermination+0x3c>
{
1a00118a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a00118c:	f000 ff22 	bl	1a001fd4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001190:	4b0d      	ldr	r3, [pc, #52]	; (1a0011c8 <prvCheckTasksWaitingTermination+0x44>)
1a001192:	68db      	ldr	r3, [r3, #12]
1a001194:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001196:	1d20      	adds	r0, r4, #4
1a001198:	f7ff febf 	bl	1a000f1a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a00119c:	4a0b      	ldr	r2, [pc, #44]	; (1a0011cc <prvCheckTasksWaitingTermination+0x48>)
1a00119e:	6813      	ldr	r3, [r2, #0]
1a0011a0:	3b01      	subs	r3, #1
1a0011a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0011a4:	4a07      	ldr	r2, [pc, #28]	; (1a0011c4 <prvCheckTasksWaitingTermination+0x40>)
1a0011a6:	6813      	ldr	r3, [r2, #0]
1a0011a8:	3b01      	subs	r3, #1
1a0011aa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0011ac:	f000 ff34 	bl	1a002018 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0011b0:	4620      	mov	r0, r4
1a0011b2:	f7ff ffcb 	bl	1a00114c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011b6:	4b03      	ldr	r3, [pc, #12]	; (1a0011c4 <prvCheckTasksWaitingTermination+0x40>)
1a0011b8:	681b      	ldr	r3, [r3, #0]
1a0011ba:	2b00      	cmp	r3, #0
1a0011bc:	d1e6      	bne.n	1a00118c <prvCheckTasksWaitingTermination+0x8>
}
1a0011be:	bd10      	pop	{r4, pc}
1a0011c0:	4770      	bx	lr
1a0011c2:	bf00      	nop
1a0011c4:	100028f8 	.word	0x100028f8
1a0011c8:	10002968 	.word	0x10002968
1a0011cc:	100028f4 	.word	0x100028f4

1a0011d0 <prvIdleTask>:
{
1a0011d0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0011d2:	f7ff ffd7 	bl	1a001184 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0011d6:	4b06      	ldr	r3, [pc, #24]	; (1a0011f0 <prvIdleTask+0x20>)
1a0011d8:	681b      	ldr	r3, [r3, #0]
1a0011da:	2b01      	cmp	r3, #1
1a0011dc:	d9f9      	bls.n	1a0011d2 <prvIdleTask+0x2>
				taskYIELD();
1a0011de:	4b05      	ldr	r3, [pc, #20]	; (1a0011f4 <prvIdleTask+0x24>)
1a0011e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011e4:	601a      	str	r2, [r3, #0]
1a0011e6:	f3bf 8f4f 	dsb	sy
1a0011ea:	f3bf 8f6f 	isb	sy
1a0011ee:	e7f0      	b.n	1a0011d2 <prvIdleTask+0x2>
1a0011f0:	10002868 	.word	0x10002868
1a0011f4:	e000ed04 	.word	0xe000ed04

1a0011f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0011f8:	b570      	push	{r4, r5, r6, lr}
1a0011fa:	4604      	mov	r4, r0
1a0011fc:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0011fe:	4b1d      	ldr	r3, [pc, #116]	; (1a001274 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001200:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001202:	4b1d      	ldr	r3, [pc, #116]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a001204:	6818      	ldr	r0, [r3, #0]
1a001206:	3004      	adds	r0, #4
1a001208:	f7ff fe87 	bl	1a000f1a <uxListRemove>
1a00120c:	b950      	cbnz	r0, 1a001224 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00120e:	4b1a      	ldr	r3, [pc, #104]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a001210:	681b      	ldr	r3, [r3, #0]
1a001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001214:	2301      	movs	r3, #1
1a001216:	fa03 f202 	lsl.w	r2, r3, r2
1a00121a:	4918      	ldr	r1, [pc, #96]	; (1a00127c <prvAddCurrentTaskToDelayedList+0x84>)
1a00121c:	680b      	ldr	r3, [r1, #0]
1a00121e:	ea23 0302 	bic.w	r3, r3, r2
1a001222:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001224:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001228:	d013      	beq.n	1a001252 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00122a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00122c:	4b12      	ldr	r3, [pc, #72]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a00122e:	681b      	ldr	r3, [r3, #0]
1a001230:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001232:	42a5      	cmp	r5, r4
1a001234:	d816      	bhi.n	1a001264 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001236:	4b12      	ldr	r3, [pc, #72]	; (1a001280 <prvAddCurrentTaskToDelayedList+0x88>)
1a001238:	6818      	ldr	r0, [r3, #0]
1a00123a:	4b0f      	ldr	r3, [pc, #60]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a00123c:	6819      	ldr	r1, [r3, #0]
1a00123e:	3104      	adds	r1, #4
1a001240:	f7ff fe51 	bl	1a000ee6 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001244:	4b0f      	ldr	r3, [pc, #60]	; (1a001284 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001246:	681b      	ldr	r3, [r3, #0]
1a001248:	42a3      	cmp	r3, r4
1a00124a:	d912      	bls.n	1a001272 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a00124c:	4b0d      	ldr	r3, [pc, #52]	; (1a001284 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00124e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001250:	e00f      	b.n	1a001272 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001252:	2e00      	cmp	r6, #0
1a001254:	d0e9      	beq.n	1a00122a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001256:	4b08      	ldr	r3, [pc, #32]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a001258:	6819      	ldr	r1, [r3, #0]
1a00125a:	3104      	adds	r1, #4
1a00125c:	480a      	ldr	r0, [pc, #40]	; (1a001288 <prvAddCurrentTaskToDelayedList+0x90>)
1a00125e:	f7ff fe36 	bl	1a000ece <vListInsertEnd>
1a001262:	e006      	b.n	1a001272 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001264:	4b09      	ldr	r3, [pc, #36]	; (1a00128c <prvAddCurrentTaskToDelayedList+0x94>)
1a001266:	6818      	ldr	r0, [r3, #0]
1a001268:	4b03      	ldr	r3, [pc, #12]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x80>)
1a00126a:	6819      	ldr	r1, [r3, #0]
1a00126c:	3104      	adds	r1, #4
1a00126e:	f7ff fe3a 	bl	1a000ee6 <vListInsert>
}
1a001272:	bd70      	pop	{r4, r5, r6, pc}
1a001274:	1000297c 	.word	0x1000297c
1a001278:	1000285c 	.word	0x1000285c
1a00127c:	10002908 	.word	0x10002908
1a001280:	10002860 	.word	0x10002860
1a001284:	10002934 	.word	0x10002934
1a001288:	10002954 	.word	0x10002954
1a00128c:	10002864 	.word	0x10002864

1a001290 <xTaskCreateStatic>:
	{
1a001290:	b570      	push	{r4, r5, r6, lr}
1a001292:	b086      	sub	sp, #24
1a001294:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001296:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001298:	b945      	cbnz	r5, 1a0012ac <xTaskCreateStatic+0x1c>
1a00129a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00129e:	f383 8811 	msr	BASEPRI, r3
1a0012a2:	f3bf 8f6f 	isb	sy
1a0012a6:	f3bf 8f4f 	dsb	sy
1a0012aa:	e7fe      	b.n	1a0012aa <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0012ac:	b944      	cbnz	r4, 1a0012c0 <xTaskCreateStatic+0x30>
1a0012ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012b2:	f383 8811 	msr	BASEPRI, r3
1a0012b6:	f3bf 8f6f 	isb	sy
1a0012ba:	f3bf 8f4f 	dsb	sy
1a0012be:	e7fe      	b.n	1a0012be <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0012c0:	2660      	movs	r6, #96	; 0x60
1a0012c2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0012c4:	9e04      	ldr	r6, [sp, #16]
1a0012c6:	2e60      	cmp	r6, #96	; 0x60
1a0012c8:	d008      	beq.n	1a0012dc <xTaskCreateStatic+0x4c>
1a0012ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ce:	f383 8811 	msr	BASEPRI, r3
1a0012d2:	f3bf 8f6f 	isb	sy
1a0012d6:	f3bf 8f4f 	dsb	sy
1a0012da:	e7fe      	b.n	1a0012da <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0012dc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0012de:	2502      	movs	r5, #2
1a0012e0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0012e4:	2500      	movs	r5, #0
1a0012e6:	9503      	str	r5, [sp, #12]
1a0012e8:	9402      	str	r4, [sp, #8]
1a0012ea:	ad05      	add	r5, sp, #20
1a0012ec:	9501      	str	r5, [sp, #4]
1a0012ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0012f0:	9500      	str	r5, [sp, #0]
1a0012f2:	f7ff fe57 	bl	1a000fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0012f6:	4620      	mov	r0, r4
1a0012f8:	f7ff fed2 	bl	1a0010a0 <prvAddNewTaskToReadyList>
	}
1a0012fc:	9805      	ldr	r0, [sp, #20]
1a0012fe:	b006      	add	sp, #24
1a001300:	bd70      	pop	{r4, r5, r6, pc}

1a001302 <xTaskCreate>:
	{
1a001302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001306:	b085      	sub	sp, #20
1a001308:	4607      	mov	r7, r0
1a00130a:	4688      	mov	r8, r1
1a00130c:	4615      	mov	r5, r2
1a00130e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001310:	0090      	lsls	r0, r2, #2
1a001312:	f7ff fa41 	bl	1a000798 <pvPortMalloc>
			if( pxStack != NULL )
1a001316:	b308      	cbz	r0, 1a00135c <xTaskCreate+0x5a>
1a001318:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00131a:	2060      	movs	r0, #96	; 0x60
1a00131c:	f7ff fa3c 	bl	1a000798 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001320:	4604      	mov	r4, r0
1a001322:	b1b8      	cbz	r0, 1a001354 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001324:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001326:	b1e4      	cbz	r4, 1a001362 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001328:	2300      	movs	r3, #0
1a00132a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00132e:	9303      	str	r3, [sp, #12]
1a001330:	9402      	str	r4, [sp, #8]
1a001332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001334:	9301      	str	r3, [sp, #4]
1a001336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001338:	9300      	str	r3, [sp, #0]
1a00133a:	464b      	mov	r3, r9
1a00133c:	462a      	mov	r2, r5
1a00133e:	4641      	mov	r1, r8
1a001340:	4638      	mov	r0, r7
1a001342:	f7ff fe2f 	bl	1a000fa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001346:	4620      	mov	r0, r4
1a001348:	f7ff feaa 	bl	1a0010a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00134c:	2001      	movs	r0, #1
	}
1a00134e:	b005      	add	sp, #20
1a001350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001354:	4630      	mov	r0, r6
1a001356:	f7ff fa57 	bl	1a000808 <vPortFree>
1a00135a:	e7e4      	b.n	1a001326 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001360:	e7f5      	b.n	1a00134e <xTaskCreate+0x4c>
1a001362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001366:	e7f2      	b.n	1a00134e <xTaskCreate+0x4c>

1a001368 <vTaskStartScheduler>:
{
1a001368:	b510      	push	{r4, lr}
1a00136a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00136c:	2400      	movs	r4, #0
1a00136e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001370:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001372:	aa07      	add	r2, sp, #28
1a001374:	a906      	add	r1, sp, #24
1a001376:	a805      	add	r0, sp, #20
1a001378:	f7ff fde4 	bl	1a000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00137c:	9b05      	ldr	r3, [sp, #20]
1a00137e:	9302      	str	r3, [sp, #8]
1a001380:	9b06      	ldr	r3, [sp, #24]
1a001382:	9301      	str	r3, [sp, #4]
1a001384:	9400      	str	r4, [sp, #0]
1a001386:	4623      	mov	r3, r4
1a001388:	9a07      	ldr	r2, [sp, #28]
1a00138a:	4917      	ldr	r1, [pc, #92]	; (1a0013e8 <vTaskStartScheduler+0x80>)
1a00138c:	4817      	ldr	r0, [pc, #92]	; (1a0013ec <vTaskStartScheduler+0x84>)
1a00138e:	f7ff ff7f 	bl	1a001290 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001392:	b140      	cbz	r0, 1a0013a6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001394:	f000 fbe2 	bl	1a001b5c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001398:	2801      	cmp	r0, #1
1a00139a:	d006      	beq.n	1a0013aa <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00139c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013a0:	d018      	beq.n	1a0013d4 <vTaskStartScheduler+0x6c>
}
1a0013a2:	b008      	add	sp, #32
1a0013a4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0013a6:	2000      	movs	r0, #0
1a0013a8:	e7f6      	b.n	1a001398 <vTaskStartScheduler+0x30>
1a0013aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ae:	f383 8811 	msr	BASEPRI, r3
1a0013b2:	f3bf 8f6f 	isb	sy
1a0013b6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0013ba:	4b0d      	ldr	r3, [pc, #52]	; (1a0013f0 <vTaskStartScheduler+0x88>)
1a0013bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0013c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0013f4 <vTaskStartScheduler+0x8c>)
1a0013c4:	2201      	movs	r2, #1
1a0013c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0013c8:	4b0b      	ldr	r3, [pc, #44]	; (1a0013f8 <vTaskStartScheduler+0x90>)
1a0013ca:	2200      	movs	r2, #0
1a0013cc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0013ce:	f000 fea3 	bl	1a002118 <xPortStartScheduler>
1a0013d2:	e7e6      	b.n	1a0013a2 <vTaskStartScheduler+0x3a>
1a0013d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013d8:	f383 8811 	msr	BASEPRI, r3
1a0013dc:	f3bf 8f6f 	isb	sy
1a0013e0:	f3bf 8f4f 	dsb	sy
1a0013e4:	e7fe      	b.n	1a0013e4 <vTaskStartScheduler+0x7c>
1a0013e6:	bf00      	nop
1a0013e8:	1a004a84 	.word	0x1a004a84
1a0013ec:	1a0011d1 	.word	0x1a0011d1
1a0013f0:	10002934 	.word	0x10002934
1a0013f4:	10002950 	.word	0x10002950
1a0013f8:	1000297c 	.word	0x1000297c

1a0013fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0013fc:	4a02      	ldr	r2, [pc, #8]	; (1a001408 <vTaskSuspendAll+0xc>)
1a0013fe:	6813      	ldr	r3, [r2, #0]
1a001400:	3301      	adds	r3, #1
1a001402:	6013      	str	r3, [r2, #0]
}
1a001404:	4770      	bx	lr
1a001406:	bf00      	nop
1a001408:	10002900 	.word	0x10002900

1a00140c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a00140c:	4b01      	ldr	r3, [pc, #4]	; (1a001414 <xTaskGetTickCount+0x8>)
1a00140e:	6818      	ldr	r0, [r3, #0]
}
1a001410:	4770      	bx	lr
1a001412:	bf00      	nop
1a001414:	1000297c 	.word	0x1000297c

1a001418 <xTaskIncrementTick>:
{
1a001418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00141a:	4b3a      	ldr	r3, [pc, #232]	; (1a001504 <xTaskIncrementTick+0xec>)
1a00141c:	681b      	ldr	r3, [r3, #0]
1a00141e:	2b00      	cmp	r3, #0
1a001420:	d164      	bne.n	1a0014ec <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001422:	4b39      	ldr	r3, [pc, #228]	; (1a001508 <xTaskIncrementTick+0xf0>)
1a001424:	681d      	ldr	r5, [r3, #0]
1a001426:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001428:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00142a:	b9c5      	cbnz	r5, 1a00145e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00142c:	4b37      	ldr	r3, [pc, #220]	; (1a00150c <xTaskIncrementTick+0xf4>)
1a00142e:	681b      	ldr	r3, [r3, #0]
1a001430:	681b      	ldr	r3, [r3, #0]
1a001432:	b143      	cbz	r3, 1a001446 <xTaskIncrementTick+0x2e>
1a001434:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001438:	f383 8811 	msr	BASEPRI, r3
1a00143c:	f3bf 8f6f 	isb	sy
1a001440:	f3bf 8f4f 	dsb	sy
1a001444:	e7fe      	b.n	1a001444 <xTaskIncrementTick+0x2c>
1a001446:	4a31      	ldr	r2, [pc, #196]	; (1a00150c <xTaskIncrementTick+0xf4>)
1a001448:	6811      	ldr	r1, [r2, #0]
1a00144a:	4b31      	ldr	r3, [pc, #196]	; (1a001510 <xTaskIncrementTick+0xf8>)
1a00144c:	6818      	ldr	r0, [r3, #0]
1a00144e:	6010      	str	r0, [r2, #0]
1a001450:	6019      	str	r1, [r3, #0]
1a001452:	4a30      	ldr	r2, [pc, #192]	; (1a001514 <xTaskIncrementTick+0xfc>)
1a001454:	6813      	ldr	r3, [r2, #0]
1a001456:	3301      	adds	r3, #1
1a001458:	6013      	str	r3, [r2, #0]
1a00145a:	f7ff fd8d 	bl	1a000f78 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00145e:	4b2e      	ldr	r3, [pc, #184]	; (1a001518 <xTaskIncrementTick+0x100>)
1a001460:	681b      	ldr	r3, [r3, #0]
1a001462:	42ab      	cmp	r3, r5
1a001464:	d938      	bls.n	1a0014d8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001466:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001468:	4b2c      	ldr	r3, [pc, #176]	; (1a00151c <xTaskIncrementTick+0x104>)
1a00146a:	681b      	ldr	r3, [r3, #0]
1a00146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00146e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001472:	009a      	lsls	r2, r3, #2
1a001474:	4b2a      	ldr	r3, [pc, #168]	; (1a001520 <xTaskIncrementTick+0x108>)
1a001476:	589b      	ldr	r3, [r3, r2]
1a001478:	2b01      	cmp	r3, #1
1a00147a:	d93c      	bls.n	1a0014f6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a00147c:	2401      	movs	r4, #1
1a00147e:	e03a      	b.n	1a0014f6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001480:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001482:	4b22      	ldr	r3, [pc, #136]	; (1a00150c <xTaskIncrementTick+0xf4>)
1a001484:	681b      	ldr	r3, [r3, #0]
1a001486:	681b      	ldr	r3, [r3, #0]
1a001488:	b343      	cbz	r3, 1a0014dc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00148a:	4b20      	ldr	r3, [pc, #128]	; (1a00150c <xTaskIncrementTick+0xf4>)
1a00148c:	681b      	ldr	r3, [r3, #0]
1a00148e:	68db      	ldr	r3, [r3, #12]
1a001490:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001492:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001494:	429d      	cmp	r5, r3
1a001496:	d326      	bcc.n	1a0014e6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001498:	1d37      	adds	r7, r6, #4
1a00149a:	4638      	mov	r0, r7
1a00149c:	f7ff fd3d 	bl	1a000f1a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0014a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0014a2:	b11b      	cbz	r3, 1a0014ac <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0014a4:	f106 0018 	add.w	r0, r6, #24
1a0014a8:	f7ff fd37 	bl	1a000f1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0014ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0014ae:	2201      	movs	r2, #1
1a0014b0:	409a      	lsls	r2, r3
1a0014b2:	491c      	ldr	r1, [pc, #112]	; (1a001524 <xTaskIncrementTick+0x10c>)
1a0014b4:	6808      	ldr	r0, [r1, #0]
1a0014b6:	4302      	orrs	r2, r0
1a0014b8:	600a      	str	r2, [r1, #0]
1a0014ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014be:	009a      	lsls	r2, r3, #2
1a0014c0:	4639      	mov	r1, r7
1a0014c2:	4817      	ldr	r0, [pc, #92]	; (1a001520 <xTaskIncrementTick+0x108>)
1a0014c4:	4410      	add	r0, r2
1a0014c6:	f7ff fd02 	bl	1a000ece <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0014ca:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0014cc:	4b13      	ldr	r3, [pc, #76]	; (1a00151c <xTaskIncrementTick+0x104>)
1a0014ce:	681b      	ldr	r3, [r3, #0]
1a0014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014d2:	429a      	cmp	r2, r3
1a0014d4:	d2d4      	bcs.n	1a001480 <xTaskIncrementTick+0x68>
1a0014d6:	e7d4      	b.n	1a001482 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0014d8:	2400      	movs	r4, #0
1a0014da:	e7d2      	b.n	1a001482 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014dc:	4b0e      	ldr	r3, [pc, #56]	; (1a001518 <xTaskIncrementTick+0x100>)
1a0014de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014e2:	601a      	str	r2, [r3, #0]
					break;
1a0014e4:	e7c0      	b.n	1a001468 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0014e6:	4a0c      	ldr	r2, [pc, #48]	; (1a001518 <xTaskIncrementTick+0x100>)
1a0014e8:	6013      	str	r3, [r2, #0]
						break;
1a0014ea:	e7bd      	b.n	1a001468 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0014ec:	4a0e      	ldr	r2, [pc, #56]	; (1a001528 <xTaskIncrementTick+0x110>)
1a0014ee:	6813      	ldr	r3, [r2, #0]
1a0014f0:	3301      	adds	r3, #1
1a0014f2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0014f4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0014f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00152c <xTaskIncrementTick+0x114>)
1a0014f8:	681b      	ldr	r3, [r3, #0]
1a0014fa:	b103      	cbz	r3, 1a0014fe <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0014fc:	2401      	movs	r4, #1
}
1a0014fe:	4620      	mov	r0, r4
1a001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001502:	bf00      	nop
1a001504:	10002900 	.word	0x10002900
1a001508:	1000297c 	.word	0x1000297c
1a00150c:	10002860 	.word	0x10002860
1a001510:	10002864 	.word	0x10002864
1a001514:	10002938 	.word	0x10002938
1a001518:	10002934 	.word	0x10002934
1a00151c:	1000285c 	.word	0x1000285c
1a001520:	10002868 	.word	0x10002868
1a001524:	10002908 	.word	0x10002908
1a001528:	100028fc 	.word	0x100028fc
1a00152c:	10002980 	.word	0x10002980

1a001530 <xTaskResumeAll>:
{
1a001530:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001532:	4b33      	ldr	r3, [pc, #204]	; (1a001600 <xTaskResumeAll+0xd0>)
1a001534:	681b      	ldr	r3, [r3, #0]
1a001536:	b943      	cbnz	r3, 1a00154a <xTaskResumeAll+0x1a>
1a001538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00153c:	f383 8811 	msr	BASEPRI, r3
1a001540:	f3bf 8f6f 	isb	sy
1a001544:	f3bf 8f4f 	dsb	sy
1a001548:	e7fe      	b.n	1a001548 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00154a:	f000 fd43 	bl	1a001fd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00154e:	4b2c      	ldr	r3, [pc, #176]	; (1a001600 <xTaskResumeAll+0xd0>)
1a001550:	681a      	ldr	r2, [r3, #0]
1a001552:	3a01      	subs	r2, #1
1a001554:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001556:	681b      	ldr	r3, [r3, #0]
1a001558:	2b00      	cmp	r3, #0
1a00155a:	d14d      	bne.n	1a0015f8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00155c:	4b29      	ldr	r3, [pc, #164]	; (1a001604 <xTaskResumeAll+0xd4>)
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	b923      	cbnz	r3, 1a00156c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001562:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001564:	f000 fd58 	bl	1a002018 <vPortExitCritical>
}
1a001568:	4620      	mov	r0, r4
1a00156a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a00156c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00156e:	4b26      	ldr	r3, [pc, #152]	; (1a001608 <xTaskResumeAll+0xd8>)
1a001570:	681b      	ldr	r3, [r3, #0]
1a001572:	b31b      	cbz	r3, 1a0015bc <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001574:	4b24      	ldr	r3, [pc, #144]	; (1a001608 <xTaskResumeAll+0xd8>)
1a001576:	68db      	ldr	r3, [r3, #12]
1a001578:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00157a:	f104 0018 	add.w	r0, r4, #24
1a00157e:	f7ff fccc 	bl	1a000f1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001582:	1d25      	adds	r5, r4, #4
1a001584:	4628      	mov	r0, r5
1a001586:	f7ff fcc8 	bl	1a000f1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00158a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00158c:	2201      	movs	r2, #1
1a00158e:	409a      	lsls	r2, r3
1a001590:	491e      	ldr	r1, [pc, #120]	; (1a00160c <xTaskResumeAll+0xdc>)
1a001592:	6808      	ldr	r0, [r1, #0]
1a001594:	4302      	orrs	r2, r0
1a001596:	600a      	str	r2, [r1, #0]
1a001598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00159c:	009a      	lsls	r2, r3, #2
1a00159e:	4629      	mov	r1, r5
1a0015a0:	481b      	ldr	r0, [pc, #108]	; (1a001610 <xTaskResumeAll+0xe0>)
1a0015a2:	4410      	add	r0, r2
1a0015a4:	f7ff fc93 	bl	1a000ece <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0015a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015aa:	4b1a      	ldr	r3, [pc, #104]	; (1a001614 <xTaskResumeAll+0xe4>)
1a0015ac:	681b      	ldr	r3, [r3, #0]
1a0015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0015b0:	429a      	cmp	r2, r3
1a0015b2:	d3dc      	bcc.n	1a00156e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0015b4:	4b18      	ldr	r3, [pc, #96]	; (1a001618 <xTaskResumeAll+0xe8>)
1a0015b6:	2201      	movs	r2, #1
1a0015b8:	601a      	str	r2, [r3, #0]
1a0015ba:	e7d8      	b.n	1a00156e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0015bc:	b10c      	cbz	r4, 1a0015c2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0015be:	f7ff fcdb 	bl	1a000f78 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0015c2:	4b16      	ldr	r3, [pc, #88]	; (1a00161c <xTaskResumeAll+0xec>)
1a0015c4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0015c6:	b154      	cbz	r4, 1a0015de <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0015c8:	f7ff ff26 	bl	1a001418 <xTaskIncrementTick>
1a0015cc:	b110      	cbz	r0, 1a0015d4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0015ce:	4b12      	ldr	r3, [pc, #72]	; (1a001618 <xTaskResumeAll+0xe8>)
1a0015d0:	2201      	movs	r2, #1
1a0015d2:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0015d4:	3c01      	subs	r4, #1
1a0015d6:	d1f7      	bne.n	1a0015c8 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0015d8:	4b10      	ldr	r3, [pc, #64]	; (1a00161c <xTaskResumeAll+0xec>)
1a0015da:	2200      	movs	r2, #0
1a0015dc:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0015de:	4b0e      	ldr	r3, [pc, #56]	; (1a001618 <xTaskResumeAll+0xe8>)
1a0015e0:	681b      	ldr	r3, [r3, #0]
1a0015e2:	b15b      	cbz	r3, 1a0015fc <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0015e4:	4b0e      	ldr	r3, [pc, #56]	; (1a001620 <xTaskResumeAll+0xf0>)
1a0015e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015ea:	601a      	str	r2, [r3, #0]
1a0015ec:	f3bf 8f4f 	dsb	sy
1a0015f0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0015f4:	2401      	movs	r4, #1
1a0015f6:	e7b5      	b.n	1a001564 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0015f8:	2400      	movs	r4, #0
1a0015fa:	e7b3      	b.n	1a001564 <xTaskResumeAll+0x34>
1a0015fc:	2400      	movs	r4, #0
1a0015fe:	e7b1      	b.n	1a001564 <xTaskResumeAll+0x34>
1a001600:	10002900 	.word	0x10002900
1a001604:	100028f4 	.word	0x100028f4
1a001608:	1000293c 	.word	0x1000293c
1a00160c:	10002908 	.word	0x10002908
1a001610:	10002868 	.word	0x10002868
1a001614:	1000285c 	.word	0x1000285c
1a001618:	10002980 	.word	0x10002980
1a00161c:	100028fc 	.word	0x100028fc
1a001620:	e000ed04 	.word	0xe000ed04

1a001624 <vTaskDelayUntil>:
	{
1a001624:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001626:	b150      	cbz	r0, 1a00163e <vTaskDelayUntil+0x1a>
1a001628:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00162a:	b989      	cbnz	r1, 1a001650 <vTaskDelayUntil+0x2c>
1a00162c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001630:	f383 8811 	msr	BASEPRI, r3
1a001634:	f3bf 8f6f 	isb	sy
1a001638:	f3bf 8f4f 	dsb	sy
1a00163c:	e7fe      	b.n	1a00163c <vTaskDelayUntil+0x18>
1a00163e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001642:	f383 8811 	msr	BASEPRI, r3
1a001646:	f3bf 8f6f 	isb	sy
1a00164a:	f3bf 8f4f 	dsb	sy
1a00164e:	e7fe      	b.n	1a00164e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001650:	4b1a      	ldr	r3, [pc, #104]	; (1a0016bc <vTaskDelayUntil+0x98>)
1a001652:	681b      	ldr	r3, [r3, #0]
1a001654:	b143      	cbz	r3, 1a001668 <vTaskDelayUntil+0x44>
1a001656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00165a:	f383 8811 	msr	BASEPRI, r3
1a00165e:	f3bf 8f6f 	isb	sy
1a001662:	f3bf 8f4f 	dsb	sy
1a001666:	e7fe      	b.n	1a001666 <vTaskDelayUntil+0x42>
1a001668:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a00166a:	f7ff fec7 	bl	1a0013fc <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00166e:	4b14      	ldr	r3, [pc, #80]	; (1a0016c0 <vTaskDelayUntil+0x9c>)
1a001670:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001672:	682a      	ldr	r2, [r5, #0]
1a001674:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001676:	4282      	cmp	r2, r0
1a001678:	d918      	bls.n	1a0016ac <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00167a:	42a2      	cmp	r2, r4
1a00167c:	d80c      	bhi.n	1a001698 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00167e:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001680:	f7ff ff56 	bl	1a001530 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001684:	b938      	cbnz	r0, 1a001696 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001686:	4b0f      	ldr	r3, [pc, #60]	; (1a0016c4 <vTaskDelayUntil+0xa0>)
1a001688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00168c:	601a      	str	r2, [r3, #0]
1a00168e:	f3bf 8f4f 	dsb	sy
1a001692:	f3bf 8f6f 	isb	sy
	}
1a001696:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001698:	42a0      	cmp	r0, r4
1a00169a:	d301      	bcc.n	1a0016a0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a00169c:	602c      	str	r4, [r5, #0]
1a00169e:	e7ef      	b.n	1a001680 <vTaskDelayUntil+0x5c>
1a0016a0:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0016a2:	2100      	movs	r1, #0
1a0016a4:	1a20      	subs	r0, r4, r0
1a0016a6:	f7ff fda7 	bl	1a0011f8 <prvAddCurrentTaskToDelayedList>
1a0016aa:	e7e9      	b.n	1a001680 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0016ac:	42a2      	cmp	r2, r4
1a0016ae:	d801      	bhi.n	1a0016b4 <vTaskDelayUntil+0x90>
1a0016b0:	42a0      	cmp	r0, r4
1a0016b2:	d201      	bcs.n	1a0016b8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0016b4:	602c      	str	r4, [r5, #0]
1a0016b6:	e7f4      	b.n	1a0016a2 <vTaskDelayUntil+0x7e>
1a0016b8:	602c      	str	r4, [r5, #0]
1a0016ba:	e7e1      	b.n	1a001680 <vTaskDelayUntil+0x5c>
1a0016bc:	10002900 	.word	0x10002900
1a0016c0:	1000297c 	.word	0x1000297c
1a0016c4:	e000ed04 	.word	0xe000ed04

1a0016c8 <vTaskDelay>:
	{
1a0016c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0016ca:	b1a8      	cbz	r0, 1a0016f8 <vTaskDelay+0x30>
1a0016cc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0016ce:	4b0f      	ldr	r3, [pc, #60]	; (1a00170c <vTaskDelay+0x44>)
1a0016d0:	681b      	ldr	r3, [r3, #0]
1a0016d2:	b143      	cbz	r3, 1a0016e6 <vTaskDelay+0x1e>
1a0016d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016d8:	f383 8811 	msr	BASEPRI, r3
1a0016dc:	f3bf 8f6f 	isb	sy
1a0016e0:	f3bf 8f4f 	dsb	sy
1a0016e4:	e7fe      	b.n	1a0016e4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0016e6:	f7ff fe89 	bl	1a0013fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0016ea:	2100      	movs	r1, #0
1a0016ec:	4620      	mov	r0, r4
1a0016ee:	f7ff fd83 	bl	1a0011f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0016f2:	f7ff ff1d 	bl	1a001530 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0016f6:	b938      	cbnz	r0, 1a001708 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0016f8:	4b05      	ldr	r3, [pc, #20]	; (1a001710 <vTaskDelay+0x48>)
1a0016fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016fe:	601a      	str	r2, [r3, #0]
1a001700:	f3bf 8f4f 	dsb	sy
1a001704:	f3bf 8f6f 	isb	sy
	}
1a001708:	bd10      	pop	{r4, pc}
1a00170a:	bf00      	nop
1a00170c:	10002900 	.word	0x10002900
1a001710:	e000ed04 	.word	0xe000ed04

1a001714 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001714:	4b2c      	ldr	r3, [pc, #176]	; (1a0017c8 <vTaskSwitchContext+0xb4>)
1a001716:	681b      	ldr	r3, [r3, #0]
1a001718:	b11b      	cbz	r3, 1a001722 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00171a:	4b2c      	ldr	r3, [pc, #176]	; (1a0017cc <vTaskSwitchContext+0xb8>)
1a00171c:	2201      	movs	r2, #1
1a00171e:	601a      	str	r2, [r3, #0]
1a001720:	4770      	bx	lr
{
1a001722:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001724:	4b29      	ldr	r3, [pc, #164]	; (1a0017cc <vTaskSwitchContext+0xb8>)
1a001726:	2200      	movs	r2, #0
1a001728:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00172a:	4b29      	ldr	r3, [pc, #164]	; (1a0017d0 <vTaskSwitchContext+0xbc>)
1a00172c:	681b      	ldr	r3, [r3, #0]
1a00172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001730:	681a      	ldr	r2, [r3, #0]
1a001732:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001736:	d103      	bne.n	1a001740 <vTaskSwitchContext+0x2c>
1a001738:	685a      	ldr	r2, [r3, #4]
1a00173a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00173e:	d01b      	beq.n	1a001778 <vTaskSwitchContext+0x64>
1a001740:	4b23      	ldr	r3, [pc, #140]	; (1a0017d0 <vTaskSwitchContext+0xbc>)
1a001742:	6818      	ldr	r0, [r3, #0]
1a001744:	6819      	ldr	r1, [r3, #0]
1a001746:	3134      	adds	r1, #52	; 0x34
1a001748:	f7ff fc14 	bl	1a000f74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00174c:	4b21      	ldr	r3, [pc, #132]	; (1a0017d4 <vTaskSwitchContext+0xc0>)
1a00174e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001750:	fab3 f383 	clz	r3, r3
1a001754:	b2db      	uxtb	r3, r3
1a001756:	f1c3 031f 	rsb	r3, r3, #31
1a00175a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00175e:	008a      	lsls	r2, r1, #2
1a001760:	491d      	ldr	r1, [pc, #116]	; (1a0017d8 <vTaskSwitchContext+0xc4>)
1a001762:	588a      	ldr	r2, [r1, r2]
1a001764:	b98a      	cbnz	r2, 1a00178a <vTaskSwitchContext+0x76>
	__asm volatile
1a001766:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00176a:	f383 8811 	msr	BASEPRI, r3
1a00176e:	f3bf 8f6f 	isb	sy
1a001772:	f3bf 8f4f 	dsb	sy
1a001776:	e7fe      	b.n	1a001776 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001778:	689a      	ldr	r2, [r3, #8]
1a00177a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00177e:	d1df      	bne.n	1a001740 <vTaskSwitchContext+0x2c>
1a001780:	68db      	ldr	r3, [r3, #12]
1a001782:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001786:	d1db      	bne.n	1a001740 <vTaskSwitchContext+0x2c>
1a001788:	e7e0      	b.n	1a00174c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00178a:	4813      	ldr	r0, [pc, #76]	; (1a0017d8 <vTaskSwitchContext+0xc4>)
1a00178c:	009a      	lsls	r2, r3, #2
1a00178e:	18d4      	adds	r4, r2, r3
1a001790:	00a1      	lsls	r1, r4, #2
1a001792:	4401      	add	r1, r0
1a001794:	684c      	ldr	r4, [r1, #4]
1a001796:	6864      	ldr	r4, [r4, #4]
1a001798:	604c      	str	r4, [r1, #4]
1a00179a:	441a      	add	r2, r3
1a00179c:	0091      	lsls	r1, r2, #2
1a00179e:	3108      	adds	r1, #8
1a0017a0:	4408      	add	r0, r1
1a0017a2:	4284      	cmp	r4, r0
1a0017a4:	d009      	beq.n	1a0017ba <vTaskSwitchContext+0xa6>
1a0017a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017aa:	009a      	lsls	r2, r3, #2
1a0017ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0017d8 <vTaskSwitchContext+0xc4>)
1a0017ae:	4413      	add	r3, r2
1a0017b0:	685b      	ldr	r3, [r3, #4]
1a0017b2:	68da      	ldr	r2, [r3, #12]
1a0017b4:	4b06      	ldr	r3, [pc, #24]	; (1a0017d0 <vTaskSwitchContext+0xbc>)
1a0017b6:	601a      	str	r2, [r3, #0]
}
1a0017b8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0017ba:	6861      	ldr	r1, [r4, #4]
1a0017bc:	4806      	ldr	r0, [pc, #24]	; (1a0017d8 <vTaskSwitchContext+0xc4>)
1a0017be:	2214      	movs	r2, #20
1a0017c0:	fb02 0203 	mla	r2, r2, r3, r0
1a0017c4:	6051      	str	r1, [r2, #4]
1a0017c6:	e7ee      	b.n	1a0017a6 <vTaskSwitchContext+0x92>
1a0017c8:	10002900 	.word	0x10002900
1a0017cc:	10002980 	.word	0x10002980
1a0017d0:	1000285c 	.word	0x1000285c
1a0017d4:	10002908 	.word	0x10002908
1a0017d8:	10002868 	.word	0x10002868

1a0017dc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017dc:	b940      	cbnz	r0, 1a0017f0 <vTaskPlaceOnEventList+0x14>
1a0017de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e2:	f383 8811 	msr	BASEPRI, r3
1a0017e6:	f3bf 8f6f 	isb	sy
1a0017ea:	f3bf 8f4f 	dsb	sy
1a0017ee:	e7fe      	b.n	1a0017ee <vTaskPlaceOnEventList+0x12>
{
1a0017f0:	b510      	push	{r4, lr}
1a0017f2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017f4:	4b04      	ldr	r3, [pc, #16]	; (1a001808 <vTaskPlaceOnEventList+0x2c>)
1a0017f6:	6819      	ldr	r1, [r3, #0]
1a0017f8:	3118      	adds	r1, #24
1a0017fa:	f7ff fb74 	bl	1a000ee6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0017fe:	2101      	movs	r1, #1
1a001800:	4620      	mov	r0, r4
1a001802:	f7ff fcf9 	bl	1a0011f8 <prvAddCurrentTaskToDelayedList>
}
1a001806:	bd10      	pop	{r4, pc}
1a001808:	1000285c 	.word	0x1000285c

1a00180c <vTaskPlaceOnEventListRestricted>:
	{
1a00180c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00180e:	b940      	cbnz	r0, 1a001822 <vTaskPlaceOnEventListRestricted+0x16>
1a001810:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001814:	f383 8811 	msr	BASEPRI, r3
1a001818:	f3bf 8f6f 	isb	sy
1a00181c:	f3bf 8f4f 	dsb	sy
1a001820:	e7fe      	b.n	1a001820 <vTaskPlaceOnEventListRestricted+0x14>
1a001822:	460c      	mov	r4, r1
1a001824:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001826:	4a06      	ldr	r2, [pc, #24]	; (1a001840 <vTaskPlaceOnEventListRestricted+0x34>)
1a001828:	6811      	ldr	r1, [r2, #0]
1a00182a:	3118      	adds	r1, #24
1a00182c:	f7ff fb4f 	bl	1a000ece <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001830:	b10d      	cbz	r5, 1a001836 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001832:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001836:	4629      	mov	r1, r5
1a001838:	4620      	mov	r0, r4
1a00183a:	f7ff fcdd 	bl	1a0011f8 <prvAddCurrentTaskToDelayedList>
	}
1a00183e:	bd38      	pop	{r3, r4, r5, pc}
1a001840:	1000285c 	.word	0x1000285c

1a001844 <xTaskRemoveFromEventList>:
{
1a001844:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001846:	68c3      	ldr	r3, [r0, #12]
1a001848:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00184a:	b944      	cbnz	r4, 1a00185e <xTaskRemoveFromEventList+0x1a>
1a00184c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001850:	f383 8811 	msr	BASEPRI, r3
1a001854:	f3bf 8f6f 	isb	sy
1a001858:	f3bf 8f4f 	dsb	sy
1a00185c:	e7fe      	b.n	1a00185c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00185e:	f104 0518 	add.w	r5, r4, #24
1a001862:	4628      	mov	r0, r5
1a001864:	f7ff fb59 	bl	1a000f1a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001868:	4b13      	ldr	r3, [pc, #76]	; (1a0018b8 <xTaskRemoveFromEventList+0x74>)
1a00186a:	681b      	ldr	r3, [r3, #0]
1a00186c:	b9e3      	cbnz	r3, 1a0018a8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a00186e:	1d25      	adds	r5, r4, #4
1a001870:	4628      	mov	r0, r5
1a001872:	f7ff fb52 	bl	1a000f1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001876:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001878:	2201      	movs	r2, #1
1a00187a:	409a      	lsls	r2, r3
1a00187c:	490f      	ldr	r1, [pc, #60]	; (1a0018bc <xTaskRemoveFromEventList+0x78>)
1a00187e:	6808      	ldr	r0, [r1, #0]
1a001880:	4302      	orrs	r2, r0
1a001882:	600a      	str	r2, [r1, #0]
1a001884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001888:	009a      	lsls	r2, r3, #2
1a00188a:	4629      	mov	r1, r5
1a00188c:	480c      	ldr	r0, [pc, #48]	; (1a0018c0 <xTaskRemoveFromEventList+0x7c>)
1a00188e:	4410      	add	r0, r2
1a001890:	f7ff fb1d 	bl	1a000ece <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001896:	4b0b      	ldr	r3, [pc, #44]	; (1a0018c4 <xTaskRemoveFromEventList+0x80>)
1a001898:	681b      	ldr	r3, [r3, #0]
1a00189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00189c:	429a      	cmp	r2, r3
1a00189e:	d908      	bls.n	1a0018b2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0018a0:	2001      	movs	r0, #1
1a0018a2:	4b09      	ldr	r3, [pc, #36]	; (1a0018c8 <xTaskRemoveFromEventList+0x84>)
1a0018a4:	6018      	str	r0, [r3, #0]
}
1a0018a6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0018a8:	4629      	mov	r1, r5
1a0018aa:	4808      	ldr	r0, [pc, #32]	; (1a0018cc <xTaskRemoveFromEventList+0x88>)
1a0018ac:	f7ff fb0f 	bl	1a000ece <vListInsertEnd>
1a0018b0:	e7f0      	b.n	1a001894 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0018b2:	2000      	movs	r0, #0
	return xReturn;
1a0018b4:	e7f7      	b.n	1a0018a6 <xTaskRemoveFromEventList+0x62>
1a0018b6:	bf00      	nop
1a0018b8:	10002900 	.word	0x10002900
1a0018bc:	10002908 	.word	0x10002908
1a0018c0:	10002868 	.word	0x10002868
1a0018c4:	1000285c 	.word	0x1000285c
1a0018c8:	10002980 	.word	0x10002980
1a0018cc:	1000293c 	.word	0x1000293c

1a0018d0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0018d0:	4b03      	ldr	r3, [pc, #12]	; (1a0018e0 <vTaskInternalSetTimeOutState+0x10>)
1a0018d2:	681b      	ldr	r3, [r3, #0]
1a0018d4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0018d6:	4b03      	ldr	r3, [pc, #12]	; (1a0018e4 <vTaskInternalSetTimeOutState+0x14>)
1a0018d8:	681b      	ldr	r3, [r3, #0]
1a0018da:	6043      	str	r3, [r0, #4]
}
1a0018dc:	4770      	bx	lr
1a0018de:	bf00      	nop
1a0018e0:	10002938 	.word	0x10002938
1a0018e4:	1000297c 	.word	0x1000297c

1a0018e8 <xTaskCheckForTimeOut>:
{
1a0018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018ea:	b150      	cbz	r0, 1a001902 <xTaskCheckForTimeOut+0x1a>
1a0018ec:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0018ee:	b989      	cbnz	r1, 1a001914 <xTaskCheckForTimeOut+0x2c>
1a0018f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018f4:	f383 8811 	msr	BASEPRI, r3
1a0018f8:	f3bf 8f6f 	isb	sy
1a0018fc:	f3bf 8f4f 	dsb	sy
1a001900:	e7fe      	b.n	1a001900 <xTaskCheckForTimeOut+0x18>
1a001902:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001906:	f383 8811 	msr	BASEPRI, r3
1a00190a:	f3bf 8f6f 	isb	sy
1a00190e:	f3bf 8f4f 	dsb	sy
1a001912:	e7fe      	b.n	1a001912 <xTaskCheckForTimeOut+0x2a>
1a001914:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001916:	f000 fb5d 	bl	1a001fd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00191a:	4b11      	ldr	r3, [pc, #68]	; (1a001960 <xTaskCheckForTimeOut+0x78>)
1a00191c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00191e:	6868      	ldr	r0, [r5, #4]
1a001920:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001922:	6823      	ldr	r3, [r4, #0]
1a001924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001928:	d016      	beq.n	1a001958 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00192a:	682f      	ldr	r7, [r5, #0]
1a00192c:	4e0d      	ldr	r6, [pc, #52]	; (1a001964 <xTaskCheckForTimeOut+0x7c>)
1a00192e:	6836      	ldr	r6, [r6, #0]
1a001930:	42b7      	cmp	r7, r6
1a001932:	d001      	beq.n	1a001938 <xTaskCheckForTimeOut+0x50>
1a001934:	4288      	cmp	r0, r1
1a001936:	d911      	bls.n	1a00195c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001938:	4293      	cmp	r3, r2
1a00193a:	d803      	bhi.n	1a001944 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a00193c:	2300      	movs	r3, #0
1a00193e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001940:	2401      	movs	r4, #1
1a001942:	e005      	b.n	1a001950 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001944:	1a9b      	subs	r3, r3, r2
1a001946:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001948:	4628      	mov	r0, r5
1a00194a:	f7ff ffc1 	bl	1a0018d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00194e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001950:	f000 fb62 	bl	1a002018 <vPortExitCritical>
}
1a001954:	4620      	mov	r0, r4
1a001956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001958:	2400      	movs	r4, #0
1a00195a:	e7f9      	b.n	1a001950 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a00195c:	2401      	movs	r4, #1
1a00195e:	e7f7      	b.n	1a001950 <xTaskCheckForTimeOut+0x68>
1a001960:	1000297c 	.word	0x1000297c
1a001964:	10002938 	.word	0x10002938

1a001968 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001968:	4b01      	ldr	r3, [pc, #4]	; (1a001970 <vTaskMissedYield+0x8>)
1a00196a:	2201      	movs	r2, #1
1a00196c:	601a      	str	r2, [r3, #0]
}
1a00196e:	4770      	bx	lr
1a001970:	10002980 	.word	0x10002980

1a001974 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001974:	4b05      	ldr	r3, [pc, #20]	; (1a00198c <xTaskGetSchedulerState+0x18>)
1a001976:	681b      	ldr	r3, [r3, #0]
1a001978:	b133      	cbz	r3, 1a001988 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00197a:	4b05      	ldr	r3, [pc, #20]	; (1a001990 <xTaskGetSchedulerState+0x1c>)
1a00197c:	681b      	ldr	r3, [r3, #0]
1a00197e:	b10b      	cbz	r3, 1a001984 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001980:	2000      	movs	r0, #0
	}
1a001982:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001984:	2002      	movs	r0, #2
1a001986:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001988:	2001      	movs	r0, #1
1a00198a:	4770      	bx	lr
1a00198c:	10002950 	.word	0x10002950
1a001990:	10002900 	.word	0x10002900

1a001994 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001994:	2800      	cmp	r0, #0
1a001996:	d049      	beq.n	1a001a2c <xTaskPriorityDisinherit+0x98>
	{
1a001998:	b538      	push	{r3, r4, r5, lr}
1a00199a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00199c:	4a26      	ldr	r2, [pc, #152]	; (1a001a38 <xTaskPriorityDisinherit+0xa4>)
1a00199e:	6812      	ldr	r2, [r2, #0]
1a0019a0:	4282      	cmp	r2, r0
1a0019a2:	d008      	beq.n	1a0019b6 <xTaskPriorityDisinherit+0x22>
1a0019a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019a8:	f383 8811 	msr	BASEPRI, r3
1a0019ac:	f3bf 8f6f 	isb	sy
1a0019b0:	f3bf 8f4f 	dsb	sy
1a0019b4:	e7fe      	b.n	1a0019b4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0019b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0019b8:	b942      	cbnz	r2, 1a0019cc <xTaskPriorityDisinherit+0x38>
1a0019ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019be:	f383 8811 	msr	BASEPRI, r3
1a0019c2:	f3bf 8f6f 	isb	sy
1a0019c6:	f3bf 8f4f 	dsb	sy
1a0019ca:	e7fe      	b.n	1a0019ca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0019cc:	3a01      	subs	r2, #1
1a0019ce:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0019d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0019d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0019d4:	4288      	cmp	r0, r1
1a0019d6:	d02b      	beq.n	1a001a30 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0019d8:	bb62      	cbnz	r2, 1a001a34 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019da:	1d25      	adds	r5, r4, #4
1a0019dc:	4628      	mov	r0, r5
1a0019de:	f7ff fa9c 	bl	1a000f1a <uxListRemove>
1a0019e2:	b970      	cbnz	r0, 1a001a02 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0019e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019e6:	2314      	movs	r3, #20
1a0019e8:	fb03 f302 	mul.w	r3, r3, r2
1a0019ec:	4913      	ldr	r1, [pc, #76]	; (1a001a3c <xTaskPriorityDisinherit+0xa8>)
1a0019ee:	58cb      	ldr	r3, [r1, r3]
1a0019f0:	b93b      	cbnz	r3, 1a001a02 <xTaskPriorityDisinherit+0x6e>
1a0019f2:	2301      	movs	r3, #1
1a0019f4:	fa03 f202 	lsl.w	r2, r3, r2
1a0019f8:	4911      	ldr	r1, [pc, #68]	; (1a001a40 <xTaskPriorityDisinherit+0xac>)
1a0019fa:	680b      	ldr	r3, [r1, #0]
1a0019fc:	ea23 0302 	bic.w	r3, r3, r2
1a001a00:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001a02:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001a04:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a06:	f1c3 0207 	rsb	r2, r3, #7
1a001a0a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001a0c:	2401      	movs	r4, #1
1a001a0e:	fa04 f203 	lsl.w	r2, r4, r3
1a001a12:	490b      	ldr	r1, [pc, #44]	; (1a001a40 <xTaskPriorityDisinherit+0xac>)
1a001a14:	6808      	ldr	r0, [r1, #0]
1a001a16:	4302      	orrs	r2, r0
1a001a18:	600a      	str	r2, [r1, #0]
1a001a1a:	4629      	mov	r1, r5
1a001a1c:	4a07      	ldr	r2, [pc, #28]	; (1a001a3c <xTaskPriorityDisinherit+0xa8>)
1a001a1e:	2014      	movs	r0, #20
1a001a20:	fb00 2003 	mla	r0, r0, r3, r2
1a001a24:	f7ff fa53 	bl	1a000ece <vListInsertEnd>
					xReturn = pdTRUE;
1a001a28:	4620      	mov	r0, r4
	}
1a001a2a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001a2c:	2000      	movs	r0, #0
	}
1a001a2e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001a30:	2000      	movs	r0, #0
1a001a32:	e7fa      	b.n	1a001a2a <xTaskPriorityDisinherit+0x96>
1a001a34:	2000      	movs	r0, #0
		return xReturn;
1a001a36:	e7f8      	b.n	1a001a2a <xTaskPriorityDisinherit+0x96>
1a001a38:	1000285c 	.word	0x1000285c
1a001a3c:	10002868 	.word	0x10002868
1a001a40:	10002908 	.word	0x10002908

1a001a44 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001a44:	4b06      	ldr	r3, [pc, #24]	; (1a001a60 <prvGetNextExpireTime+0x1c>)
1a001a46:	681a      	ldr	r2, [r3, #0]
1a001a48:	6813      	ldr	r3, [r2, #0]
1a001a4a:	fab3 f383 	clz	r3, r3
1a001a4e:	095b      	lsrs	r3, r3, #5
1a001a50:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001a52:	b913      	cbnz	r3, 1a001a5a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001a54:	68d3      	ldr	r3, [r2, #12]
1a001a56:	6818      	ldr	r0, [r3, #0]
1a001a58:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001a5a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001a5c:	4770      	bx	lr
1a001a5e:	bf00      	nop
1a001a60:	10002984 	.word	0x10002984

1a001a64 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001a64:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001a66:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001a68:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001a6a:	4291      	cmp	r1, r2
1a001a6c:	d80c      	bhi.n	1a001a88 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a6e:	1ad2      	subs	r2, r2, r3
1a001a70:	6983      	ldr	r3, [r0, #24]
1a001a72:	429a      	cmp	r2, r3
1a001a74:	d301      	bcc.n	1a001a7a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001a76:	2001      	movs	r0, #1
1a001a78:	e010      	b.n	1a001a9c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001a7a:	1d01      	adds	r1, r0, #4
1a001a7c:	4b09      	ldr	r3, [pc, #36]	; (1a001aa4 <prvInsertTimerInActiveList+0x40>)
1a001a7e:	6818      	ldr	r0, [r3, #0]
1a001a80:	f7ff fa31 	bl	1a000ee6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a84:	2000      	movs	r0, #0
1a001a86:	e009      	b.n	1a001a9c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001a88:	429a      	cmp	r2, r3
1a001a8a:	d201      	bcs.n	1a001a90 <prvInsertTimerInActiveList+0x2c>
1a001a8c:	4299      	cmp	r1, r3
1a001a8e:	d206      	bcs.n	1a001a9e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001a90:	1d01      	adds	r1, r0, #4
1a001a92:	4b05      	ldr	r3, [pc, #20]	; (1a001aa8 <prvInsertTimerInActiveList+0x44>)
1a001a94:	6818      	ldr	r0, [r3, #0]
1a001a96:	f7ff fa26 	bl	1a000ee6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a9a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001a9c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001a9e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001aa0:	e7fc      	b.n	1a001a9c <prvInsertTimerInActiveList+0x38>
1a001aa2:	bf00      	nop
1a001aa4:	10002988 	.word	0x10002988
1a001aa8:	10002984 	.word	0x10002984

1a001aac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001aac:	b530      	push	{r4, r5, lr}
1a001aae:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001ab0:	f000 fa90 	bl	1a001fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001ab4:	4b11      	ldr	r3, [pc, #68]	; (1a001afc <prvCheckForValidListAndQueue+0x50>)
1a001ab6:	681b      	ldr	r3, [r3, #0]
1a001ab8:	b11b      	cbz	r3, 1a001ac2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001aba:	f000 faad 	bl	1a002018 <vPortExitCritical>
}
1a001abe:	b003      	add	sp, #12
1a001ac0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001ac2:	4d0f      	ldr	r5, [pc, #60]	; (1a001b00 <prvCheckForValidListAndQueue+0x54>)
1a001ac4:	4628      	mov	r0, r5
1a001ac6:	f7ff f9f4 	bl	1a000eb2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001aca:	4c0e      	ldr	r4, [pc, #56]	; (1a001b04 <prvCheckForValidListAndQueue+0x58>)
1a001acc:	4620      	mov	r0, r4
1a001ace:	f7ff f9f0 	bl	1a000eb2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001ad2:	4b0d      	ldr	r3, [pc, #52]	; (1a001b08 <prvCheckForValidListAndQueue+0x5c>)
1a001ad4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001ad6:	4b0d      	ldr	r3, [pc, #52]	; (1a001b0c <prvCheckForValidListAndQueue+0x60>)
1a001ad8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001ada:	2300      	movs	r3, #0
1a001adc:	9300      	str	r3, [sp, #0]
1a001ade:	4b0c      	ldr	r3, [pc, #48]	; (1a001b10 <prvCheckForValidListAndQueue+0x64>)
1a001ae0:	4a0c      	ldr	r2, [pc, #48]	; (1a001b14 <prvCheckForValidListAndQueue+0x68>)
1a001ae2:	2110      	movs	r1, #16
1a001ae4:	200a      	movs	r0, #10
1a001ae6:	f7fe ff8e 	bl	1a000a06 <xQueueGenericCreateStatic>
1a001aea:	4b04      	ldr	r3, [pc, #16]	; (1a001afc <prvCheckForValidListAndQueue+0x50>)
1a001aec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001aee:	2800      	cmp	r0, #0
1a001af0:	d0e3      	beq.n	1a001aba <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001af2:	4909      	ldr	r1, [pc, #36]	; (1a001b18 <prvCheckForValidListAndQueue+0x6c>)
1a001af4:	f7ff f9a0 	bl	1a000e38 <vQueueAddToRegistry>
1a001af8:	e7df      	b.n	1a001aba <prvCheckForValidListAndQueue+0xe>
1a001afa:	bf00      	nop
1a001afc:	10002aa8 	.word	0x10002aa8
1a001b00:	10002a2c 	.word	0x10002a2c
1a001b04:	10002a40 	.word	0x10002a40
1a001b08:	10002984 	.word	0x10002984
1a001b0c:	10002988 	.word	0x10002988
1a001b10:	10002a58 	.word	0x10002a58
1a001b14:	1000298c 	.word	0x1000298c
1a001b18:	1a004a8c 	.word	0x1a004a8c

1a001b1c <prvInitialiseNewTimer>:
{
1a001b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001b20:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001b22:	b941      	cbnz	r1, 1a001b36 <prvInitialiseNewTimer+0x1a>
1a001b24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b28:	f383 8811 	msr	BASEPRI, r3
1a001b2c:	f3bf 8f6f 	isb	sy
1a001b30:	f3bf 8f4f 	dsb	sy
1a001b34:	e7fe      	b.n	1a001b34 <prvInitialiseNewTimer+0x18>
1a001b36:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001b38:	b174      	cbz	r4, 1a001b58 <prvInitialiseNewTimer+0x3c>
1a001b3a:	461d      	mov	r5, r3
1a001b3c:	4616      	mov	r6, r2
1a001b3e:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001b40:	f7ff ffb4 	bl	1a001aac <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001b44:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001b48:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001b4a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001b4c:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001b4e:	9b06      	ldr	r3, [sp, #24]
1a001b50:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001b52:	1d20      	adds	r0, r4, #4
1a001b54:	f7ff f9b8 	bl	1a000ec8 <vListInitialiseItem>
}
1a001b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001b5c <xTimerCreateTimerTask>:
{
1a001b5c:	b510      	push	{r4, lr}
1a001b5e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001b60:	f7ff ffa4 	bl	1a001aac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001b64:	4b12      	ldr	r3, [pc, #72]	; (1a001bb0 <xTimerCreateTimerTask+0x54>)
1a001b66:	681b      	ldr	r3, [r3, #0]
1a001b68:	b1cb      	cbz	r3, 1a001b9e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001b6a:	2400      	movs	r4, #0
1a001b6c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001b6e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001b70:	aa07      	add	r2, sp, #28
1a001b72:	a906      	add	r1, sp, #24
1a001b74:	a805      	add	r0, sp, #20
1a001b76:	f7ff f9f1 	bl	1a000f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001b7a:	9b05      	ldr	r3, [sp, #20]
1a001b7c:	9302      	str	r3, [sp, #8]
1a001b7e:	9b06      	ldr	r3, [sp, #24]
1a001b80:	9301      	str	r3, [sp, #4]
1a001b82:	2304      	movs	r3, #4
1a001b84:	9300      	str	r3, [sp, #0]
1a001b86:	4623      	mov	r3, r4
1a001b88:	9a07      	ldr	r2, [sp, #28]
1a001b8a:	490a      	ldr	r1, [pc, #40]	; (1a001bb4 <xTimerCreateTimerTask+0x58>)
1a001b8c:	480a      	ldr	r0, [pc, #40]	; (1a001bb8 <xTimerCreateTimerTask+0x5c>)
1a001b8e:	f7ff fb7f 	bl	1a001290 <xTaskCreateStatic>
1a001b92:	4b0a      	ldr	r3, [pc, #40]	; (1a001bbc <xTimerCreateTimerTask+0x60>)
1a001b94:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001b96:	b110      	cbz	r0, 1a001b9e <xTimerCreateTimerTask+0x42>
}
1a001b98:	2001      	movs	r0, #1
1a001b9a:	b008      	add	sp, #32
1a001b9c:	bd10      	pop	{r4, pc}
1a001b9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba2:	f383 8811 	msr	BASEPRI, r3
1a001ba6:	f3bf 8f6f 	isb	sy
1a001baa:	f3bf 8f4f 	dsb	sy
1a001bae:	e7fe      	b.n	1a001bae <xTimerCreateTimerTask+0x52>
1a001bb0:	10002aa8 	.word	0x10002aa8
1a001bb4:	1a004a94 	.word	0x1a004a94
1a001bb8:	1a001eed 	.word	0x1a001eed
1a001bbc:	10002aac 	.word	0x10002aac

1a001bc0 <xTimerCreateStatic>:
	{
1a001bc0:	b530      	push	{r4, r5, lr}
1a001bc2:	b085      	sub	sp, #20
1a001bc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001bc6:	2530      	movs	r5, #48	; 0x30
1a001bc8:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001bca:	9d03      	ldr	r5, [sp, #12]
1a001bcc:	2d30      	cmp	r5, #48	; 0x30
1a001bce:	d008      	beq.n	1a001be2 <xTimerCreateStatic+0x22>
1a001bd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd4:	f383 8811 	msr	BASEPRI, r3
1a001bd8:	f3bf 8f6f 	isb	sy
1a001bdc:	f3bf 8f4f 	dsb	sy
1a001be0:	e7fe      	b.n	1a001be0 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a001be2:	b944      	cbnz	r4, 1a001bf6 <xTimerCreateStatic+0x36>
1a001be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be8:	f383 8811 	msr	BASEPRI, r3
1a001bec:	f3bf 8f6f 	isb	sy
1a001bf0:	f3bf 8f4f 	dsb	sy
1a001bf4:	e7fe      	b.n	1a001bf4 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001bf6:	9401      	str	r4, [sp, #4]
1a001bf8:	9d08      	ldr	r5, [sp, #32]
1a001bfa:	9500      	str	r5, [sp, #0]
1a001bfc:	f7ff ff8e 	bl	1a001b1c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001c00:	2301      	movs	r3, #1
1a001c02:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a001c06:	4620      	mov	r0, r4
1a001c08:	b005      	add	sp, #20
1a001c0a:	bd30      	pop	{r4, r5, pc}

1a001c0c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001c0c:	b1c8      	cbz	r0, 1a001c42 <xTimerGenericCommand+0x36>
{
1a001c0e:	b530      	push	{r4, r5, lr}
1a001c10:	b085      	sub	sp, #20
1a001c12:	4615      	mov	r5, r2
1a001c14:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001c16:	4a17      	ldr	r2, [pc, #92]	; (1a001c74 <xTimerGenericCommand+0x68>)
1a001c18:	6810      	ldr	r0, [r2, #0]
1a001c1a:	b340      	cbz	r0, 1a001c6e <xTimerGenericCommand+0x62>
1a001c1c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001c1e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001c20:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001c22:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001c24:	2905      	cmp	r1, #5
1a001c26:	dc1d      	bgt.n	1a001c64 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001c28:	f7ff fea4 	bl	1a001974 <xTaskGetSchedulerState>
1a001c2c:	2802      	cmp	r0, #2
1a001c2e:	d011      	beq.n	1a001c54 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001c30:	2300      	movs	r3, #0
1a001c32:	461a      	mov	r2, r3
1a001c34:	4669      	mov	r1, sp
1a001c36:	480f      	ldr	r0, [pc, #60]	; (1a001c74 <xTimerGenericCommand+0x68>)
1a001c38:	6800      	ldr	r0, [r0, #0]
1a001c3a:	f7fe ff2d 	bl	1a000a98 <xQueueGenericSend>
}
1a001c3e:	b005      	add	sp, #20
1a001c40:	bd30      	pop	{r4, r5, pc}
1a001c42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c46:	f383 8811 	msr	BASEPRI, r3
1a001c4a:	f3bf 8f6f 	isb	sy
1a001c4e:	f3bf 8f4f 	dsb	sy
1a001c52:	e7fe      	b.n	1a001c52 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001c54:	2300      	movs	r3, #0
1a001c56:	9a08      	ldr	r2, [sp, #32]
1a001c58:	4669      	mov	r1, sp
1a001c5a:	4806      	ldr	r0, [pc, #24]	; (1a001c74 <xTimerGenericCommand+0x68>)
1a001c5c:	6800      	ldr	r0, [r0, #0]
1a001c5e:	f7fe ff1b 	bl	1a000a98 <xQueueGenericSend>
1a001c62:	e7ec      	b.n	1a001c3e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001c64:	2300      	movs	r3, #0
1a001c66:	4669      	mov	r1, sp
1a001c68:	f7fe ffd4 	bl	1a000c14 <xQueueGenericSendFromISR>
1a001c6c:	e7e7      	b.n	1a001c3e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001c6e:	2000      	movs	r0, #0
	return xReturn;
1a001c70:	e7e5      	b.n	1a001c3e <xTimerGenericCommand+0x32>
1a001c72:	bf00      	nop
1a001c74:	10002aa8 	.word	0x10002aa8

1a001c78 <prvSwitchTimerLists>:
{
1a001c78:	b570      	push	{r4, r5, r6, lr}
1a001c7a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001c7c:	4b1a      	ldr	r3, [pc, #104]	; (1a001ce8 <prvSwitchTimerLists+0x70>)
1a001c7e:	681b      	ldr	r3, [r3, #0]
1a001c80:	681a      	ldr	r2, [r3, #0]
1a001c82:	b352      	cbz	r2, 1a001cda <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c84:	68db      	ldr	r3, [r3, #12]
1a001c86:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c88:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c8a:	1d25      	adds	r5, r4, #4
1a001c8c:	4628      	mov	r0, r5
1a001c8e:	f7ff f944 	bl	1a000f1a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c94:	4620      	mov	r0, r4
1a001c96:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c98:	69e3      	ldr	r3, [r4, #28]
1a001c9a:	2b01      	cmp	r3, #1
1a001c9c:	d1ee      	bne.n	1a001c7c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001c9e:	69a3      	ldr	r3, [r4, #24]
1a001ca0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001ca2:	429e      	cmp	r6, r3
1a001ca4:	d207      	bcs.n	1a001cb6 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001ca6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001ca8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001caa:	4629      	mov	r1, r5
1a001cac:	4b0e      	ldr	r3, [pc, #56]	; (1a001ce8 <prvSwitchTimerLists+0x70>)
1a001cae:	6818      	ldr	r0, [r3, #0]
1a001cb0:	f7ff f919 	bl	1a000ee6 <vListInsert>
1a001cb4:	e7e2      	b.n	1a001c7c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001cb6:	2100      	movs	r1, #0
1a001cb8:	9100      	str	r1, [sp, #0]
1a001cba:	460b      	mov	r3, r1
1a001cbc:	4632      	mov	r2, r6
1a001cbe:	4620      	mov	r0, r4
1a001cc0:	f7ff ffa4 	bl	1a001c0c <xTimerGenericCommand>
				configASSERT( xResult );
1a001cc4:	2800      	cmp	r0, #0
1a001cc6:	d1d9      	bne.n	1a001c7c <prvSwitchTimerLists+0x4>
1a001cc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ccc:	f383 8811 	msr	BASEPRI, r3
1a001cd0:	f3bf 8f6f 	isb	sy
1a001cd4:	f3bf 8f4f 	dsb	sy
1a001cd8:	e7fe      	b.n	1a001cd8 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001cda:	4a04      	ldr	r2, [pc, #16]	; (1a001cec <prvSwitchTimerLists+0x74>)
1a001cdc:	6810      	ldr	r0, [r2, #0]
1a001cde:	4902      	ldr	r1, [pc, #8]	; (1a001ce8 <prvSwitchTimerLists+0x70>)
1a001ce0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001ce2:	6013      	str	r3, [r2, #0]
}
1a001ce4:	b002      	add	sp, #8
1a001ce6:	bd70      	pop	{r4, r5, r6, pc}
1a001ce8:	10002984 	.word	0x10002984
1a001cec:	10002988 	.word	0x10002988

1a001cf0 <prvSampleTimeNow>:
{
1a001cf0:	b538      	push	{r3, r4, r5, lr}
1a001cf2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001cf4:	f7ff fb8a 	bl	1a00140c <xTaskGetTickCount>
1a001cf8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001cfa:	4b07      	ldr	r3, [pc, #28]	; (1a001d18 <prvSampleTimeNow+0x28>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	4283      	cmp	r3, r0
1a001d00:	d805      	bhi.n	1a001d0e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001d02:	2300      	movs	r3, #0
1a001d04:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001d06:	4b04      	ldr	r3, [pc, #16]	; (1a001d18 <prvSampleTimeNow+0x28>)
1a001d08:	601c      	str	r4, [r3, #0]
}
1a001d0a:	4620      	mov	r0, r4
1a001d0c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001d0e:	f7ff ffb3 	bl	1a001c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001d12:	2301      	movs	r3, #1
1a001d14:	602b      	str	r3, [r5, #0]
1a001d16:	e7f6      	b.n	1a001d06 <prvSampleTimeNow+0x16>
1a001d18:	10002a54 	.word	0x10002a54

1a001d1c <prvProcessExpiredTimer>:
{
1a001d1c:	b570      	push	{r4, r5, r6, lr}
1a001d1e:	b082      	sub	sp, #8
1a001d20:	4605      	mov	r5, r0
1a001d22:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d24:	4b14      	ldr	r3, [pc, #80]	; (1a001d78 <prvProcessExpiredTimer+0x5c>)
1a001d26:	681b      	ldr	r3, [r3, #0]
1a001d28:	68db      	ldr	r3, [r3, #12]
1a001d2a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d2c:	1d20      	adds	r0, r4, #4
1a001d2e:	f7ff f8f4 	bl	1a000f1a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d32:	69e3      	ldr	r3, [r4, #28]
1a001d34:	2b01      	cmp	r3, #1
1a001d36:	d004      	beq.n	1a001d42 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d3a:	4620      	mov	r0, r4
1a001d3c:	4798      	blx	r3
}
1a001d3e:	b002      	add	sp, #8
1a001d40:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001d42:	69a1      	ldr	r1, [r4, #24]
1a001d44:	462b      	mov	r3, r5
1a001d46:	4632      	mov	r2, r6
1a001d48:	4429      	add	r1, r5
1a001d4a:	4620      	mov	r0, r4
1a001d4c:	f7ff fe8a 	bl	1a001a64 <prvInsertTimerInActiveList>
1a001d50:	2800      	cmp	r0, #0
1a001d52:	d0f1      	beq.n	1a001d38 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001d54:	2100      	movs	r1, #0
1a001d56:	9100      	str	r1, [sp, #0]
1a001d58:	460b      	mov	r3, r1
1a001d5a:	462a      	mov	r2, r5
1a001d5c:	4620      	mov	r0, r4
1a001d5e:	f7ff ff55 	bl	1a001c0c <xTimerGenericCommand>
			configASSERT( xResult );
1a001d62:	2800      	cmp	r0, #0
1a001d64:	d1e8      	bne.n	1a001d38 <prvProcessExpiredTimer+0x1c>
1a001d66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d6a:	f383 8811 	msr	BASEPRI, r3
1a001d6e:	f3bf 8f6f 	isb	sy
1a001d72:	f3bf 8f4f 	dsb	sy
1a001d76:	e7fe      	b.n	1a001d76 <prvProcessExpiredTimer+0x5a>
1a001d78:	10002984 	.word	0x10002984

1a001d7c <prvProcessTimerOrBlockTask>:
{
1a001d7c:	b570      	push	{r4, r5, r6, lr}
1a001d7e:	b082      	sub	sp, #8
1a001d80:	4606      	mov	r6, r0
1a001d82:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001d84:	f7ff fb3a 	bl	1a0013fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d88:	a801      	add	r0, sp, #4
1a001d8a:	f7ff ffb1 	bl	1a001cf0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001d8e:	9b01      	ldr	r3, [sp, #4]
1a001d90:	bb1b      	cbnz	r3, 1a001dda <prvProcessTimerOrBlockTask+0x5e>
1a001d92:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001d94:	b90c      	cbnz	r4, 1a001d9a <prvProcessTimerOrBlockTask+0x1e>
1a001d96:	42b0      	cmp	r0, r6
1a001d98:	d218      	bcs.n	1a001dcc <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001d9a:	b12c      	cbz	r4, 1a001da8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001d9c:	4b11      	ldr	r3, [pc, #68]	; (1a001de4 <prvProcessTimerOrBlockTask+0x68>)
1a001d9e:	681b      	ldr	r3, [r3, #0]
1a001da0:	681c      	ldr	r4, [r3, #0]
1a001da2:	fab4 f484 	clz	r4, r4
1a001da6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001da8:	4622      	mov	r2, r4
1a001daa:	1b71      	subs	r1, r6, r5
1a001dac:	4b0e      	ldr	r3, [pc, #56]	; (1a001de8 <prvProcessTimerOrBlockTask+0x6c>)
1a001dae:	6818      	ldr	r0, [r3, #0]
1a001db0:	f7ff f856 	bl	1a000e60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001db4:	f7ff fbbc 	bl	1a001530 <xTaskResumeAll>
1a001db8:	b988      	cbnz	r0, 1a001dde <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001dba:	4b0c      	ldr	r3, [pc, #48]	; (1a001dec <prvProcessTimerOrBlockTask+0x70>)
1a001dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001dc0:	601a      	str	r2, [r3, #0]
1a001dc2:	f3bf 8f4f 	dsb	sy
1a001dc6:	f3bf 8f6f 	isb	sy
1a001dca:	e008      	b.n	1a001dde <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001dcc:	f7ff fbb0 	bl	1a001530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001dd0:	4629      	mov	r1, r5
1a001dd2:	4630      	mov	r0, r6
1a001dd4:	f7ff ffa2 	bl	1a001d1c <prvProcessExpiredTimer>
1a001dd8:	e001      	b.n	1a001dde <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001dda:	f7ff fba9 	bl	1a001530 <xTaskResumeAll>
}
1a001dde:	b002      	add	sp, #8
1a001de0:	bd70      	pop	{r4, r5, r6, pc}
1a001de2:	bf00      	nop
1a001de4:	10002988 	.word	0x10002988
1a001de8:	10002aa8 	.word	0x10002aa8
1a001dec:	e000ed04 	.word	0xe000ed04

1a001df0 <prvProcessReceivedCommands>:
{
1a001df0:	b530      	push	{r4, r5, lr}
1a001df2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001df4:	e002      	b.n	1a001dfc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001df6:	9b04      	ldr	r3, [sp, #16]
1a001df8:	2b00      	cmp	r3, #0
1a001dfa:	da0f      	bge.n	1a001e1c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001dfc:	2200      	movs	r2, #0
1a001dfe:	a904      	add	r1, sp, #16
1a001e00:	4b39      	ldr	r3, [pc, #228]	; (1a001ee8 <prvProcessReceivedCommands+0xf8>)
1a001e02:	6818      	ldr	r0, [r3, #0]
1a001e04:	f7fe ff6c 	bl	1a000ce0 <xQueueReceive>
1a001e08:	2800      	cmp	r0, #0
1a001e0a:	d06a      	beq.n	1a001ee2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001e0c:	9b04      	ldr	r3, [sp, #16]
1a001e0e:	2b00      	cmp	r3, #0
1a001e10:	daf1      	bge.n	1a001df6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001e12:	9907      	ldr	r1, [sp, #28]
1a001e14:	9806      	ldr	r0, [sp, #24]
1a001e16:	9b05      	ldr	r3, [sp, #20]
1a001e18:	4798      	blx	r3
1a001e1a:	e7ec      	b.n	1a001df6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001e1c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001e1e:	6963      	ldr	r3, [r4, #20]
1a001e20:	b113      	cbz	r3, 1a001e28 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001e22:	1d20      	adds	r0, r4, #4
1a001e24:	f7ff f879 	bl	1a000f1a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001e28:	a803      	add	r0, sp, #12
1a001e2a:	f7ff ff61 	bl	1a001cf0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001e2e:	9b04      	ldr	r3, [sp, #16]
1a001e30:	2b09      	cmp	r3, #9
1a001e32:	d8e3      	bhi.n	1a001dfc <prvProcessReceivedCommands+0xc>
1a001e34:	a201      	add	r2, pc, #4	; (adr r2, 1a001e3c <prvProcessReceivedCommands+0x4c>)
1a001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001e3a:	bf00      	nop
1a001e3c:	1a001e65 	.word	0x1a001e65
1a001e40:	1a001e65 	.word	0x1a001e65
1a001e44:	1a001e65 	.word	0x1a001e65
1a001e48:	1a001dfd 	.word	0x1a001dfd
1a001e4c:	1a001ead 	.word	0x1a001ead
1a001e50:	1a001ed3 	.word	0x1a001ed3
1a001e54:	1a001e65 	.word	0x1a001e65
1a001e58:	1a001e65 	.word	0x1a001e65
1a001e5c:	1a001dfd 	.word	0x1a001dfd
1a001e60:	1a001ead 	.word	0x1a001ead
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001e64:	9905      	ldr	r1, [sp, #20]
1a001e66:	69a5      	ldr	r5, [r4, #24]
1a001e68:	460b      	mov	r3, r1
1a001e6a:	4602      	mov	r2, r0
1a001e6c:	4429      	add	r1, r5
1a001e6e:	4620      	mov	r0, r4
1a001e70:	f7ff fdf8 	bl	1a001a64 <prvInsertTimerInActiveList>
1a001e74:	2800      	cmp	r0, #0
1a001e76:	d0c1      	beq.n	1a001dfc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001e7a:	4620      	mov	r0, r4
1a001e7c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001e7e:	69e3      	ldr	r3, [r4, #28]
1a001e80:	2b01      	cmp	r3, #1
1a001e82:	d1bb      	bne.n	1a001dfc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001e84:	69a2      	ldr	r2, [r4, #24]
1a001e86:	2100      	movs	r1, #0
1a001e88:	9100      	str	r1, [sp, #0]
1a001e8a:	460b      	mov	r3, r1
1a001e8c:	9805      	ldr	r0, [sp, #20]
1a001e8e:	4402      	add	r2, r0
1a001e90:	4620      	mov	r0, r4
1a001e92:	f7ff febb 	bl	1a001c0c <xTimerGenericCommand>
							configASSERT( xResult );
1a001e96:	2800      	cmp	r0, #0
1a001e98:	d1b0      	bne.n	1a001dfc <prvProcessReceivedCommands+0xc>
1a001e9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e9e:	f383 8811 	msr	BASEPRI, r3
1a001ea2:	f3bf 8f6f 	isb	sy
1a001ea6:	f3bf 8f4f 	dsb	sy
1a001eaa:	e7fe      	b.n	1a001eaa <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001eac:	9905      	ldr	r1, [sp, #20]
1a001eae:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001eb0:	b131      	cbz	r1, 1a001ec0 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001eb2:	4603      	mov	r3, r0
1a001eb4:	4602      	mov	r2, r0
1a001eb6:	4401      	add	r1, r0
1a001eb8:	4620      	mov	r0, r4
1a001eba:	f7ff fdd3 	bl	1a001a64 <prvInsertTimerInActiveList>
					break;
1a001ebe:	e79d      	b.n	1a001dfc <prvProcessReceivedCommands+0xc>
1a001ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec4:	f383 8811 	msr	BASEPRI, r3
1a001ec8:	f3bf 8f6f 	isb	sy
1a001ecc:	f3bf 8f4f 	dsb	sy
1a001ed0:	e7fe      	b.n	1a001ed0 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001ed2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001ed6:	2b00      	cmp	r3, #0
1a001ed8:	d190      	bne.n	1a001dfc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001eda:	4620      	mov	r0, r4
1a001edc:	f7fe fc94 	bl	1a000808 <vPortFree>
1a001ee0:	e78c      	b.n	1a001dfc <prvProcessReceivedCommands+0xc>
}
1a001ee2:	b009      	add	sp, #36	; 0x24
1a001ee4:	bd30      	pop	{r4, r5, pc}
1a001ee6:	bf00      	nop
1a001ee8:	10002aa8 	.word	0x10002aa8

1a001eec <prvTimerTask>:
{
1a001eec:	b500      	push	{lr}
1a001eee:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001ef0:	a801      	add	r0, sp, #4
1a001ef2:	f7ff fda7 	bl	1a001a44 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001ef6:	9901      	ldr	r1, [sp, #4]
1a001ef8:	f7ff ff40 	bl	1a001d7c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001efc:	f7ff ff78 	bl	1a001df0 <prvProcessReceivedCommands>
1a001f00:	e7f6      	b.n	1a001ef0 <prvTimerTask+0x4>
1a001f02:	Address 0x000000001a001f02 is out of bounds.


1a001f04 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001f04:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001f06:	2300      	movs	r3, #0
1a001f08:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001f0a:	4b0d      	ldr	r3, [pc, #52]	; (1a001f40 <prvTaskExitError+0x3c>)
1a001f0c:	681b      	ldr	r3, [r3, #0]
1a001f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001f12:	d008      	beq.n	1a001f26 <prvTaskExitError+0x22>
1a001f14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f18:	f383 8811 	msr	BASEPRI, r3
1a001f1c:	f3bf 8f6f 	isb	sy
1a001f20:	f3bf 8f4f 	dsb	sy
1a001f24:	e7fe      	b.n	1a001f24 <prvTaskExitError+0x20>
1a001f26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f2a:	f383 8811 	msr	BASEPRI, r3
1a001f2e:	f3bf 8f6f 	isb	sy
1a001f32:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001f36:	9b01      	ldr	r3, [sp, #4]
1a001f38:	2b00      	cmp	r3, #0
1a001f3a:	d0fc      	beq.n	1a001f36 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001f3c:	b002      	add	sp, #8
1a001f3e:	4770      	bx	lr
1a001f40:	10000000 	.word	0x10000000

1a001f44 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001f44:	4808      	ldr	r0, [pc, #32]	; (1a001f68 <prvPortStartFirstTask+0x24>)
1a001f46:	6800      	ldr	r0, [r0, #0]
1a001f48:	6800      	ldr	r0, [r0, #0]
1a001f4a:	f380 8808 	msr	MSP, r0
1a001f4e:	f04f 0000 	mov.w	r0, #0
1a001f52:	f380 8814 	msr	CONTROL, r0
1a001f56:	b662      	cpsie	i
1a001f58:	b661      	cpsie	f
1a001f5a:	f3bf 8f4f 	dsb	sy
1a001f5e:	f3bf 8f6f 	isb	sy
1a001f62:	df00      	svc	0
1a001f64:	bf00      	nop
1a001f66:	0000      	.short	0x0000
1a001f68:	e000ed08 	.word	0xe000ed08

1a001f6c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001f6c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001f7c <vPortEnableVFP+0x10>
1a001f70:	6801      	ldr	r1, [r0, #0]
1a001f72:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001f76:	6001      	str	r1, [r0, #0]
1a001f78:	4770      	bx	lr
1a001f7a:	0000      	.short	0x0000
1a001f7c:	e000ed88 	.word	0xe000ed88

1a001f80 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001f84:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001f88:	f021 0101 	bic.w	r1, r1, #1
1a001f8c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001f90:	4b05      	ldr	r3, [pc, #20]	; (1a001fa8 <pxPortInitialiseStack+0x28>)
1a001f92:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001f96:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001f9a:	f06f 0302 	mvn.w	r3, #2
1a001f9e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001fa2:	3844      	subs	r0, #68	; 0x44
1a001fa4:	4770      	bx	lr
1a001fa6:	bf00      	nop
1a001fa8:	1a001f05 	.word	0x1a001f05
1a001fac:	ffffffff 	.word	0xffffffff

1a001fb0 <SVC_Handler>:
	__asm volatile (
1a001fb0:	4b07      	ldr	r3, [pc, #28]	; (1a001fd0 <pxCurrentTCBConst2>)
1a001fb2:	6819      	ldr	r1, [r3, #0]
1a001fb4:	6808      	ldr	r0, [r1, #0]
1a001fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fba:	f380 8809 	msr	PSP, r0
1a001fbe:	f3bf 8f6f 	isb	sy
1a001fc2:	f04f 0000 	mov.w	r0, #0
1a001fc6:	f380 8811 	msr	BASEPRI, r0
1a001fca:	4770      	bx	lr
1a001fcc:	f3af 8000 	nop.w

1a001fd0 <pxCurrentTCBConst2>:
1a001fd0:	1000285c 	.word	0x1000285c

1a001fd4 <vPortEnterCritical>:
1a001fd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fd8:	f383 8811 	msr	BASEPRI, r3
1a001fdc:	f3bf 8f6f 	isb	sy
1a001fe0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001fe4:	4a0a      	ldr	r2, [pc, #40]	; (1a002010 <vPortEnterCritical+0x3c>)
1a001fe6:	6813      	ldr	r3, [r2, #0]
1a001fe8:	3301      	adds	r3, #1
1a001fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001fec:	2b01      	cmp	r3, #1
1a001fee:	d000      	beq.n	1a001ff2 <vPortEnterCritical+0x1e>
}
1a001ff0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001ff2:	4b08      	ldr	r3, [pc, #32]	; (1a002014 <vPortEnterCritical+0x40>)
1a001ff4:	681b      	ldr	r3, [r3, #0]
1a001ff6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001ffa:	d0f9      	beq.n	1a001ff0 <vPortEnterCritical+0x1c>
1a001ffc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002000:	f383 8811 	msr	BASEPRI, r3
1a002004:	f3bf 8f6f 	isb	sy
1a002008:	f3bf 8f4f 	dsb	sy
1a00200c:	e7fe      	b.n	1a00200c <vPortEnterCritical+0x38>
1a00200e:	bf00      	nop
1a002010:	10000000 	.word	0x10000000
1a002014:	e000ed04 	.word	0xe000ed04

1a002018 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002018:	4b09      	ldr	r3, [pc, #36]	; (1a002040 <vPortExitCritical+0x28>)
1a00201a:	681b      	ldr	r3, [r3, #0]
1a00201c:	b943      	cbnz	r3, 1a002030 <vPortExitCritical+0x18>
1a00201e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002022:	f383 8811 	msr	BASEPRI, r3
1a002026:	f3bf 8f6f 	isb	sy
1a00202a:	f3bf 8f4f 	dsb	sy
1a00202e:	e7fe      	b.n	1a00202e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002030:	3b01      	subs	r3, #1
1a002032:	4a03      	ldr	r2, [pc, #12]	; (1a002040 <vPortExitCritical+0x28>)
1a002034:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002036:	b90b      	cbnz	r3, 1a00203c <vPortExitCritical+0x24>
	__asm volatile
1a002038:	f383 8811 	msr	BASEPRI, r3
}
1a00203c:	4770      	bx	lr
1a00203e:	bf00      	nop
1a002040:	10000000 	.word	0x10000000
1a002044:	ffffffff 	.word	0xffffffff
1a002048:	ffffffff 	.word	0xffffffff
1a00204c:	ffffffff 	.word	0xffffffff

1a002050 <PendSV_Handler>:
	__asm volatile
1a002050:	f3ef 8009 	mrs	r0, PSP
1a002054:	f3bf 8f6f 	isb	sy
1a002058:	4b15      	ldr	r3, [pc, #84]	; (1a0020b0 <pxCurrentTCBConst>)
1a00205a:	681a      	ldr	r2, [r3, #0]
1a00205c:	f01e 0f10 	tst.w	lr, #16
1a002060:	bf08      	it	eq
1a002062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00206a:	6010      	str	r0, [r2, #0]
1a00206c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002070:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002074:	f380 8811 	msr	BASEPRI, r0
1a002078:	f3bf 8f4f 	dsb	sy
1a00207c:	f3bf 8f6f 	isb	sy
1a002080:	f7ff fb48 	bl	1a001714 <vTaskSwitchContext>
1a002084:	f04f 0000 	mov.w	r0, #0
1a002088:	f380 8811 	msr	BASEPRI, r0
1a00208c:	bc09      	pop	{r0, r3}
1a00208e:	6819      	ldr	r1, [r3, #0]
1a002090:	6808      	ldr	r0, [r1, #0]
1a002092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002096:	f01e 0f10 	tst.w	lr, #16
1a00209a:	bf08      	it	eq
1a00209c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0020a0:	f380 8809 	msr	PSP, r0
1a0020a4:	f3bf 8f6f 	isb	sy
1a0020a8:	4770      	bx	lr
1a0020aa:	bf00      	nop
1a0020ac:	f3af 8000 	nop.w

1a0020b0 <pxCurrentTCBConst>:
1a0020b0:	1000285c 	.word	0x1000285c

1a0020b4 <SysTick_Handler>:
{
1a0020b4:	b508      	push	{r3, lr}
	__asm volatile
1a0020b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020ba:	f383 8811 	msr	BASEPRI, r3
1a0020be:	f3bf 8f6f 	isb	sy
1a0020c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0020c6:	f7ff f9a7 	bl	1a001418 <xTaskIncrementTick>
1a0020ca:	b118      	cbz	r0, 1a0020d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0020cc:	4b03      	ldr	r3, [pc, #12]	; (1a0020dc <SysTick_Handler+0x28>)
1a0020ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020d2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0020d4:	2300      	movs	r3, #0
1a0020d6:	f383 8811 	msr	BASEPRI, r3
}
1a0020da:	bd08      	pop	{r3, pc}
1a0020dc:	e000ed04 	.word	0xe000ed04

1a0020e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0020e0:	4a08      	ldr	r2, [pc, #32]	; (1a002104 <vPortSetupTimerInterrupt+0x24>)
1a0020e2:	2300      	movs	r3, #0
1a0020e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0020e6:	4908      	ldr	r1, [pc, #32]	; (1a002108 <vPortSetupTimerInterrupt+0x28>)
1a0020e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0020ea:	4b08      	ldr	r3, [pc, #32]	; (1a00210c <vPortSetupTimerInterrupt+0x2c>)
1a0020ec:	681b      	ldr	r3, [r3, #0]
1a0020ee:	4908      	ldr	r1, [pc, #32]	; (1a002110 <vPortSetupTimerInterrupt+0x30>)
1a0020f0:	fba1 1303 	umull	r1, r3, r1, r3
1a0020f4:	099b      	lsrs	r3, r3, #6
1a0020f6:	3b01      	subs	r3, #1
1a0020f8:	4906      	ldr	r1, [pc, #24]	; (1a002114 <vPortSetupTimerInterrupt+0x34>)
1a0020fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0020fc:	2307      	movs	r3, #7
1a0020fe:	6013      	str	r3, [r2, #0]
}
1a002100:	4770      	bx	lr
1a002102:	bf00      	nop
1a002104:	e000e010 	.word	0xe000e010
1a002108:	e000e018 	.word	0xe000e018
1a00210c:	10002b64 	.word	0x10002b64
1a002110:	10624dd3 	.word	0x10624dd3
1a002114:	e000e014 	.word	0xe000e014

1a002118 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002118:	4b3a      	ldr	r3, [pc, #232]	; (1a002204 <xPortStartScheduler+0xec>)
1a00211a:	681a      	ldr	r2, [r3, #0]
1a00211c:	4b3a      	ldr	r3, [pc, #232]	; (1a002208 <xPortStartScheduler+0xf0>)
1a00211e:	429a      	cmp	r2, r3
1a002120:	d00d      	beq.n	1a00213e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002122:	4b38      	ldr	r3, [pc, #224]	; (1a002204 <xPortStartScheduler+0xec>)
1a002124:	681a      	ldr	r2, [r3, #0]
1a002126:	4b39      	ldr	r3, [pc, #228]	; (1a00220c <xPortStartScheduler+0xf4>)
1a002128:	429a      	cmp	r2, r3
1a00212a:	d111      	bne.n	1a002150 <xPortStartScheduler+0x38>
	__asm volatile
1a00212c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002130:	f383 8811 	msr	BASEPRI, r3
1a002134:	f3bf 8f6f 	isb	sy
1a002138:	f3bf 8f4f 	dsb	sy
1a00213c:	e7fe      	b.n	1a00213c <xPortStartScheduler+0x24>
1a00213e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002142:	f383 8811 	msr	BASEPRI, r3
1a002146:	f3bf 8f6f 	isb	sy
1a00214a:	f3bf 8f4f 	dsb	sy
1a00214e:	e7fe      	b.n	1a00214e <xPortStartScheduler+0x36>
{
1a002150:	b510      	push	{r4, lr}
1a002152:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002154:	4b2e      	ldr	r3, [pc, #184]	; (1a002210 <xPortStartScheduler+0xf8>)
1a002156:	781a      	ldrb	r2, [r3, #0]
1a002158:	b2d2      	uxtb	r2, r2
1a00215a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00215c:	22ff      	movs	r2, #255	; 0xff
1a00215e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002160:	781b      	ldrb	r3, [r3, #0]
1a002162:	b2db      	uxtb	r3, r3
1a002164:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002168:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00216c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002170:	4a28      	ldr	r2, [pc, #160]	; (1a002214 <xPortStartScheduler+0xfc>)
1a002172:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002174:	4b28      	ldr	r3, [pc, #160]	; (1a002218 <xPortStartScheduler+0x100>)
1a002176:	2207      	movs	r2, #7
1a002178:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00217a:	e009      	b.n	1a002190 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00217c:	4a26      	ldr	r2, [pc, #152]	; (1a002218 <xPortStartScheduler+0x100>)
1a00217e:	6813      	ldr	r3, [r2, #0]
1a002180:	3b01      	subs	r3, #1
1a002182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002184:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002188:	005b      	lsls	r3, r3, #1
1a00218a:	b2db      	uxtb	r3, r3
1a00218c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002190:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002194:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002198:	d1f0      	bne.n	1a00217c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00219a:	4b1f      	ldr	r3, [pc, #124]	; (1a002218 <xPortStartScheduler+0x100>)
1a00219c:	681b      	ldr	r3, [r3, #0]
1a00219e:	2b04      	cmp	r3, #4
1a0021a0:	d008      	beq.n	1a0021b4 <xPortStartScheduler+0x9c>
1a0021a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a6:	f383 8811 	msr	BASEPRI, r3
1a0021aa:	f3bf 8f6f 	isb	sy
1a0021ae:	f3bf 8f4f 	dsb	sy
1a0021b2:	e7fe      	b.n	1a0021b2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0021b4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0021b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0021ba:	4a17      	ldr	r2, [pc, #92]	; (1a002218 <xPortStartScheduler+0x100>)
1a0021bc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0021be:	9b01      	ldr	r3, [sp, #4]
1a0021c0:	b2db      	uxtb	r3, r3
1a0021c2:	4a13      	ldr	r2, [pc, #76]	; (1a002210 <xPortStartScheduler+0xf8>)
1a0021c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0021c6:	4b15      	ldr	r3, [pc, #84]	; (1a00221c <xPortStartScheduler+0x104>)
1a0021c8:	681a      	ldr	r2, [r3, #0]
1a0021ca:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0021ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0021d0:	681a      	ldr	r2, [r3, #0]
1a0021d2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0021d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0021d8:	f7ff ff82 	bl	1a0020e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0021dc:	2400      	movs	r4, #0
1a0021de:	4b10      	ldr	r3, [pc, #64]	; (1a002220 <xPortStartScheduler+0x108>)
1a0021e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0021e2:	f7ff fec3 	bl	1a001f6c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0021e6:	4a0f      	ldr	r2, [pc, #60]	; (1a002224 <xPortStartScheduler+0x10c>)
1a0021e8:	6813      	ldr	r3, [r2, #0]
1a0021ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0021ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0021f0:	f7ff fea8 	bl	1a001f44 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0021f4:	f7ff fa8e 	bl	1a001714 <vTaskSwitchContext>
	prvTaskExitError();
1a0021f8:	f7ff fe84 	bl	1a001f04 <prvTaskExitError>
}
1a0021fc:	4620      	mov	r0, r4
1a0021fe:	b002      	add	sp, #8
1a002200:	bd10      	pop	{r4, pc}
1a002202:	bf00      	nop
1a002204:	e000ed00 	.word	0xe000ed00
1a002208:	410fc271 	.word	0x410fc271
1a00220c:	410fc270 	.word	0x410fc270
1a002210:	e000e400 	.word	0xe000e400
1a002214:	10002ab0 	.word	0x10002ab0
1a002218:	10002ab4 	.word	0x10002ab4
1a00221c:	e000ed20 	.word	0xe000ed20
1a002220:	10000000 	.word	0x10000000
1a002224:	e000ef34 	.word	0xe000ef34

1a002228 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002228:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00222c:	2b0f      	cmp	r3, #15
1a00222e:	d90f      	bls.n	1a002250 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002230:	4a10      	ldr	r2, [pc, #64]	; (1a002274 <vPortValidateInterruptPriority+0x4c>)
1a002232:	5c9b      	ldrb	r3, [r3, r2]
1a002234:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002236:	4a10      	ldr	r2, [pc, #64]	; (1a002278 <vPortValidateInterruptPriority+0x50>)
1a002238:	7812      	ldrb	r2, [r2, #0]
1a00223a:	429a      	cmp	r2, r3
1a00223c:	d908      	bls.n	1a002250 <vPortValidateInterruptPriority+0x28>
1a00223e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002242:	f383 8811 	msr	BASEPRI, r3
1a002246:	f3bf 8f6f 	isb	sy
1a00224a:	f3bf 8f4f 	dsb	sy
1a00224e:	e7fe      	b.n	1a00224e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002250:	4b0a      	ldr	r3, [pc, #40]	; (1a00227c <vPortValidateInterruptPriority+0x54>)
1a002252:	681b      	ldr	r3, [r3, #0]
1a002254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002258:	4a09      	ldr	r2, [pc, #36]	; (1a002280 <vPortValidateInterruptPriority+0x58>)
1a00225a:	6812      	ldr	r2, [r2, #0]
1a00225c:	4293      	cmp	r3, r2
1a00225e:	d908      	bls.n	1a002272 <vPortValidateInterruptPriority+0x4a>
1a002260:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002264:	f383 8811 	msr	BASEPRI, r3
1a002268:	f3bf 8f6f 	isb	sy
1a00226c:	f3bf 8f4f 	dsb	sy
1a002270:	e7fe      	b.n	1a002270 <vPortValidateInterruptPriority+0x48>
	}
1a002272:	4770      	bx	lr
1a002274:	e000e3f0 	.word	0xe000e3f0
1a002278:	10002ab0 	.word	0x10002ab0
1a00227c:	e000ed0c 	.word	0xe000ed0c
1a002280:	10002ab4 	.word	0x10002ab4

1a002284 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002284:	4b04      	ldr	r3, [pc, #16]	; (1a002298 <cyclesCounterInit+0x14>)
1a002286:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002288:	4b04      	ldr	r3, [pc, #16]	; (1a00229c <cyclesCounterInit+0x18>)
1a00228a:	681a      	ldr	r2, [r3, #0]
1a00228c:	6813      	ldr	r3, [r2, #0]
1a00228e:	f043 0301 	orr.w	r3, r3, #1
1a002292:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002294:	2001      	movs	r0, #1
1a002296:	4770      	bx	lr
1a002298:	10000004 	.word	0x10000004
1a00229c:	10000008 	.word	0x10000008

1a0022a0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0022a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0022a4:	0083      	lsls	r3, r0, #2
1a0022a6:	4a03      	ldr	r2, [pc, #12]	; (1a0022b4 <uartTxReady+0x14>)
1a0022a8:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0022aa:	6958      	ldr	r0, [r3, #20]
}
1a0022ac:	f000 0020 	and.w	r0, r0, #32
1a0022b0:	4770      	bx	lr
1a0022b2:	bf00      	nop
1a0022b4:	1a004a9c 	.word	0x1a004a9c

1a0022b8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0022b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0022bc:	0083      	lsls	r3, r0, #2
1a0022be:	4a02      	ldr	r2, [pc, #8]	; (1a0022c8 <uartTxWrite+0x10>)
1a0022c0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0022c2:	6019      	str	r1, [r3, #0]
}
1a0022c4:	4770      	bx	lr
1a0022c6:	bf00      	nop
1a0022c8:	1a004a9c 	.word	0x1a004a9c

1a0022cc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0022cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0022d0:	4680      	mov	r8, r0
1a0022d2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0022d4:	4c19      	ldr	r4, [pc, #100]	; (1a00233c <uartInit+0x70>)
1a0022d6:	0045      	lsls	r5, r0, #1
1a0022d8:	182a      	adds	r2, r5, r0
1a0022da:	0093      	lsls	r3, r2, #2
1a0022dc:	18e6      	adds	r6, r4, r3
1a0022de:	58e7      	ldr	r7, [r4, r3]
1a0022e0:	4638      	mov	r0, r7
1a0022e2:	f000 fd35 	bl	1a002d50 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0022e6:	4649      	mov	r1, r9
1a0022e8:	4638      	mov	r0, r7
1a0022ea:	f000 fd5b 	bl	1a002da4 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0022ee:	2307      	movs	r3, #7
1a0022f0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0022f2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0022f4:	2301      	movs	r3, #1
1a0022f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0022f8:	7930      	ldrb	r0, [r6, #4]
1a0022fa:	7973      	ldrb	r3, [r6, #5]
1a0022fc:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022fe:	f042 0218 	orr.w	r2, r2, #24
1a002302:	490f      	ldr	r1, [pc, #60]	; (1a002340 <uartInit+0x74>)
1a002304:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00230c:	79f0      	ldrb	r0, [r6, #7]
1a00230e:	7a33      	ldrb	r3, [r6, #8]
1a002310:	7a72      	ldrb	r2, [r6, #9]
1a002312:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002316:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00231e:	f1b8 0f01 	cmp.w	r8, #1
1a002322:	d001      	beq.n	1a002328 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002328:	4a06      	ldr	r2, [pc, #24]	; (1a002344 <uartInit+0x78>)
1a00232a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00232c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002330:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002332:	221a      	movs	r2, #26
1a002334:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002338:	e7f4      	b.n	1a002324 <uartInit+0x58>
1a00233a:	bf00      	nop
1a00233c:	1a004a9c 	.word	0x1a004a9c
1a002340:	40086000 	.word	0x40086000
1a002344:	40081000 	.word	0x40081000

1a002348 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002348:	b538      	push	{r3, r4, r5, lr}
1a00234a:	4604      	mov	r4, r0
1a00234c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00234e:	4620      	mov	r0, r4
1a002350:	f7ff ffa6 	bl	1a0022a0 <uartTxReady>
1a002354:	2800      	cmp	r0, #0
1a002356:	d0fa      	beq.n	1a00234e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a002358:	4629      	mov	r1, r5
1a00235a:	4620      	mov	r0, r4
1a00235c:	f7ff ffac 	bl	1a0022b8 <uartTxWrite>
}
1a002360:	bd38      	pop	{r3, r4, r5, pc}

1a002362 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002362:	b538      	push	{r3, r4, r5, lr}
1a002364:	4605      	mov	r5, r0
1a002366:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002368:	e003      	b.n	1a002372 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00236a:	4628      	mov	r0, r5
1a00236c:	f7ff ffec 	bl	1a002348 <uartWriteByte>
      str++;
1a002370:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a002372:	7821      	ldrb	r1, [r4, #0]
1a002374:	2900      	cmp	r1, #0
1a002376:	d1f8      	bne.n	1a00236a <uartWriteString+0x8>
   }
}
1a002378:	bd38      	pop	{r3, r4, r5, pc}
1a00237a:	Address 0x000000001a00237a is out of bounds.


1a00237c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00237c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a002380:	4908      	ldr	r1, [pc, #32]	; (1a0023a4 <tickerCallback+0x28>)
1a002382:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002386:	f112 0b01 	adds.w	fp, r2, #1
1a00238a:	f143 0c00 	adc.w	ip, r3, #0
1a00238e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002392:	4b05      	ldr	r3, [pc, #20]	; (1a0023a8 <tickerCallback+0x2c>)
1a002394:	681b      	ldr	r3, [r3, #0]
1a002396:	b113      	cbz	r3, 1a00239e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002398:	4a04      	ldr	r2, [pc, #16]	; (1a0023ac <tickerCallback+0x30>)
1a00239a:	6810      	ldr	r0, [r2, #0]
1a00239c:	4798      	blx	r3
   }
}
1a00239e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0023a2:	bf00      	nop
1a0023a4:	10002ac0 	.word	0x10002ac0
1a0023a8:	10002ac8 	.word	0x10002ac8
1a0023ac:	10002ab8 	.word	0x10002ab8

1a0023b0 <tickInit>:
{
1a0023b0:	b510      	push	{r4, lr}
1a0023b2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0023b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0023f0 <tickInit+0x40>)
1a0023b6:	9301      	str	r3, [sp, #4]
1a0023b8:	4b0e      	ldr	r3, [pc, #56]	; (1a0023f4 <tickInit+0x44>)
1a0023ba:	9300      	str	r3, [sp, #0]
1a0023bc:	2300      	movs	r3, #0
1a0023be:	2201      	movs	r2, #1
1a0023c0:	4601      	mov	r1, r0
1a0023c2:	480d      	ldr	r0, [pc, #52]	; (1a0023f8 <tickInit+0x48>)
1a0023c4:	f7ff fbfc 	bl	1a001bc0 <xTimerCreateStatic>
         if (h == NULL)
1a0023c8:	b178      	cbz	r0, 1a0023ea <tickInit+0x3a>
1a0023ca:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0023cc:	f7ff f81e 	bl	1a00140c <xTaskGetTickCount>
1a0023d0:	2300      	movs	r3, #0
1a0023d2:	9300      	str	r3, [sp, #0]
1a0023d4:	4602      	mov	r2, r0
1a0023d6:	2101      	movs	r1, #1
1a0023d8:	4620      	mov	r0, r4
1a0023da:	f7ff fc17 	bl	1a001c0c <xTimerGenericCommand>
1a0023de:	2801      	cmp	r0, #1
1a0023e0:	bf14      	ite	ne
1a0023e2:	2000      	movne	r0, #0
1a0023e4:	2001      	moveq	r0, #1
}
1a0023e6:	b002      	add	sp, #8
1a0023e8:	bd10      	pop	{r4, pc}
            return 0;
1a0023ea:	2000      	movs	r0, #0
1a0023ec:	e7fb      	b.n	1a0023e6 <tickInit+0x36>
1a0023ee:	bf00      	nop
1a0023f0:	10002acc 	.word	0x10002acc
1a0023f4:	1a00237d 	.word	0x1a00237d
1a0023f8:	1a004ae4 	.word	0x1a004ae4

1a0023fc <tickRead>:
}
1a0023fc:	4b01      	ldr	r3, [pc, #4]	; (1a002404 <tickRead+0x8>)
1a0023fe:	e9d3 0100 	ldrd	r0, r1, [r3]
1a002402:	4770      	bx	lr
1a002404:	10002ac0 	.word	0x10002ac0

1a002408 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a002408:	b538      	push	{r3, r4, r5, lr}
1a00240a:	4604      	mov	r4, r0
1a00240c:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00240e:	4b08      	ldr	r3, [pc, #32]	; (1a002430 <i2cHardwareInit+0x28>)
1a002410:	f640 0208 	movw	r2, #2056	; 0x808
1a002414:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a002418:	f001 fa9c 	bl	1a003954 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00241c:	4629      	mov	r1, r5
1a00241e:	4620      	mov	r0, r4
1a002420:	f001 faaa 	bl	1a003978 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a002424:	4903      	ldr	r1, [pc, #12]	; (1a002434 <i2cHardwareInit+0x2c>)
1a002426:	4620      	mov	r0, r4
1a002428:	f001 fac2 	bl	1a0039b0 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a00242c:	2001      	movs	r0, #1
1a00242e:	bd38      	pop	{r3, r4, r5, pc}
1a002430:	40086000 	.word	0x40086000
1a002434:	1a003a29 	.word	0x1a003a29

1a002438 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a002438:	b500      	push	{lr}
1a00243a:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a00243c:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a002440:	2100      	movs	r1, #0
1a002442:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a002446:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a00244a:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a00244c:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a002450:	9b07      	ldr	r3, [sp, #28]
1a002452:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a002454:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a002458:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a00245c:	4669      	mov	r1, sp
1a00245e:	4804      	ldr	r0, [pc, #16]	; (1a002470 <i2cHardwareRead+0x38>)
1a002460:	f001 f8ef 	bl	1a003642 <Chip_I2CM_XferBlocking>
1a002464:	b100      	cbz	r0, 1a002468 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a002466:	2001      	movs	r0, #1
}
1a002468:	b005      	add	sp, #20
1a00246a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00246e:	bf00      	nop
1a002470:	400a1000 	.word	0x400a1000

1a002474 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a002474:	b108      	cbz	r0, 1a00247a <i2cHardwareWrite+0x6>
      return FALSE;
1a002476:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a002478:	4770      	bx	lr
{
1a00247a:	b500      	push	{lr}
1a00247c:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a00247e:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a002482:	2100      	movs	r1, #0
1a002484:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a002488:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a00248c:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00248e:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a002492:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a002494:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a002498:	4669      	mov	r1, sp
1a00249a:	4804      	ldr	r0, [pc, #16]	; (1a0024ac <i2cHardwareWrite+0x38>)
1a00249c:	f001 f8d1 	bl	1a003642 <Chip_I2CM_XferBlocking>
1a0024a0:	b100      	cbz	r0, 1a0024a4 <i2cHardwareWrite+0x30>
   return TRUE;
1a0024a2:	2001      	movs	r0, #1
}
1a0024a4:	b005      	add	sp, #20
1a0024a6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0024aa:	bf00      	nop
1a0024ac:	400a1000 	.word	0x400a1000

1a0024b0 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0024b0:	b108      	cbz	r0, 1a0024b6 <i2cInit+0x6>
      return FALSE;
1a0024b2:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0024b4:	4770      	bx	lr
{
1a0024b6:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0024b8:	f7ff ffa6 	bl	1a002408 <i2cHardwareInit>
}
1a0024bc:	bd08      	pop	{r3, pc}

1a0024be <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0024be:	b108      	cbz	r0, 1a0024c4 <i2cRead+0x6>
      return FALSE;
1a0024c0:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0024c2:	4770      	bx	lr
{
1a0024c4:	b510      	push	{r4, lr}
1a0024c6:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a0024c8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0024cc:	9403      	str	r4, [sp, #12]
1a0024ce:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0024d2:	9402      	str	r4, [sp, #8]
1a0024d4:	9c07      	ldr	r4, [sp, #28]
1a0024d6:	9401      	str	r4, [sp, #4]
1a0024d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0024dc:	9400      	str	r4, [sp, #0]
1a0024de:	f7ff ffab 	bl	1a002438 <i2cHardwareRead>
}
1a0024e2:	b004      	add	sp, #16
1a0024e4:	bd10      	pop	{r4, pc}

1a0024e6 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0024e6:	b108      	cbz	r0, 1a0024ec <i2cWrite+0x6>
      return FALSE;
1a0024e8:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0024ea:	4770      	bx	lr
{
1a0024ec:	b510      	push	{r4, lr}
1a0024ee:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a0024f0:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0024f4:	9400      	str	r4, [sp, #0]
1a0024f6:	f7ff ffbd 	bl	1a002474 <i2cHardwareWrite>
}
1a0024fa:	b002      	add	sp, #8
1a0024fc:	bd10      	pop	{r4, pc}

1a0024fe <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0024fe:	e7fe      	b.n	1a0024fe <errorOcurred>

1a002500 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a002500:	4770      	bx	lr
1a002502:	Address 0x000000001a002502 is out of bounds.


1a002504 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002504:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002506:	2400      	movs	r4, #0
1a002508:	e001      	b.n	1a00250e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00250a:	3401      	adds	r4, #1
1a00250c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00250e:	2c03      	cmp	r4, #3
1a002510:	d812      	bhi.n	1a002538 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a002512:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002514:	4b09      	ldr	r3, [pc, #36]	; (1a00253c <TIMER0_IRQHandler+0x38>)
1a002516:	681a      	ldr	r2, [r3, #0]
1a002518:	f004 010f 	and.w	r1, r4, #15
1a00251c:	2301      	movs	r3, #1
1a00251e:	408b      	lsls	r3, r1
1a002520:	421a      	tst	r2, r3
1a002522:	d0f2      	beq.n	1a00250a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002524:	4b06      	ldr	r3, [pc, #24]	; (1a002540 <TIMER0_IRQHandler+0x3c>)
1a002526:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00252a:	2000      	movs	r0, #0
1a00252c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00252e:	2301      	movs	r3, #1
1a002530:	40ab      	lsls	r3, r5
1a002532:	4a02      	ldr	r2, [pc, #8]	; (1a00253c <TIMER0_IRQHandler+0x38>)
1a002534:	6013      	str	r3, [r2, #0]
1a002536:	e7e8      	b.n	1a00250a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002538:	bd38      	pop	{r3, r4, r5, pc}
1a00253a:	bf00      	nop
1a00253c:	40084000 	.word	0x40084000
1a002540:	1000000c 	.word	0x1000000c

1a002544 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002544:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002546:	2400      	movs	r4, #0
1a002548:	e001      	b.n	1a00254e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00254a:	3401      	adds	r4, #1
1a00254c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00254e:	2c03      	cmp	r4, #3
1a002550:	d813      	bhi.n	1a00257a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002552:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002554:	4b09      	ldr	r3, [pc, #36]	; (1a00257c <TIMER1_IRQHandler+0x38>)
1a002556:	681a      	ldr	r2, [r3, #0]
1a002558:	f004 010f 	and.w	r1, r4, #15
1a00255c:	2301      	movs	r3, #1
1a00255e:	408b      	lsls	r3, r1
1a002560:	421a      	tst	r2, r3
1a002562:	d0f2      	beq.n	1a00254a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002564:	1d23      	adds	r3, r4, #4
1a002566:	4a06      	ldr	r2, [pc, #24]	; (1a002580 <TIMER1_IRQHandler+0x3c>)
1a002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00256c:	2000      	movs	r0, #0
1a00256e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002570:	2301      	movs	r3, #1
1a002572:	40ab      	lsls	r3, r5
1a002574:	4a01      	ldr	r2, [pc, #4]	; (1a00257c <TIMER1_IRQHandler+0x38>)
1a002576:	6013      	str	r3, [r2, #0]
1a002578:	e7e7      	b.n	1a00254a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00257a:	bd38      	pop	{r3, r4, r5, pc}
1a00257c:	40085000 	.word	0x40085000
1a002580:	1000000c 	.word	0x1000000c

1a002584 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002584:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002586:	2400      	movs	r4, #0
1a002588:	e001      	b.n	1a00258e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00258a:	3401      	adds	r4, #1
1a00258c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00258e:	2c03      	cmp	r4, #3
1a002590:	d814      	bhi.n	1a0025bc <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002592:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002594:	4b0a      	ldr	r3, [pc, #40]	; (1a0025c0 <TIMER2_IRQHandler+0x3c>)
1a002596:	681a      	ldr	r2, [r3, #0]
1a002598:	f004 010f 	and.w	r1, r4, #15
1a00259c:	2301      	movs	r3, #1
1a00259e:	408b      	lsls	r3, r1
1a0025a0:	421a      	tst	r2, r3
1a0025a2:	d0f2      	beq.n	1a00258a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0025a4:	f104 0308 	add.w	r3, r4, #8
1a0025a8:	4a06      	ldr	r2, [pc, #24]	; (1a0025c4 <TIMER2_IRQHandler+0x40>)
1a0025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0025ae:	2000      	movs	r0, #0
1a0025b0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0025b2:	2301      	movs	r3, #1
1a0025b4:	40ab      	lsls	r3, r5
1a0025b6:	4a02      	ldr	r2, [pc, #8]	; (1a0025c0 <TIMER2_IRQHandler+0x3c>)
1a0025b8:	6013      	str	r3, [r2, #0]
1a0025ba:	e7e6      	b.n	1a00258a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0025bc:	bd38      	pop	{r3, r4, r5, pc}
1a0025be:	bf00      	nop
1a0025c0:	400c3000 	.word	0x400c3000
1a0025c4:	1000000c 	.word	0x1000000c

1a0025c8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0025c8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0025ca:	2400      	movs	r4, #0
1a0025cc:	e001      	b.n	1a0025d2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0025ce:	3401      	adds	r4, #1
1a0025d0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0025d2:	2c03      	cmp	r4, #3
1a0025d4:	d814      	bhi.n	1a002600 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0025d6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0025d8:	4b0a      	ldr	r3, [pc, #40]	; (1a002604 <TIMER3_IRQHandler+0x3c>)
1a0025da:	681a      	ldr	r2, [r3, #0]
1a0025dc:	f004 010f 	and.w	r1, r4, #15
1a0025e0:	2301      	movs	r3, #1
1a0025e2:	408b      	lsls	r3, r1
1a0025e4:	421a      	tst	r2, r3
1a0025e6:	d0f2      	beq.n	1a0025ce <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0025e8:	f104 030c 	add.w	r3, r4, #12
1a0025ec:	4a06      	ldr	r2, [pc, #24]	; (1a002608 <TIMER3_IRQHandler+0x40>)
1a0025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0025f2:	2000      	movs	r0, #0
1a0025f4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0025f6:	2301      	movs	r3, #1
1a0025f8:	40ab      	lsls	r3, r5
1a0025fa:	4a02      	ldr	r2, [pc, #8]	; (1a002604 <TIMER3_IRQHandler+0x3c>)
1a0025fc:	6013      	str	r3, [r2, #0]
1a0025fe:	e7e6      	b.n	1a0025ce <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002600:	bd38      	pop	{r3, r4, r5, pc}
1a002602:	bf00      	nop
1a002604:	400c4000 	.word	0x400c4000
1a002608:	1000000c 	.word	0x1000000c

1a00260c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00260c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00260e:	4d0b      	ldr	r5, [pc, #44]	; (1a00263c <gpioObtainPinInit+0x30>)
1a002610:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002614:	182c      	adds	r4, r5, r0
1a002616:	5628      	ldrsb	r0, [r5, r0]
1a002618:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00261a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00261e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002620:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002624:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002626:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00262a:	9b02      	ldr	r3, [sp, #8]
1a00262c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00262e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002632:	9b03      	ldr	r3, [sp, #12]
1a002634:	701a      	strb	r2, [r3, #0]
}
1a002636:	bc30      	pop	{r4, r5}
1a002638:	4770      	bx	lr
1a00263a:	bf00      	nop
1a00263c:	1a004af0 	.word	0x1a004af0

1a002640 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002640:	b570      	push	{r4, r5, r6, lr}
1a002642:	b084      	sub	sp, #16
1a002644:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002646:	2300      	movs	r3, #0
1a002648:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00264c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002650:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002654:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002658:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00265c:	f10d 030b 	add.w	r3, sp, #11
1a002660:	9301      	str	r3, [sp, #4]
1a002662:	ab03      	add	r3, sp, #12
1a002664:	9300      	str	r3, [sp, #0]
1a002666:	f10d 030d 	add.w	r3, sp, #13
1a00266a:	f10d 020e 	add.w	r2, sp, #14
1a00266e:	f10d 010f 	add.w	r1, sp, #15
1a002672:	f7ff ffcb 	bl	1a00260c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002676:	2c05      	cmp	r4, #5
1a002678:	f200 80a5 	bhi.w	1a0027c6 <gpioInit+0x186>
1a00267c:	e8df f004 	tbb	[pc, r4]
1a002680:	45278109 	.word	0x45278109
1a002684:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002686:	4851      	ldr	r0, [pc, #324]	; (1a0027cc <gpioInit+0x18c>)
1a002688:	f001 f818 	bl	1a0036bc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00268c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00268e:	b004      	add	sp, #16
1a002690:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002692:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002696:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00269a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00269e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0026a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026a6:	494a      	ldr	r1, [pc, #296]	; (1a0027d0 <gpioInit+0x190>)
1a0026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026b4:	2001      	movs	r0, #1
1a0026b6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0026ba:	4c44      	ldr	r4, [pc, #272]	; (1a0027cc <gpioInit+0x18c>)
1a0026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026c0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0026c4:	ea22 0201 	bic.w	r2, r2, r1
1a0026c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0026cc:	e7df      	b.n	1a00268e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0026ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0026d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0026d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0026da:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0026de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0026e2:	493b      	ldr	r1, [pc, #236]	; (1a0027d0 <gpioInit+0x190>)
1a0026e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0026e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0026ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0026f0:	2001      	movs	r0, #1
1a0026f2:	fa00 f102 	lsl.w	r1, r0, r2
1a0026f6:	4c35      	ldr	r4, [pc, #212]	; (1a0027cc <gpioInit+0x18c>)
1a0026f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0026fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002700:	ea22 0201 	bic.w	r2, r2, r1
1a002704:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002708:	e7c1      	b.n	1a00268e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00270a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00270e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002712:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002716:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00271a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00271e:	492c      	ldr	r1, [pc, #176]	; (1a0027d0 <gpioInit+0x190>)
1a002720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002724:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002728:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00272c:	2001      	movs	r0, #1
1a00272e:	fa00 f102 	lsl.w	r1, r0, r2
1a002732:	4c26      	ldr	r4, [pc, #152]	; (1a0027cc <gpioInit+0x18c>)
1a002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002738:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00273c:	ea22 0201 	bic.w	r2, r2, r1
1a002740:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002744:	e7a3      	b.n	1a00268e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002746:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00274a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00274e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002752:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002756:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00275a:	491d      	ldr	r1, [pc, #116]	; (1a0027d0 <gpioInit+0x190>)
1a00275c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002760:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002764:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002768:	2001      	movs	r0, #1
1a00276a:	fa00 f102 	lsl.w	r1, r0, r2
1a00276e:	4c17      	ldr	r4, [pc, #92]	; (1a0027cc <gpioInit+0x18c>)
1a002770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002774:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002778:	ea22 0201 	bic.w	r2, r2, r1
1a00277c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002780:	e785      	b.n	1a00268e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002782:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002786:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00278a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00278e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002792:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002796:	490e      	ldr	r1, [pc, #56]	; (1a0027d0 <gpioInit+0x190>)
1a002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00279c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0027a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0027a4:	2001      	movs	r0, #1
1a0027a6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0027aa:	4b08      	ldr	r3, [pc, #32]	; (1a0027cc <gpioInit+0x18c>)
1a0027ac:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0027b0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0027b4:	4331      	orrs	r1, r6
1a0027b6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0027ba:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0027bc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0027c0:	2100      	movs	r1, #0
1a0027c2:	5499      	strb	r1, [r3, r2]
1a0027c4:	e763      	b.n	1a00268e <gpioInit+0x4e>
      ret_val = 0;
1a0027c6:	2000      	movs	r0, #0
1a0027c8:	e761      	b.n	1a00268e <gpioInit+0x4e>
1a0027ca:	bf00      	nop
1a0027cc:	400f4000 	.word	0x400f4000
1a0027d0:	40086000 	.word	0x40086000

1a0027d4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0027d4:	b510      	push	{r4, lr}
1a0027d6:	b084      	sub	sp, #16
1a0027d8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0027da:	2300      	movs	r3, #0
1a0027dc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0027e0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0027e4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0027e8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0027ec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0027f0:	f10d 030b 	add.w	r3, sp, #11
1a0027f4:	9301      	str	r3, [sp, #4]
1a0027f6:	ab03      	add	r3, sp, #12
1a0027f8:	9300      	str	r3, [sp, #0]
1a0027fa:	f10d 030d 	add.w	r3, sp, #13
1a0027fe:	f10d 020e 	add.w	r2, sp, #14
1a002802:	f10d 010f 	add.w	r1, sp, #15
1a002806:	f7ff ff01 	bl	1a00260c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00280a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00280e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002812:	3400      	adds	r4, #0
1a002814:	bf18      	it	ne
1a002816:	2401      	movne	r4, #1
1a002818:	015b      	lsls	r3, r3, #5
1a00281a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00281e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002822:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002824:	2001      	movs	r0, #1
1a002826:	b004      	add	sp, #16
1a002828:	bd10      	pop	{r4, pc}
1a00282a:	Address 0x000000001a00282a is out of bounds.


1a00282c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00282c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00282e:	4b04      	ldr	r3, [pc, #16]	; (1a002840 <USB0_IRQHandler+0x14>)
1a002830:	681b      	ldr	r3, [r3, #0]
1a002832:	681b      	ldr	r3, [r3, #0]
1a002834:	68db      	ldr	r3, [r3, #12]
1a002836:	4a03      	ldr	r2, [pc, #12]	; (1a002844 <USB0_IRQHandler+0x18>)
1a002838:	6810      	ldr	r0, [r2, #0]
1a00283a:	4798      	blx	r3
}
1a00283c:	bd08      	pop	{r3, pc}
1a00283e:	bf00      	nop
1a002840:	10002b60 	.word	0x10002b60
1a002844:	10002afc 	.word	0x10002afc

1a002848 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002848:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00284a:	f000 fba3 	bl	1a002f94 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00284e:	4b3a      	ldr	r3, [pc, #232]	; (1a002938 <boardInit+0xf0>)
1a002850:	6818      	ldr	r0, [r3, #0]
1a002852:	f7ff fd17 	bl	1a002284 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002856:	2001      	movs	r0, #1
1a002858:	2100      	movs	r1, #0
1a00285a:	f7ff fda9 	bl	1a0023b0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00285e:	2105      	movs	r1, #5
1a002860:	2000      	movs	r0, #0
1a002862:	f7ff feed 	bl	1a002640 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002866:	2100      	movs	r1, #0
1a002868:	2024      	movs	r0, #36	; 0x24
1a00286a:	f7ff fee9 	bl	1a002640 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00286e:	2100      	movs	r1, #0
1a002870:	2025      	movs	r0, #37	; 0x25
1a002872:	f7ff fee5 	bl	1a002640 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002876:	2100      	movs	r1, #0
1a002878:	2026      	movs	r0, #38	; 0x26
1a00287a:	f7ff fee1 	bl	1a002640 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00287e:	2100      	movs	r1, #0
1a002880:	2027      	movs	r0, #39	; 0x27
1a002882:	f7ff fedd 	bl	1a002640 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002886:	2101      	movs	r1, #1
1a002888:	2028      	movs	r0, #40	; 0x28
1a00288a:	f7ff fed9 	bl	1a002640 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00288e:	2101      	movs	r1, #1
1a002890:	2029      	movs	r0, #41	; 0x29
1a002892:	f7ff fed5 	bl	1a002640 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002896:	2101      	movs	r1, #1
1a002898:	202a      	movs	r0, #42	; 0x2a
1a00289a:	f7ff fed1 	bl	1a002640 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00289e:	2101      	movs	r1, #1
1a0028a0:	202b      	movs	r0, #43	; 0x2b
1a0028a2:	f7ff fecd 	bl	1a002640 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0028a6:	2101      	movs	r1, #1
1a0028a8:	202c      	movs	r0, #44	; 0x2c
1a0028aa:	f7ff fec9 	bl	1a002640 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0028ae:	2101      	movs	r1, #1
1a0028b0:	202d      	movs	r0, #45	; 0x2d
1a0028b2:	f7ff fec5 	bl	1a002640 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0028b6:	2100      	movs	r1, #0
1a0028b8:	202e      	movs	r0, #46	; 0x2e
1a0028ba:	f7ff fec1 	bl	1a002640 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0028be:	2100      	movs	r1, #0
1a0028c0:	202f      	movs	r0, #47	; 0x2f
1a0028c2:	f7ff febd 	bl	1a002640 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0028c6:	2100      	movs	r1, #0
1a0028c8:	2030      	movs	r0, #48	; 0x30
1a0028ca:	f7ff feb9 	bl	1a002640 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0028ce:	2100      	movs	r1, #0
1a0028d0:	2031      	movs	r0, #49	; 0x31
1a0028d2:	f7ff feb5 	bl	1a002640 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0028d6:	2100      	movs	r1, #0
1a0028d8:	2032      	movs	r0, #50	; 0x32
1a0028da:	f7ff feb1 	bl	1a002640 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0028de:	2100      	movs	r1, #0
1a0028e0:	2033      	movs	r0, #51	; 0x33
1a0028e2:	f7ff fead 	bl	1a002640 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0028e6:	2100      	movs	r1, #0
1a0028e8:	2034      	movs	r0, #52	; 0x34
1a0028ea:	f7ff fea9 	bl	1a002640 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0028ee:	2100      	movs	r1, #0
1a0028f0:	2035      	movs	r0, #53	; 0x35
1a0028f2:	f7ff fea5 	bl	1a002640 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0028f6:	2101      	movs	r1, #1
1a0028f8:	2036      	movs	r0, #54	; 0x36
1a0028fa:	f7ff fea1 	bl	1a002640 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0028fe:	2101      	movs	r1, #1
1a002900:	2037      	movs	r0, #55	; 0x37
1a002902:	f7ff fe9d 	bl	1a002640 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002906:	2101      	movs	r1, #1
1a002908:	2038      	movs	r0, #56	; 0x38
1a00290a:	f7ff fe99 	bl	1a002640 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00290e:	2101      	movs	r1, #1
1a002910:	2039      	movs	r0, #57	; 0x39
1a002912:	f7ff fe95 	bl	1a002640 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002916:	2101      	movs	r1, #1
1a002918:	203a      	movs	r0, #58	; 0x3a
1a00291a:	f7ff fe91 	bl	1a002640 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00291e:	2101      	movs	r1, #1
1a002920:	203b      	movs	r0, #59	; 0x3b
1a002922:	f7ff fe8d 	bl	1a002640 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002926:	2101      	movs	r1, #1
1a002928:	203c      	movs	r0, #60	; 0x3c
1a00292a:	f7ff fe89 	bl	1a002640 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00292e:	2101      	movs	r1, #1
1a002930:	203d      	movs	r0, #61	; 0x3d
1a002932:	f7ff fe85 	bl	1a002640 <gpioInit>

}
1a002936:	bd08      	pop	{r3, pc}
1a002938:	10002b64 	.word	0x10002b64

1a00293c <delayInaccurateUs>:

   for( i=delay; i>0; i-- );
}

void delayInaccurateUs(tick_t delay_us)
{
1a00293c:	e92d 4800 	stmdb	sp!, {fp, lr}
1a002940:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;

   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a002942:	1802      	adds	r2, r0, r0
1a002944:	eb41 0301 	adc.w	r3, r1, r1
1a002948:	eb10 0b02 	adds.w	fp, r0, r2
1a00294c:	eb41 0c03 	adc.w	ip, r1, r3
1a002950:	ea4f 130c 	mov.w	r3, ip, lsl #4
1a002954:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
1a002958:	ea4f 120b 	mov.w	r2, fp, lsl #4
1a00295c:	eb1b 0002 	adds.w	r0, fp, r2
1a002960:	eb4c 0103 	adc.w	r1, ip, r3
1a002964:	008b      	lsls	r3, r1, #2
1a002966:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00296a:	0082      	lsls	r2, r0, #2
1a00296c:	4610      	mov	r0, r2
1a00296e:	4619      	mov	r1, r3
1a002970:	220a      	movs	r2, #10
1a002972:	2300      	movs	r3, #0
1a002974:	f001 fe00 	bl	1a004578 <__aeabi_uldivmod>
1a002978:	e9cd 0100 	strd	r0, r1, [sp]

   for( i=delay; i>0; i-- );
1a00297c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002980:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a002984:	e007      	b.n	1a002996 <delayInaccurateUs+0x5a>
1a002986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00298a:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a00298e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a002992:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a002996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00299a:	4313      	orrs	r3, r2
1a00299c:	d1f3      	bne.n	1a002986 <delayInaccurateUs+0x4a>
}
1a00299e:	b004      	add	sp, #16
1a0029a0:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

1a0029a4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0029a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0029a8:	4680      	mov	r8, r0
1a0029aa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0029ac:	f7ff fd26 	bl	1a0023fc <tickRead>
1a0029b0:	4606      	mov	r6, r0
1a0029b2:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0029b4:	f7ff fd22 	bl	1a0023fc <tickRead>
1a0029b8:	1b84      	subs	r4, r0, r6
1a0029ba:	eb61 0507 	sbc.w	r5, r1, r7
1a0029be:	4b06      	ldr	r3, [pc, #24]	; (1a0029d8 <delay+0x34>)
1a0029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0029c4:	4640      	mov	r0, r8
1a0029c6:	4649      	mov	r1, r9
1a0029c8:	f001 fdd6 	bl	1a004578 <__aeabi_uldivmod>
1a0029cc:	428d      	cmp	r5, r1
1a0029ce:	bf08      	it	eq
1a0029d0:	4284      	cmpeq	r4, r0
1a0029d2:	d3ef      	bcc.n	1a0029b4 <delay+0x10>
}
1a0029d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0029d8:	10002b58 	.word	0x10002b58

1a0029dc <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0029dc:	b508      	push	{r3, lr}
1a0029de:	460b      	mov	r3, r1
   *printer = uart;
1a0029e0:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0029e2:	4611      	mov	r1, r2
1a0029e4:	4618      	mov	r0, r3
1a0029e6:	f7ff fc71 	bl	1a0022cc <uartInit>
}
1a0029ea:	bd08      	pop	{r3, pc}

1a0029ec <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a0029ec:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a0029ee:	f7ff fcb8 	bl	1a002362 <uartWriteString>
}
1a0029f2:	bd08      	pop	{r3, pc}

1a0029f4 <printEnter>:

void printEnter( print_t printer )
{
1a0029f4:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a0029f6:	4902      	ldr	r1, [pc, #8]	; (1a002a00 <printEnter+0xc>)
1a0029f8:	f7ff fcb3 	bl	1a002362 <uartWriteString>
}
1a0029fc:	bd08      	pop	{r3, pc}
1a0029fe:	bf00      	nop
1a002a00:	1a004c28 	.word	0x1a004c28

1a002a04 <printIntFormat>:


// Print Integer

void printIntFormat( print_t printer, int64_t number, numberFormat_t format )
{
1a002a04:	b510      	push	{r4, lr}
1a002a06:	b092      	sub	sp, #72	; 0x48
1a002a08:	4604      	mov	r4, r0
1a002a0a:	4610      	mov	r0, r2
1a002a0c:	4619      	mov	r1, r3

   char strNumber[65];

   if( int64ToString( number, strNumber, format ) ) {
1a002a0e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a002a12:	aa01      	add	r2, sp, #4
1a002a14:	f000 f808 	bl	1a002a28 <int64ToString>
1a002a18:	b908      	cbnz	r0, 1a002a1e <printIntFormat+0x1a>
      uartWriteString( printer, strNumber );
   }
}
1a002a1a:	b012      	add	sp, #72	; 0x48
1a002a1c:	bd10      	pop	{r4, pc}
      uartWriteString( printer, strNumber );
1a002a1e:	a901      	add	r1, sp, #4
1a002a20:	4620      	mov	r0, r4
1a002a22:	f7ff fc9e 	bl	1a002362 <uartWriteString>
}
1a002a26:	e7f8      	b.n	1a002a1a <printIntFormat+0x16>

1a002a28 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a002a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a2c:	4614      	mov	r4, r2
1a002a2e:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a002a30:	3b02      	subs	r3, #2
1a002a32:	b2db      	uxtb	r3, r3
1a002a34:	2b22      	cmp	r3, #34	; 0x22
1a002a36:	d803      	bhi.n	1a002a40 <int64ToString+0x18>
1a002a38:	4680      	mov	r8, r0
1a002a3a:	4689      	mov	r9, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a002a3c:	4615      	mov	r5, r2
1a002a3e:	e005      	b.n	1a002a4c <int64ToString+0x24>
      *result = '\0';
1a002a40:	2000      	movs	r0, #0
1a002a42:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a002a44:	e034      	b.n	1a002ab0 <int64ToString+0x88>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002a46:	4635      	mov	r5, r6
      value /= (int64_t)base;
1a002a48:	4680      	mov	r8, r0
1a002a4a:	4689      	mov	r9, r1
1a002a4c:	fa5f f68a 	uxtb.w	r6, sl
1a002a50:	2700      	movs	r7, #0
1a002a52:	4632      	mov	r2, r6
1a002a54:	463b      	mov	r3, r7
1a002a56:	4640      	mov	r0, r8
1a002a58:	4649      	mov	r1, r9
1a002a5a:	f001 fd3d 	bl	1a0044d8 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002a5e:	fba6 bc00 	umull	fp, ip, r6, r0
1a002a62:	ebb8 020b 	subs.w	r2, r8, fp
1a002a66:	f112 0b23 	adds.w	fp, r2, #35	; 0x23
1a002a6a:	1c6e      	adds	r6, r5, #1
1a002a6c:	4b11      	ldr	r3, [pc, #68]	; (1a002ab4 <int64ToString+0x8c>)
1a002a6e:	eb0b 0203 	add.w	r2, fp, r3
1a002a72:	7813      	ldrb	r3, [r2, #0]
1a002a74:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a002a76:	ea50 0301 	orrs.w	r3, r0, r1
1a002a7a:	d1e4      	bne.n	1a002a46 <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a002a7c:	f1b8 0f00 	cmp.w	r8, #0
1a002a80:	f179 0300 	sbcs.w	r3, r9, #0
1a002a84:	db03      	blt.n	1a002a8e <int64ToString+0x66>
   *ptr-- = '\0';
1a002a86:	1e73      	subs	r3, r6, #1
1a002a88:	2200      	movs	r2, #0
1a002a8a:	7032      	strb	r2, [r6, #0]
   while(ptr1 < ptr) {
1a002a8c:	e00d      	b.n	1a002aaa <int64ToString+0x82>
   if (tmp_value < 0) *ptr++ = '-';
1a002a8e:	1cae      	adds	r6, r5, #2
1a002a90:	232d      	movs	r3, #45	; 0x2d
1a002a92:	706b      	strb	r3, [r5, #1]
1a002a94:	e7f7      	b.n	1a002a86 <int64ToString+0x5e>
      tmp_char = *ptr;
1a002a96:	461a      	mov	r2, r3
1a002a98:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a002a9c:	4621      	mov	r1, r4
1a002a9e:	f811 5b01 	ldrb.w	r5, [r1], #1
1a002aa2:	701d      	strb	r5, [r3, #0]
      *ptr1++ = tmp_char;
1a002aa4:	7020      	strb	r0, [r4, #0]
1a002aa6:	460c      	mov	r4, r1
      *ptr--= *ptr1;
1a002aa8:	4613      	mov	r3, r2
   while(ptr1 < ptr) {
1a002aaa:	42a3      	cmp	r3, r4
1a002aac:	d8f3      	bhi.n	1a002a96 <int64ToString+0x6e>
   }
   return TRUE;
1a002aae:	2001      	movs	r0, #1
}
1a002ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002ab4:	1a004914 	.word	0x1a004914

1a002ab8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002ab8:	2200      	movs	r2, #0
1a002aba:	2a05      	cmp	r2, #5
1a002abc:	d819      	bhi.n	1a002af2 <Board_LED_Init+0x3a>
{
1a002abe:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002ac0:	490c      	ldr	r1, [pc, #48]	; (1a002af4 <Board_LED_Init+0x3c>)
1a002ac2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002ac6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002aca:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a002acc:	4b0a      	ldr	r3, [pc, #40]	; (1a002af8 <Board_LED_Init+0x40>)
1a002ace:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002ad2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002ad6:	2001      	movs	r0, #1
1a002ad8:	40a0      	lsls	r0, r4
1a002ada:	4301      	orrs	r1, r0
1a002adc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002ae0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002ae4:	2100      	movs	r1, #0
1a002ae6:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002ae8:	3201      	adds	r2, #1
1a002aea:	2a05      	cmp	r2, #5
1a002aec:	d9e8      	bls.n	1a002ac0 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002aee:	bc70      	pop	{r4, r5, r6}
1a002af0:	4770      	bx	lr
1a002af2:	4770      	bx	lr
1a002af4:	1a004c38 	.word	0x1a004c38
1a002af8:	400f4000 	.word	0x400f4000

1a002afc <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002afc:	2300      	movs	r3, #0
1a002afe:	2b03      	cmp	r3, #3
1a002b00:	d816      	bhi.n	1a002b30 <Board_TEC_Init+0x34>
{
1a002b02:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b04:	490b      	ldr	r1, [pc, #44]	; (1a002b34 <Board_TEC_Init+0x38>)
1a002b06:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b0a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b0e:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002b10:	4c09      	ldr	r4, [pc, #36]	; (1a002b38 <Board_TEC_Init+0x3c>)
1a002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002b16:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002b1a:	2001      	movs	r0, #1
1a002b1c:	40a8      	lsls	r0, r5
1a002b1e:	ea21 0100 	bic.w	r1, r1, r0
1a002b22:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b26:	3301      	adds	r3, #1
1a002b28:	2b03      	cmp	r3, #3
1a002b2a:	d9eb      	bls.n	1a002b04 <Board_TEC_Init+0x8>
    }
}
1a002b2c:	bc30      	pop	{r4, r5}
1a002b2e:	4770      	bx	lr
1a002b30:	4770      	bx	lr
1a002b32:	bf00      	nop
1a002b34:	1a004c30 	.word	0x1a004c30
1a002b38:	400f4000 	.word	0x400f4000

1a002b3c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002b3c:	2300      	movs	r3, #0
1a002b3e:	2b08      	cmp	r3, #8
1a002b40:	d816      	bhi.n	1a002b70 <Board_GPIO_Init+0x34>
{
1a002b42:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b44:	490b      	ldr	r1, [pc, #44]	; (1a002b74 <Board_GPIO_Init+0x38>)
1a002b46:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b4a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b4e:	784d      	ldrb	r5, [r1, #1]
1a002b50:	4c09      	ldr	r4, [pc, #36]	; (1a002b78 <Board_GPIO_Init+0x3c>)
1a002b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002b56:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002b5a:	2001      	movs	r0, #1
1a002b5c:	40a8      	lsls	r0, r5
1a002b5e:	ea21 0100 	bic.w	r1, r1, r0
1a002b62:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002b66:	3301      	adds	r3, #1
1a002b68:	2b08      	cmp	r3, #8
1a002b6a:	d9eb      	bls.n	1a002b44 <Board_GPIO_Init+0x8>
    }
}
1a002b6c:	bc30      	pop	{r4, r5}
1a002b6e:	4770      	bx	lr
1a002b70:	4770      	bx	lr
1a002b72:	bf00      	nop
1a002b74:	1a004c44 	.word	0x1a004c44
1a002b78:	400f4000 	.word	0x400f4000

1a002b7c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002b7c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002b7e:	4c0b      	ldr	r4, [pc, #44]	; (1a002bac <Board_SPI_Init+0x30>)
1a002b80:	4620      	mov	r0, r4
1a002b82:	f000 ffab 	bl	1a003adc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002b86:	6863      	ldr	r3, [r4, #4]
1a002b88:	f023 0304 	bic.w	r3, r3, #4
1a002b8c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002b8e:	6823      	ldr	r3, [r4, #0]
1a002b90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002b94:	f043 0307 	orr.w	r3, r3, #7
1a002b98:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002b9a:	4905      	ldr	r1, [pc, #20]	; (1a002bb0 <Board_SPI_Init+0x34>)
1a002b9c:	4620      	mov	r0, r4
1a002b9e:	f000 ff7e 	bl	1a003a9e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002ba2:	6863      	ldr	r3, [r4, #4]
1a002ba4:	f043 0302 	orr.w	r3, r3, #2
1a002ba8:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a002baa:	bd10      	pop	{r4, pc}
1a002bac:	400c5000 	.word	0x400c5000
1a002bb0:	000186a0 	.word	0x000186a0

1a002bb4 <Board_I2C_Init>:
{
1a002bb4:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002bb6:	2000      	movs	r0, #0
1a002bb8:	f000 fecc 	bl	1a003954 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002bbc:	4b04      	ldr	r3, [pc, #16]	; (1a002bd0 <Board_I2C_Init+0x1c>)
1a002bbe:	f640 0208 	movw	r2, #2056	; 0x808
1a002bc2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002bc6:	4903      	ldr	r1, [pc, #12]	; (1a002bd4 <Board_I2C_Init+0x20>)
1a002bc8:	2000      	movs	r0, #0
1a002bca:	f000 fed5 	bl	1a003978 <Chip_I2C_SetClockRate>
}
1a002bce:	bd08      	pop	{r3, pc}
1a002bd0:	40086000 	.word	0x40086000
1a002bd4:	000f4240 	.word	0x000f4240

1a002bd8 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a002bd8:	b510      	push	{r4, lr}
1a002bda:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002bdc:	4c08      	ldr	r4, [pc, #32]	; (1a002c00 <Board_ADC_Init+0x28>)
1a002bde:	4669      	mov	r1, sp
1a002be0:	4620      	mov	r0, r4
1a002be2:	f000 f997 	bl	1a002f14 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002be6:	4a07      	ldr	r2, [pc, #28]	; (1a002c04 <Board_ADC_Init+0x2c>)
1a002be8:	4669      	mov	r1, sp
1a002bea:	4620      	mov	r0, r4
1a002bec:	f000 f9b2 	bl	1a002f54 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002bf0:	2200      	movs	r2, #0
1a002bf2:	4669      	mov	r1, sp
1a002bf4:	4620      	mov	r0, r4
1a002bf6:	f000 f9c6 	bl	1a002f86 <Chip_ADC_SetResolution>
}
1a002bfa:	b002      	add	sp, #8
1a002bfc:	bd10      	pop	{r4, pc}
1a002bfe:	bf00      	nop
1a002c00:	400e3000 	.word	0x400e3000
1a002c04:	00061a80 	.word	0x00061a80

1a002c08 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002c08:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002c0a:	4c07      	ldr	r4, [pc, #28]	; (1a002c28 <Board_Debug_Init+0x20>)
1a002c0c:	4620      	mov	r0, r4
1a002c0e:	f000 f89f 	bl	1a002d50 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002c12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002c16:	4620      	mov	r0, r4
1a002c18:	f000 f8e4 	bl	1a002de4 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a002c1c:	2303      	movs	r3, #3
1a002c1e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002c20:	2301      	movs	r3, #1
1a002c22:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002c24:	bd10      	pop	{r4, pc}
1a002c26:	bf00      	nop
1a002c28:	400c1000 	.word	0x400c1000

1a002c2c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002c2c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002c2e:	f7ff ffeb 	bl	1a002c08 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002c32:	4808      	ldr	r0, [pc, #32]	; (1a002c54 <Board_Init+0x28>)
1a002c34:	f000 fd42 	bl	1a0036bc <Chip_GPIO_Init>

   Board_LED_Init();
1a002c38:	f7ff ff3e 	bl	1a002ab8 <Board_LED_Init>
   Board_TEC_Init();
1a002c3c:	f7ff ff5e 	bl	1a002afc <Board_TEC_Init>
   Board_SPI_Init();
1a002c40:	f7ff ff9c 	bl	1a002b7c <Board_SPI_Init>
   Board_GPIO_Init();
1a002c44:	f7ff ff7a 	bl	1a002b3c <Board_GPIO_Init>
   Board_I2C_Init();
1a002c48:	f7ff ffb4 	bl	1a002bb4 <Board_I2C_Init>
   Board_ADC_Init();
1a002c4c:	f7ff ffc4 	bl	1a002bd8 <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002c50:	bd08      	pop	{r3, pc}
1a002c52:	bf00      	nop
1a002c54:	400f4000 	.word	0x400f4000

1a002c58 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002c58:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002c5a:	4a04      	ldr	r2, [pc, #16]	; (1a002c6c <SystemInit+0x14>)
1a002c5c:	4b04      	ldr	r3, [pc, #16]	; (1a002c70 <SystemInit+0x18>)
1a002c5e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002c60:	f000 fd02 	bl	1a003668 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a002c64:	f000 f858 	bl	1a002d18 <Board_SystemInit>
}
1a002c68:	bd08      	pop	{r3, pc}
1a002c6a:	bf00      	nop
1a002c6c:	1a000000 	.word	0x1a000000
1a002c70:	e000ed08 	.word	0xe000ed08

1a002c74 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002c74:	2300      	movs	r3, #0
1a002c76:	2b1c      	cmp	r3, #28
1a002c78:	d812      	bhi.n	1a002ca0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002c7a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002c7c:	4a09      	ldr	r2, [pc, #36]	; (1a002ca4 <Board_SetupMuxing+0x30>)
1a002c7e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002c82:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002c86:	784a      	ldrb	r2, [r1, #1]
1a002c88:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002c8a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002c8e:	4906      	ldr	r1, [pc, #24]	; (1a002ca8 <Board_SetupMuxing+0x34>)
1a002c90:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002c94:	3301      	adds	r3, #1
1a002c96:	2b1c      	cmp	r3, #28
1a002c98:	d9f0      	bls.n	1a002c7c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002c9e:	4770      	bx	lr
1a002ca0:	4770      	bx	lr
1a002ca2:	bf00      	nop
1a002ca4:	1a004c60 	.word	0x1a004c60
1a002ca8:	40086000 	.word	0x40086000

1a002cac <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002cac:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002cae:	4a17      	ldr	r2, [pc, #92]	; (1a002d0c <Board_SetupClocking+0x60>)
1a002cb0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002cb8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002cbc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002cc0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002cc8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002ccc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002cd0:	2201      	movs	r2, #1
1a002cd2:	490f      	ldr	r1, [pc, #60]	; (1a002d10 <Board_SetupClocking+0x64>)
1a002cd4:	2006      	movs	r0, #6
1a002cd6:	f000 fcf3 	bl	1a0036c0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002cda:	2400      	movs	r4, #0
1a002cdc:	b14c      	cbz	r4, 1a002cf2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002cde:	4b0b      	ldr	r3, [pc, #44]	; (1a002d0c <Board_SetupClocking+0x60>)
1a002ce0:	685a      	ldr	r2, [r3, #4]
1a002ce2:	f022 020c 	bic.w	r2, r2, #12
1a002ce6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002ce8:	685a      	ldr	r2, [r3, #4]
1a002cea:	f042 0203 	orr.w	r2, r2, #3
1a002cee:	605a      	str	r2, [r3, #4]
}
1a002cf0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002cf2:	4808      	ldr	r0, [pc, #32]	; (1a002d14 <Board_SetupClocking+0x68>)
1a002cf4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002cf8:	2301      	movs	r3, #1
1a002cfa:	788a      	ldrb	r2, [r1, #2]
1a002cfc:	7849      	ldrb	r1, [r1, #1]
1a002cfe:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002d02:	f000 fb75 	bl	1a0033f0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002d06:	3401      	adds	r4, #1
1a002d08:	e7e8      	b.n	1a002cdc <Board_SetupClocking+0x30>
1a002d0a:	bf00      	nop
1a002d0c:	40043000 	.word	0x40043000
1a002d10:	0c28cb00 	.word	0x0c28cb00
1a002d14:	1a004c5c 	.word	0x1a004c5c

1a002d18 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002d18:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002d1a:	f7ff ffab 	bl	1a002c74 <Board_SetupMuxing>
    Board_SetupClocking();
1a002d1e:	f7ff ffc5 	bl	1a002cac <Board_SetupClocking>
}
1a002d22:	bd08      	pop	{r3, pc}

1a002d24 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002d24:	4b09      	ldr	r3, [pc, #36]	; (1a002d4c <Chip_UART_GetIndex+0x28>)
1a002d26:	4298      	cmp	r0, r3
1a002d28:	d009      	beq.n	1a002d3e <Chip_UART_GetIndex+0x1a>
1a002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002d2e:	4298      	cmp	r0, r3
1a002d30:	d007      	beq.n	1a002d42 <Chip_UART_GetIndex+0x1e>
1a002d32:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002d36:	4298      	cmp	r0, r3
1a002d38:	d005      	beq.n	1a002d46 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002d3a:	2000      	movs	r0, #0
1a002d3c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002d3e:	2002      	movs	r0, #2
1a002d40:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002d42:	2003      	movs	r0, #3
1a002d44:	4770      	bx	lr
			return 1;
1a002d46:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002d48:	4770      	bx	lr
1a002d4a:	bf00      	nop
1a002d4c:	400c1000 	.word	0x400c1000

1a002d50 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002d50:	b530      	push	{r4, r5, lr}
1a002d52:	b083      	sub	sp, #12
1a002d54:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002d56:	f7ff ffe5 	bl	1a002d24 <Chip_UART_GetIndex>
1a002d5a:	2301      	movs	r3, #1
1a002d5c:	461a      	mov	r2, r3
1a002d5e:	4619      	mov	r1, r3
1a002d60:	4d0e      	ldr	r5, [pc, #56]	; (1a002d9c <Chip_UART_Init+0x4c>)
1a002d62:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002d66:	f000 fb89 	bl	1a00347c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002d6a:	2307      	movs	r3, #7
1a002d6c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002d6e:	2300      	movs	r3, #0
1a002d70:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002d72:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002d74:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002d76:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002d78:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002d7a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002d7c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002d7e:	4b08      	ldr	r3, [pc, #32]	; (1a002da0 <Chip_UART_Init+0x50>)
1a002d80:	429c      	cmp	r4, r3
1a002d82:	d006      	beq.n	1a002d92 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002d84:	2303      	movs	r3, #3
1a002d86:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002d88:	2310      	movs	r3, #16
1a002d8a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002d8c:	9b01      	ldr	r3, [sp, #4]
}
1a002d8e:	b003      	add	sp, #12
1a002d90:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002d92:	2300      	movs	r3, #0
1a002d94:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002d96:	69a3      	ldr	r3, [r4, #24]
1a002d98:	9301      	str	r3, [sp, #4]
1a002d9a:	e7f3      	b.n	1a002d84 <Chip_UART_Init+0x34>
1a002d9c:	1a004cdc 	.word	0x1a004cdc
1a002da0:	40082000 	.word	0x40082000

1a002da4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002da4:	b538      	push	{r3, r4, r5, lr}
1a002da6:	4605      	mov	r5, r0
1a002da8:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002daa:	f7ff ffbb 	bl	1a002d24 <Chip_UART_GetIndex>
1a002dae:	4b0c      	ldr	r3, [pc, #48]	; (1a002de0 <Chip_UART_SetBaud+0x3c>)
1a002db0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002db4:	f000 fb9a 	bl	1a0034ec <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002db8:	0123      	lsls	r3, r4, #4
1a002dba:	fbb0 f3f3 	udiv	r3, r0, r3
1a002dbe:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002dc0:	68ea      	ldr	r2, [r5, #12]
1a002dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002dc6:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002dc8:	6029      	str	r1, [r5, #0]
1a002dca:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002dce:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002dd0:	68ea      	ldr	r2, [r5, #12]
1a002dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002dd6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002dd8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002ddc:	0900      	lsrs	r0, r0, #4
1a002dde:	bd38      	pop	{r3, r4, r5, pc}
1a002de0:	1a004cd4 	.word	0x1a004cd4

1a002de4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002de8:	b083      	sub	sp, #12
1a002dea:	4683      	mov	fp, r0
1a002dec:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002dee:	f7ff ff99 	bl	1a002d24 <Chip_UART_GetIndex>
1a002df2:	4b35      	ldr	r3, [pc, #212]	; (1a002ec8 <Chip_UART_SetBaudFDR+0xe4>)
1a002df4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002df8:	f000 fb78 	bl	1a0034ec <Chip_Clock_GetRate>
1a002dfc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002dfe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002e02:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002e04:	2300      	movs	r3, #0
1a002e06:	9301      	str	r3, [sp, #4]
1a002e08:	46a2      	mov	sl, r4
1a002e0a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002e0c:	e02a      	b.n	1a002e64 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002e0e:	4242      	negs	r2, r0
				div ++;
1a002e10:	1c4b      	adds	r3, r1, #1
1a002e12:	e017      	b.n	1a002e44 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002e14:	b30a      	cbz	r2, 1a002e5a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002e16:	4617      	mov	r7, r2
			sd = d;
1a002e18:	9501      	str	r5, [sp, #4]
			sm = m;
1a002e1a:	46a2      	mov	sl, r4
			sdiv = div;
1a002e1c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002e1e:	3501      	adds	r5, #1
1a002e20:	42ac      	cmp	r4, r5
1a002e22:	d91e      	bls.n	1a002e62 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002e24:	0933      	lsrs	r3, r6, #4
1a002e26:	0730      	lsls	r0, r6, #28
1a002e28:	fba4 0100 	umull	r0, r1, r4, r0
1a002e2c:	fb04 1103 	mla	r1, r4, r3, r1
1a002e30:	1962      	adds	r2, r4, r5
1a002e32:	fb08 f202 	mul.w	r2, r8, r2
1a002e36:	2300      	movs	r3, #0
1a002e38:	f001 fb9e 	bl	1a004578 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002e3c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002e3e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002e40:	2800      	cmp	r0, #0
1a002e42:	dbe4      	blt.n	1a002e0e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002e44:	4297      	cmp	r7, r2
1a002e46:	d3ea      	bcc.n	1a002e1e <Chip_UART_SetBaudFDR+0x3a>
1a002e48:	2b00      	cmp	r3, #0
1a002e4a:	d0e8      	beq.n	1a002e1e <Chip_UART_SetBaudFDR+0x3a>
1a002e4c:	0c19      	lsrs	r1, r3, #16
1a002e4e:	d1e6      	bne.n	1a002e1e <Chip_UART_SetBaudFDR+0x3a>
1a002e50:	2b02      	cmp	r3, #2
1a002e52:	d8df      	bhi.n	1a002e14 <Chip_UART_SetBaudFDR+0x30>
1a002e54:	2d00      	cmp	r5, #0
1a002e56:	d0dd      	beq.n	1a002e14 <Chip_UART_SetBaudFDR+0x30>
1a002e58:	e7e1      	b.n	1a002e1e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002e5a:	4617      	mov	r7, r2
			sd = d;
1a002e5c:	9501      	str	r5, [sp, #4]
			sm = m;
1a002e5e:	46a2      	mov	sl, r4
			sdiv = div;
1a002e60:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002e62:	3401      	adds	r4, #1
1a002e64:	b11f      	cbz	r7, 1a002e6e <Chip_UART_SetBaudFDR+0x8a>
1a002e66:	2c0f      	cmp	r4, #15
1a002e68:	d801      	bhi.n	1a002e6e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002e6a:	2500      	movs	r5, #0
1a002e6c:	e7d8      	b.n	1a002e20 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002e6e:	f1b9 0f00 	cmp.w	r9, #0
1a002e72:	d024      	beq.n	1a002ebe <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002e74:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002e7c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002e80:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002e84:	f8cb 3000 	str.w	r3, [fp]
1a002e88:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002e8c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e90:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002e98:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002e9c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002ea0:	b2db      	uxtb	r3, r3
1a002ea2:	9901      	ldr	r1, [sp, #4]
1a002ea4:	f001 020f 	and.w	r2, r1, #15
1a002ea8:	4313      	orrs	r3, r2
1a002eaa:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002eae:	0933      	lsrs	r3, r6, #4
1a002eb0:	fb0a f303 	mul.w	r3, sl, r3
1a002eb4:	448a      	add	sl, r1
1a002eb6:	fb09 f90a 	mul.w	r9, r9, sl
1a002eba:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002ebe:	4648      	mov	r0, r9
1a002ec0:	b003      	add	sp, #12
1a002ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002ec6:	bf00      	nop
1a002ec8:	1a004cd4 	.word	0x1a004cd4

1a002ecc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002ecc:	4b03      	ldr	r3, [pc, #12]	; (1a002edc <Chip_ADC_GetClockIndex+0x10>)
1a002ece:	4298      	cmp	r0, r3
1a002ed0:	d001      	beq.n	1a002ed6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002ed2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002ed4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002ed6:	2004      	movs	r0, #4
1a002ed8:	4770      	bx	lr
1a002eda:	bf00      	nop
1a002edc:	400e4000 	.word	0x400e4000

1a002ee0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002ee0:	b570      	push	{r4, r5, r6, lr}
1a002ee2:	460d      	mov	r5, r1
1a002ee4:	4614      	mov	r4, r2
1a002ee6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002ee8:	f7ff fff0 	bl	1a002ecc <Chip_ADC_GetClockIndex>
1a002eec:	f000 fafe 	bl	1a0034ec <Chip_Clock_GetRate>
	if (burstMode) {
1a002ef0:	b965      	cbnz	r5, 1a002f0c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002ef2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002ef6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002efa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002efe:	0064      	lsls	r4, r4, #1
1a002f00:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f04:	b2c0      	uxtb	r0, r0
1a002f06:	3801      	subs	r0, #1
	return div;
}
1a002f08:	b2c0      	uxtb	r0, r0
1a002f0a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002f0c:	fb04 f406 	mul.w	r4, r4, r6
1a002f10:	e7f3      	b.n	1a002efa <getClkDiv+0x1a>
1a002f12:	Address 0x000000001a002f12 is out of bounds.


1a002f14 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002f14:	b538      	push	{r3, r4, r5, lr}
1a002f16:	4605      	mov	r5, r0
1a002f18:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002f1a:	f7ff ffd7 	bl	1a002ecc <Chip_ADC_GetClockIndex>
1a002f1e:	2301      	movs	r3, #1
1a002f20:	461a      	mov	r2, r3
1a002f22:	4619      	mov	r1, r3
1a002f24:	f000 faaa 	bl	1a00347c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002f28:	2100      	movs	r1, #0
1a002f2a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002f2c:	4a08      	ldr	r2, [pc, #32]	; (1a002f50 <Chip_ADC_Init+0x3c>)
1a002f2e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002f30:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002f32:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002f34:	230b      	movs	r3, #11
1a002f36:	4628      	mov	r0, r5
1a002f38:	f7ff ffd2 	bl	1a002ee0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002f3c:	0200      	lsls	r0, r0, #8
1a002f3e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002f42:	7920      	ldrb	r0, [r4, #4]
1a002f44:	0440      	lsls	r0, r0, #17
1a002f46:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002f4a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002f4c:	6028      	str	r0, [r5, #0]
}
1a002f4e:	bd38      	pop	{r3, r4, r5, pc}
1a002f50:	00061a80 	.word	0x00061a80

1a002f54 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002f54:	b570      	push	{r4, r5, r6, lr}
1a002f56:	4605      	mov	r5, r0
1a002f58:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002f5a:	6804      	ldr	r4, [r0, #0]
1a002f5c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002f60:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002f64:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002f66:	790b      	ldrb	r3, [r1, #4]
1a002f68:	f1c3 030b 	rsb	r3, r3, #11
1a002f6c:	b2db      	uxtb	r3, r3
1a002f6e:	7949      	ldrb	r1, [r1, #5]
1a002f70:	f7ff ffb6 	bl	1a002ee0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002f74:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002f78:	7930      	ldrb	r0, [r6, #4]
1a002f7a:	0440      	lsls	r0, r0, #17
1a002f7c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002f80:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002f82:	6028      	str	r0, [r5, #0]
}
1a002f84:	bd70      	pop	{r4, r5, r6, pc}

1a002f86 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002f86:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002f88:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002f8a:	680a      	ldr	r2, [r1, #0]
1a002f8c:	f7ff ffe2 	bl	1a002f54 <Chip_ADC_SetSampleRate>
}
1a002f90:	bd08      	pop	{r3, pc}
1a002f92:	Address 0x000000001a002f92 is out of bounds.


1a002f94 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002f94:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002f96:	2069      	movs	r0, #105	; 0x69
1a002f98:	f000 faa8 	bl	1a0034ec <Chip_Clock_GetRate>
1a002f9c:	4b01      	ldr	r3, [pc, #4]	; (1a002fa4 <SystemCoreClockUpdate+0x10>)
1a002f9e:	6018      	str	r0, [r3, #0]
}
1a002fa0:	bd08      	pop	{r3, pc}
1a002fa2:	bf00      	nop
1a002fa4:	10002b64 	.word	0x10002b64

1a002fa8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002fa8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002faa:	680b      	ldr	r3, [r1, #0]
1a002fac:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002fb0:	d002      	beq.n	1a002fb8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002fb6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002fb8:	4607      	mov	r7, r0
1a002fba:	2501      	movs	r5, #1
1a002fbc:	e03b      	b.n	1a003036 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002fbe:	694b      	ldr	r3, [r1, #20]
1a002fc0:	fb03 f302 	mul.w	r3, r3, r2
1a002fc4:	fbb3 f3f5 	udiv	r3, r3, r5
1a002fc8:	e014      	b.n	1a002ff4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002fca:	461c      	mov	r4, r3
1a002fcc:	e020      	b.n	1a003010 <pll_calc_divs+0x68>
		return -val;
1a002fce:	f1cc 0c00 	rsb	ip, ip, #0
1a002fd2:	e020      	b.n	1a003016 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002fd4:	3201      	adds	r2, #1
1a002fd6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002fda:	dc26      	bgt.n	1a00302a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002fdc:	680c      	ldr	r4, [r1, #0]
1a002fde:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002fe2:	d0ec      	beq.n	1a002fbe <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002fe4:	1c73      	adds	r3, r6, #1
1a002fe6:	fa02 fc03 	lsl.w	ip, r2, r3
1a002fea:	694b      	ldr	r3, [r1, #20]
1a002fec:	fb03 f30c 	mul.w	r3, r3, ip
1a002ff0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002ff4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003044 <pll_calc_divs+0x9c>
1a002ff8:	4563      	cmp	r3, ip
1a002ffa:	d9eb      	bls.n	1a002fd4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002ffc:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003048 <pll_calc_divs+0xa0>
1a003000:	4563      	cmp	r3, ip
1a003002:	d812      	bhi.n	1a00302a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003004:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003008:	d1df      	bne.n	1a002fca <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a00300a:	1c74      	adds	r4, r6, #1
1a00300c:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003010:	ebb0 0c04 	subs.w	ip, r0, r4
1a003014:	d4db      	bmi.n	1a002fce <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a003016:	4567      	cmp	r7, ip
1a003018:	d9dc      	bls.n	1a002fd4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a00301a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a00301c:	1c77      	adds	r7, r6, #1
1a00301e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003020:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a003022:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003024:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003026:	4667      	mov	r7, ip
1a003028:	e7d4      	b.n	1a002fd4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a00302a:	3601      	adds	r6, #1
1a00302c:	2e03      	cmp	r6, #3
1a00302e:	dc01      	bgt.n	1a003034 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003030:	2201      	movs	r2, #1
1a003032:	e7d0      	b.n	1a002fd6 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a003034:	3501      	adds	r5, #1
1a003036:	2d04      	cmp	r5, #4
1a003038:	dc01      	bgt.n	1a00303e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a00303a:	2600      	movs	r6, #0
1a00303c:	e7f6      	b.n	1a00302c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00303e:	bcf0      	pop	{r4, r5, r6, r7}
1a003040:	4770      	bx	lr
1a003042:	bf00      	nop
1a003044:	094c5eff 	.word	0x094c5eff
1a003048:	1312d000 	.word	0x1312d000

1a00304c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00304c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00304e:	b099      	sub	sp, #100	; 0x64
1a003050:	4605      	mov	r5, r0
1a003052:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003054:	225c      	movs	r2, #92	; 0x5c
1a003056:	2100      	movs	r1, #0
1a003058:	a801      	add	r0, sp, #4
1a00305a:	f001 fc3c 	bl	1a0048d6 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00305e:	2380      	movs	r3, #128	; 0x80
1a003060:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003062:	6963      	ldr	r3, [r4, #20]
1a003064:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003066:	7923      	ldrb	r3, [r4, #4]
1a003068:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00306c:	4669      	mov	r1, sp
1a00306e:	4628      	mov	r0, r5
1a003070:	f7ff ff9a 	bl	1a002fa8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003074:	9b06      	ldr	r3, [sp, #24]
1a003076:	42ab      	cmp	r3, r5
1a003078:	d027      	beq.n	1a0030ca <pll_get_frac+0x7e>
	if (val < 0)
1a00307a:	1aeb      	subs	r3, r5, r3
1a00307c:	d42e      	bmi.n	1a0030dc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00307e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003080:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003086:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003088:	6963      	ldr	r3, [r4, #20]
1a00308a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00308c:	7923      	ldrb	r3, [r4, #4]
1a00308e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003092:	a910      	add	r1, sp, #64	; 0x40
1a003094:	4628      	mov	r0, r5
1a003096:	f7ff ff87 	bl	1a002fa8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00309a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00309c:	42ab      	cmp	r3, r5
1a00309e:	d01f      	beq.n	1a0030e0 <pll_get_frac+0x94>
	if (val < 0)
1a0030a0:	1aeb      	subs	r3, r5, r3
1a0030a2:	d425      	bmi.n	1a0030f0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0030a4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0030a6:	4b2b      	ldr	r3, [pc, #172]	; (1a003154 <pll_get_frac+0x108>)
1a0030a8:	429d      	cmp	r5, r3
1a0030aa:	d923      	bls.n	1a0030f4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0030ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0030ae:	1aed      	subs	r5, r5, r3
1a0030b0:	d433      	bmi.n	1a00311a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0030b2:	42ae      	cmp	r6, r5
1a0030b4:	dc3b      	bgt.n	1a00312e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0030b6:	42be      	cmp	r6, r7
1a0030b8:	dc31      	bgt.n	1a00311e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0030ba:	466d      	mov	r5, sp
1a0030bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0030c8:	e006      	b.n	1a0030d8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0030ca:	466d      	mov	r5, sp
1a0030cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0030d8:	b019      	add	sp, #100	; 0x64
1a0030da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0030dc:	425b      	negs	r3, r3
1a0030de:	e7ce      	b.n	1a00307e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0030e0:	ad10      	add	r5, sp, #64	; 0x40
1a0030e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0030ee:	e7f3      	b.n	1a0030d8 <pll_get_frac+0x8c>
		return -val;
1a0030f0:	425b      	negs	r3, r3
1a0030f2:	e7d7      	b.n	1a0030a4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0030f4:	2340      	movs	r3, #64	; 0x40
1a0030f6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0030f8:	6963      	ldr	r3, [r4, #20]
1a0030fa:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0030fc:	a908      	add	r1, sp, #32
1a0030fe:	4628      	mov	r0, r5
1a003100:	f7ff ff52 	bl	1a002fa8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003106:	42ab      	cmp	r3, r5
1a003108:	d1d0      	bne.n	1a0030ac <pll_get_frac+0x60>
			*ppll = pll[1];
1a00310a:	ad08      	add	r5, sp, #32
1a00310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00310e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003118:	e7de      	b.n	1a0030d8 <pll_get_frac+0x8c>
		return -val;
1a00311a:	426d      	negs	r5, r5
1a00311c:	e7c9      	b.n	1a0030b2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00311e:	ad10      	add	r5, sp, #64	; 0x40
1a003120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00312c:	e7d4      	b.n	1a0030d8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00312e:	42af      	cmp	r7, r5
1a003130:	db07      	blt.n	1a003142 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003132:	ad08      	add	r5, sp, #32
1a003134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003138:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00313c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003140:	e7ca      	b.n	1a0030d8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003142:	ad10      	add	r5, sp, #64	; 0x40
1a003144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00314c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003150:	e7c2      	b.n	1a0030d8 <pll_get_frac+0x8c>
1a003152:	bf00      	nop
1a003154:	068e7780 	.word	0x068e7780

1a003158 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003158:	b430      	push	{r4, r5}
1a00315a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00315c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00315e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003160:	e000      	b.n	1a003164 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003162:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003164:	281c      	cmp	r0, #28
1a003166:	d118      	bne.n	1a00319a <Chip_Clock_FindBaseClock+0x42>
1a003168:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00316c:	0051      	lsls	r1, r2, #1
1a00316e:	4a0c      	ldr	r2, [pc, #48]	; (1a0031a0 <Chip_Clock_FindBaseClock+0x48>)
1a003170:	440a      	add	r2, r1
1a003172:	7914      	ldrb	r4, [r2, #4]
1a003174:	4284      	cmp	r4, r0
1a003176:	d010      	beq.n	1a00319a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003178:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00317c:	004a      	lsls	r2, r1, #1
1a00317e:	4908      	ldr	r1, [pc, #32]	; (1a0031a0 <Chip_Clock_FindBaseClock+0x48>)
1a003180:	5a8a      	ldrh	r2, [r1, r2]
1a003182:	42aa      	cmp	r2, r5
1a003184:	d8ed      	bhi.n	1a003162 <Chip_Clock_FindBaseClock+0xa>
1a003186:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00318a:	0051      	lsls	r1, r2, #1
1a00318c:	4a04      	ldr	r2, [pc, #16]	; (1a0031a0 <Chip_Clock_FindBaseClock+0x48>)
1a00318e:	440a      	add	r2, r1
1a003190:	8852      	ldrh	r2, [r2, #2]
1a003192:	42aa      	cmp	r2, r5
1a003194:	d3e5      	bcc.n	1a003162 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003196:	4620      	mov	r0, r4
1a003198:	e7e4      	b.n	1a003164 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00319a:	bc30      	pop	{r4, r5}
1a00319c:	4770      	bx	lr
1a00319e:	bf00      	nop
1a0031a0:	1a004cf0 	.word	0x1a004cf0

1a0031a4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0031a4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0031aa:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0031ac:	4a0d      	ldr	r2, [pc, #52]	; (1a0031e4 <Chip_Clock_EnableCrystal+0x40>)
1a0031ae:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0031b0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0031b4:	6992      	ldr	r2, [r2, #24]
1a0031b6:	428a      	cmp	r2, r1
1a0031b8:	d001      	beq.n	1a0031be <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0031ba:	4a0a      	ldr	r2, [pc, #40]	; (1a0031e4 <Chip_Clock_EnableCrystal+0x40>)
1a0031bc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0031be:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0031c2:	4a09      	ldr	r2, [pc, #36]	; (1a0031e8 <Chip_Clock_EnableCrystal+0x44>)
1a0031c4:	6811      	ldr	r1, [r2, #0]
1a0031c6:	4a09      	ldr	r2, [pc, #36]	; (1a0031ec <Chip_Clock_EnableCrystal+0x48>)
1a0031c8:	4291      	cmp	r1, r2
1a0031ca:	d901      	bls.n	1a0031d0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0031cc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0031d0:	4a04      	ldr	r2, [pc, #16]	; (1a0031e4 <Chip_Clock_EnableCrystal+0x40>)
1a0031d2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0031d4:	9b01      	ldr	r3, [sp, #4]
1a0031d6:	1e5a      	subs	r2, r3, #1
1a0031d8:	9201      	str	r2, [sp, #4]
1a0031da:	2b00      	cmp	r3, #0
1a0031dc:	d1fa      	bne.n	1a0031d4 <Chip_Clock_EnableCrystal+0x30>
}
1a0031de:	b002      	add	sp, #8
1a0031e0:	4770      	bx	lr
1a0031e2:	bf00      	nop
1a0031e4:	40050000 	.word	0x40050000
1a0031e8:	1a004c58 	.word	0x1a004c58
1a0031ec:	01312cff 	.word	0x01312cff

1a0031f0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0031f0:	3012      	adds	r0, #18
1a0031f2:	4b05      	ldr	r3, [pc, #20]	; (1a003208 <Chip_Clock_GetDividerSource+0x18>)
1a0031f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0031f8:	f010 0f01 	tst.w	r0, #1
1a0031fc:	d102      	bne.n	1a003204 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0031fe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003202:	4770      	bx	lr
		return CLKINPUT_PD;
1a003204:	2011      	movs	r0, #17
}
1a003206:	4770      	bx	lr
1a003208:	40050000 	.word	0x40050000

1a00320c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00320c:	f100 0212 	add.w	r2, r0, #18
1a003210:	4b03      	ldr	r3, [pc, #12]	; (1a003220 <Chip_Clock_GetDividerDivisor+0x14>)
1a003212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003216:	4b03      	ldr	r3, [pc, #12]	; (1a003224 <Chip_Clock_GetDividerDivisor+0x18>)
1a003218:	5c18      	ldrb	r0, [r3, r0]
}
1a00321a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00321e:	4770      	bx	lr
1a003220:	40050000 	.word	0x40050000
1a003224:	1a004ce8 	.word	0x1a004ce8

1a003228 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003228:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00322a:	2810      	cmp	r0, #16
1a00322c:	d80a      	bhi.n	1a003244 <Chip_Clock_GetClockInputHz+0x1c>
1a00322e:	e8df f000 	tbb	[pc, r0]
1a003232:	0b42      	.short	0x0b42
1a003234:	091f160d 	.word	0x091f160d
1a003238:	2b282522 	.word	0x2b282522
1a00323c:	322e0909 	.word	0x322e0909
1a003240:	3a36      	.short	0x3a36
1a003242:	3e          	.byte	0x3e
1a003243:	00          	.byte	0x00
	uint32_t rate = 0;
1a003244:	2000      	movs	r0, #0
1a003246:	e038      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003248:	481e      	ldr	r0, [pc, #120]	; (1a0032c4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00324a:	e036      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00324c:	4b1e      	ldr	r3, [pc, #120]	; (1a0032c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00324e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003252:	f003 0307 	and.w	r3, r3, #7
1a003256:	2b04      	cmp	r3, #4
1a003258:	d130      	bne.n	1a0032bc <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a00325a:	2000      	movs	r0, #0
1a00325c:	e02d      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00325e:	4b1a      	ldr	r3, [pc, #104]	; (1a0032c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a003260:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003264:	f003 0307 	and.w	r3, r3, #7
1a003268:	2b04      	cmp	r3, #4
1a00326a:	d029      	beq.n	1a0032c0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00326c:	4817      	ldr	r0, [pc, #92]	; (1a0032cc <Chip_Clock_GetClockInputHz+0xa4>)
1a00326e:	e024      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003270:	4b17      	ldr	r3, [pc, #92]	; (1a0032d0 <Chip_Clock_GetClockInputHz+0xa8>)
1a003272:	6818      	ldr	r0, [r3, #0]
		break;
1a003274:	e021      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003276:	4b17      	ldr	r3, [pc, #92]	; (1a0032d4 <Chip_Clock_GetClockInputHz+0xac>)
1a003278:	6818      	ldr	r0, [r3, #0]
		break;
1a00327a:	e01e      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00327c:	4b16      	ldr	r3, [pc, #88]	; (1a0032d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a00327e:	6818      	ldr	r0, [r3, #0]
		break;
1a003280:	e01b      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003282:	4b15      	ldr	r3, [pc, #84]	; (1a0032d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a003284:	6858      	ldr	r0, [r3, #4]
		break;
1a003286:	e018      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003288:	f000 f86a 	bl	1a003360 <Chip_Clock_GetMainPLLHz>
		break;
1a00328c:	e015      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00328e:	2100      	movs	r1, #0
1a003290:	f000 f89c 	bl	1a0033cc <Chip_Clock_GetDivRate>
		break;
1a003294:	e011      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003296:	2101      	movs	r1, #1
1a003298:	f000 f898 	bl	1a0033cc <Chip_Clock_GetDivRate>
		break;
1a00329c:	e00d      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00329e:	2102      	movs	r1, #2
1a0032a0:	f000 f894 	bl	1a0033cc <Chip_Clock_GetDivRate>
		break;
1a0032a4:	e009      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0032a6:	2103      	movs	r1, #3
1a0032a8:	f000 f890 	bl	1a0033cc <Chip_Clock_GetDivRate>
		break;
1a0032ac:	e005      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0032ae:	2104      	movs	r1, #4
1a0032b0:	f000 f88c 	bl	1a0033cc <Chip_Clock_GetDivRate>
		break;
1a0032b4:	e001      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0032b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0032ba:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0032bc:	4803      	ldr	r0, [pc, #12]	; (1a0032cc <Chip_Clock_GetClockInputHz+0xa4>)
1a0032be:	e7fc      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0032c0:	4806      	ldr	r0, [pc, #24]	; (1a0032dc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0032c2:	e7fa      	b.n	1a0032ba <Chip_Clock_GetClockInputHz+0x92>
1a0032c4:	00b71b00 	.word	0x00b71b00
1a0032c8:	40043000 	.word	0x40043000
1a0032cc:	017d7840 	.word	0x017d7840
1a0032d0:	1a004c2c 	.word	0x1a004c2c
1a0032d4:	1a004c58 	.word	0x1a004c58
1a0032d8:	10002b00 	.word	0x10002b00
1a0032dc:	02faf080 	.word	0x02faf080

1a0032e0 <Chip_Clock_CalcMainPLLValue>:
{
1a0032e0:	b538      	push	{r3, r4, r5, lr}
1a0032e2:	4605      	mov	r5, r0
1a0032e4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0032e6:	7908      	ldrb	r0, [r1, #4]
1a0032e8:	f7ff ff9e 	bl	1a003228 <Chip_Clock_GetClockInputHz>
1a0032ec:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0032ee:	4b19      	ldr	r3, [pc, #100]	; (1a003354 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0032f0:	442b      	add	r3, r5
1a0032f2:	4a19      	ldr	r2, [pc, #100]	; (1a003358 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0032f4:	4293      	cmp	r3, r2
1a0032f6:	d821      	bhi.n	1a00333c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0032f8:	b318      	cbz	r0, 1a003342 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0032fa:	2380      	movs	r3, #128	; 0x80
1a0032fc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0032fe:	2300      	movs	r3, #0
1a003300:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003302:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003304:	fbb5 f3f0 	udiv	r3, r5, r0
1a003308:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00330a:	4a14      	ldr	r2, [pc, #80]	; (1a00335c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00330c:	4295      	cmp	r5, r2
1a00330e:	d903      	bls.n	1a003318 <Chip_Clock_CalcMainPLLValue+0x38>
1a003310:	fb03 f000 	mul.w	r0, r3, r0
1a003314:	42a8      	cmp	r0, r5
1a003316:	d007      	beq.n	1a003328 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003318:	4621      	mov	r1, r4
1a00331a:	4628      	mov	r0, r5
1a00331c:	f7ff fe96 	bl	1a00304c <pll_get_frac>
		if (!ppll->nsel) {
1a003320:	68a3      	ldr	r3, [r4, #8]
1a003322:	b18b      	cbz	r3, 1a003348 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003324:	3b01      	subs	r3, #1
1a003326:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003328:	6923      	ldr	r3, [r4, #16]
1a00332a:	b183      	cbz	r3, 1a00334e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00332c:	68e2      	ldr	r2, [r4, #12]
1a00332e:	b10a      	cbz	r2, 1a003334 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003330:	3a01      	subs	r2, #1
1a003332:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003334:	3b01      	subs	r3, #1
1a003336:	6123      	str	r3, [r4, #16]
	return 0;
1a003338:	2000      	movs	r0, #0
}
1a00333a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00333c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003340:	e7fb      	b.n	1a00333a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003346:	e7f8      	b.n	1a00333a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00334c:	e7f5      	b.n	1a00333a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003352:	e7f2      	b.n	1a00333a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003354:	ff6b3a10 	.word	0xff6b3a10
1a003358:	0b940510 	.word	0x0b940510
1a00335c:	094c5eff 	.word	0x094c5eff

1a003360 <Chip_Clock_GetMainPLLHz>:
{
1a003360:	b530      	push	{r4, r5, lr}
1a003362:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003364:	4d17      	ldr	r5, [pc, #92]	; (1a0033c4 <Chip_Clock_GetMainPLLHz+0x64>)
1a003366:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003368:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00336c:	f7ff ff5c 	bl	1a003228 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003370:	4b15      	ldr	r3, [pc, #84]	; (1a0033c8 <Chip_Clock_GetMainPLLHz+0x68>)
1a003372:	681b      	ldr	r3, [r3, #0]
1a003374:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003376:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003378:	f013 0f01 	tst.w	r3, #1
1a00337c:	d01f      	beq.n	1a0033be <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00337e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003382:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003386:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00338a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00338e:	3301      	adds	r3, #1
	n = nsel + 1;
1a003390:	3201      	adds	r2, #1
	p = ptab[psel];
1a003392:	f10d 0c08 	add.w	ip, sp, #8
1a003396:	4461      	add	r1, ip
1a003398:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00339c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0033a0:	d108      	bne.n	1a0033b4 <Chip_Clock_GetMainPLLHz+0x54>
1a0033a2:	b93d      	cbnz	r5, 1a0033b4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0033a4:	0049      	lsls	r1, r1, #1
1a0033a6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0033aa:	fbb0 f0f2 	udiv	r0, r0, r2
1a0033ae:	fb00 f003 	mul.w	r0, r0, r3
1a0033b2:	e005      	b.n	1a0033c0 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0033b4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0033b8:	fb03 f000 	mul.w	r0, r3, r0
1a0033bc:	e000      	b.n	1a0033c0 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0033be:	2000      	movs	r0, #0
}
1a0033c0:	b003      	add	sp, #12
1a0033c2:	bd30      	pop	{r4, r5, pc}
1a0033c4:	40050000 	.word	0x40050000
1a0033c8:	1a004ce4 	.word	0x1a004ce4

1a0033cc <Chip_Clock_GetDivRate>:
{
1a0033cc:	b538      	push	{r3, r4, r5, lr}
1a0033ce:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0033d0:	4608      	mov	r0, r1
1a0033d2:	f7ff ff0d 	bl	1a0031f0 <Chip_Clock_GetDividerSource>
1a0033d6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0033d8:	4620      	mov	r0, r4
1a0033da:	f7ff ff17 	bl	1a00320c <Chip_Clock_GetDividerDivisor>
1a0033de:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0033e0:	4628      	mov	r0, r5
1a0033e2:	f7ff ff21 	bl	1a003228 <Chip_Clock_GetClockInputHz>
1a0033e6:	3401      	adds	r4, #1
}
1a0033e8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0033ec:	bd38      	pop	{r3, r4, r5, pc}
1a0033ee:	Address 0x000000001a0033ee is out of bounds.


1a0033f0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0033f0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0033f2:	f100 0416 	add.w	r4, r0, #22
1a0033f6:	00a4      	lsls	r4, r4, #2
1a0033f8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0033fc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003400:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003402:	281b      	cmp	r0, #27
1a003404:	d813      	bhi.n	1a00342e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003406:	2911      	cmp	r1, #17
1a003408:	d01a      	beq.n	1a003440 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00340a:	4d0e      	ldr	r5, [pc, #56]	; (1a003444 <Chip_Clock_SetBaseClock+0x54>)
1a00340c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00340e:	b10a      	cbz	r2, 1a003414 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003410:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003414:	b10b      	cbz	r3, 1a00341a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003416:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00341a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00341e:	3016      	adds	r0, #22
1a003420:	0080      	lsls	r0, r0, #2
1a003422:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003426:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00342a:	6045      	str	r5, [r0, #4]
1a00342c:	e008      	b.n	1a003440 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00342e:	f044 0401 	orr.w	r4, r4, #1
1a003432:	3016      	adds	r0, #22
1a003434:	0080      	lsls	r0, r0, #2
1a003436:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00343a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00343e:	6044      	str	r4, [r0, #4]
	}
}
1a003440:	bc30      	pop	{r4, r5}
1a003442:	4770      	bx	lr
1a003444:	e0fff7fe 	.word	0xe0fff7fe

1a003448 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003448:	281b      	cmp	r0, #27
1a00344a:	d80c      	bhi.n	1a003466 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00344c:	3016      	adds	r0, #22
1a00344e:	0080      	lsls	r0, r0, #2
1a003450:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003454:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003458:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00345a:	f010 0f01 	tst.w	r0, #1
1a00345e:	d104      	bne.n	1a00346a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003460:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003464:	4770      	bx	lr
		return CLKINPUT_PD;
1a003466:	2011      	movs	r0, #17
1a003468:	4770      	bx	lr
		return CLKINPUT_PD;
1a00346a:	2011      	movs	r0, #17
}
1a00346c:	4770      	bx	lr

1a00346e <Chip_Clock_GetBaseClocktHz>:
{
1a00346e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003470:	f7ff ffea 	bl	1a003448 <Chip_Clock_GetBaseClock>
1a003474:	f7ff fed8 	bl	1a003228 <Chip_Clock_GetClockInputHz>
}
1a003478:	bd08      	pop	{r3, pc}
1a00347a:	Address 0x000000001a00347a is out of bounds.


1a00347c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00347c:	b969      	cbnz	r1, 1a00349a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00347e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003480:	b10a      	cbz	r2, 1a003486 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003482:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003486:	2b02      	cmp	r3, #2
1a003488:	d009      	beq.n	1a00349e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00348a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00348e:	d209      	bcs.n	1a0034a4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003490:	3020      	adds	r0, #32
1a003492:	4b07      	ldr	r3, [pc, #28]	; (1a0034b0 <Chip_Clock_EnableOpts+0x34>)
1a003494:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003498:	4770      	bx	lr
		reg |= (1 << 1);
1a00349a:	2103      	movs	r1, #3
1a00349c:	e7f0      	b.n	1a003480 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00349e:	f041 0120 	orr.w	r1, r1, #32
1a0034a2:	e7f2      	b.n	1a00348a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0034a4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0034a8:	4b02      	ldr	r3, [pc, #8]	; (1a0034b4 <Chip_Clock_EnableOpts+0x38>)
1a0034aa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0034ae:	4770      	bx	lr
1a0034b0:	40051000 	.word	0x40051000
1a0034b4:	40052000 	.word	0x40052000

1a0034b8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0034b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0034bc:	d208      	bcs.n	1a0034d0 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0034be:	4a09      	ldr	r2, [pc, #36]	; (1a0034e4 <Chip_Clock_Enable+0x2c>)
1a0034c0:	3020      	adds	r0, #32
1a0034c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0034c6:	f043 0301 	orr.w	r3, r3, #1
1a0034ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0034ce:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0034d0:	4a05      	ldr	r2, [pc, #20]	; (1a0034e8 <Chip_Clock_Enable+0x30>)
1a0034d2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0034d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0034da:	f043 0301 	orr.w	r3, r3, #1
1a0034de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0034e2:	4770      	bx	lr
1a0034e4:	40051000 	.word	0x40051000
1a0034e8:	40052000 	.word	0x40052000

1a0034ec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0034ec:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0034ee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0034f2:	d309      	bcc.n	1a003508 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0034f4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0034f8:	4a0d      	ldr	r2, [pc, #52]	; (1a003530 <Chip_Clock_GetRate+0x44>)
1a0034fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0034fe:	f014 0f01 	tst.w	r4, #1
1a003502:	d107      	bne.n	1a003514 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003504:	2000      	movs	r0, #0
	}

	return rate;
}
1a003506:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003508:	f100 0320 	add.w	r3, r0, #32
1a00350c:	4a09      	ldr	r2, [pc, #36]	; (1a003534 <Chip_Clock_GetRate+0x48>)
1a00350e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003512:	e7f4      	b.n	1a0034fe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003514:	f7ff fe20 	bl	1a003158 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003518:	f7ff ffa9 	bl	1a00346e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00351c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003520:	d103      	bne.n	1a00352a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003522:	2301      	movs	r3, #1
		rate = rate / div;
1a003524:	fbb0 f0f3 	udiv	r0, r0, r3
1a003528:	e7ed      	b.n	1a003506 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00352a:	2302      	movs	r3, #2
1a00352c:	e7fa      	b.n	1a003524 <Chip_Clock_GetRate+0x38>
1a00352e:	bf00      	nop
1a003530:	40052000 	.word	0x40052000
1a003534:	40051000 	.word	0x40051000

1a003538 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003538:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00353a:	6843      	ldr	r3, [r0, #4]
1a00353c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003540:	2b30      	cmp	r3, #48	; 0x30
1a003542:	d04a      	beq.n	1a0035da <Chip_I2CM_XferHandler+0xa2>
1a003544:	d90f      	bls.n	1a003566 <Chip_I2CM_XferHandler+0x2e>
1a003546:	2b48      	cmp	r3, #72	; 0x48
1a003548:	d06a      	beq.n	1a003620 <Chip_I2CM_XferHandler+0xe8>
1a00354a:	d83a      	bhi.n	1a0035c2 <Chip_I2CM_XferHandler+0x8a>
1a00354c:	2b38      	cmp	r3, #56	; 0x38
1a00354e:	d06b      	beq.n	1a003628 <Chip_I2CM_XferHandler+0xf0>
1a003550:	2b40      	cmp	r3, #64	; 0x40
1a003552:	d13e      	bne.n	1a0035d2 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003554:	88ca      	ldrh	r2, [r1, #6]
1a003556:	2a01      	cmp	r2, #1
1a003558:	d95a      	bls.n	1a003610 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00355a:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a00355c:	b9b2      	cbnz	r2, 1a00358c <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00355e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003560:	f023 0310 	bic.w	r3, r3, #16
1a003564:	e012      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003566:	2b10      	cmp	r3, #16
1a003568:	d007      	beq.n	1a00357a <Chip_I2CM_XferHandler+0x42>
1a00356a:	d81c      	bhi.n	1a0035a6 <Chip_I2CM_XferHandler+0x6e>
1a00356c:	b91b      	cbnz	r3, 1a003576 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00356e:	2303      	movs	r3, #3
1a003570:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003572:	232c      	movs	r3, #44	; 0x2c
        break;
1a003574:	e00a      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003576:	2b08      	cmp	r3, #8
1a003578:	d12b      	bne.n	1a0035d2 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00357a:	780a      	ldrb	r2, [r1, #0]
1a00357c:	888b      	ldrh	r3, [r1, #4]
1a00357e:	fab3 f383 	clz	r3, r3
1a003582:	095b      	lsrs	r3, r3, #5
1a003584:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003588:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00358a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00358c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003590:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003592:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003596:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003598:	8848      	ldrh	r0, [r1, #2]
1a00359a:	38ff      	subs	r0, #255	; 0xff
1a00359c:	bf18      	it	ne
1a00359e:	2001      	movne	r0, #1
}
1a0035a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0035a4:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0035a6:	2b20      	cmp	r3, #32
1a0035a8:	d017      	beq.n	1a0035da <Chip_I2CM_XferHandler+0xa2>
1a0035aa:	2b28      	cmp	r3, #40	; 0x28
1a0035ac:	d001      	beq.n	1a0035b2 <Chip_I2CM_XferHandler+0x7a>
1a0035ae:	2b18      	cmp	r3, #24
1a0035b0:	d10f      	bne.n	1a0035d2 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0035b2:	888b      	ldrh	r3, [r1, #4]
1a0035b4:	b9cb      	cbnz	r3, 1a0035ea <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0035b6:	88cb      	ldrh	r3, [r1, #6]
1a0035b8:	2b00      	cmp	r3, #0
1a0035ba:	d139      	bne.n	1a003630 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0035bc:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0035be:	232c      	movs	r3, #44	; 0x2c
1a0035c0:	e7e4      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0035c2:	2b58      	cmp	r3, #88	; 0x58
1a0035c4:	d01b      	beq.n	1a0035fe <Chip_I2CM_XferHandler+0xc6>
1a0035c6:	2bf8      	cmp	r3, #248	; 0xf8
1a0035c8:	d101      	bne.n	1a0035ce <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0035ca:	2000      	movs	r0, #0
1a0035cc:	e7e8      	b.n	1a0035a0 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0035ce:	2b50      	cmp	r3, #80	; 0x50
1a0035d0:	d015      	beq.n	1a0035fe <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0035d2:	2301      	movs	r3, #1
1a0035d4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0035d6:	232c      	movs	r3, #44	; 0x2c
        break;
1a0035d8:	e7d8      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0035da:	784b      	ldrb	r3, [r1, #1]
1a0035dc:	f013 0f01 	tst.w	r3, #1
1a0035e0:	d1e7      	bne.n	1a0035b2 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0035e2:	2302      	movs	r3, #2
1a0035e4:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0035e6:	232c      	movs	r3, #44	; 0x2c
			break;
1a0035e8:	e7d0      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0035ea:	688b      	ldr	r3, [r1, #8]
1a0035ec:	1c5a      	adds	r2, r3, #1
1a0035ee:	608a      	str	r2, [r1, #8]
1a0035f0:	781b      	ldrb	r3, [r3, #0]
1a0035f2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0035f4:	888b      	ldrh	r3, [r1, #4]
1a0035f6:	3b01      	subs	r3, #1
1a0035f8:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a0035fa:	233c      	movs	r3, #60	; 0x3c
1a0035fc:	e7c6      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a0035fe:	6882      	ldr	r2, [r0, #8]
1a003600:	68cb      	ldr	r3, [r1, #12]
1a003602:	1c5c      	adds	r4, r3, #1
1a003604:	60cc      	str	r4, [r1, #12]
1a003606:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003608:	88cb      	ldrh	r3, [r1, #6]
1a00360a:	3b01      	subs	r3, #1
1a00360c:	80cb      	strh	r3, [r1, #6]
1a00360e:	e7a1      	b.n	1a003554 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003610:	784b      	ldrb	r3, [r1, #1]
1a003612:	f013 0f02 	tst.w	r3, #2
1a003616:	d101      	bne.n	1a00361c <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a003618:	233c      	movs	r3, #60	; 0x3c
1a00361a:	e79f      	b.n	1a00355c <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a00361c:	2338      	movs	r3, #56	; 0x38
1a00361e:	e79d      	b.n	1a00355c <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003620:	2304      	movs	r3, #4
1a003622:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003624:	232c      	movs	r3, #44	; 0x2c
		break;
1a003626:	e7b1      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003628:	2305      	movs	r3, #5
1a00362a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00362c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00362e:	e7ad      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a003630:	231c      	movs	r3, #28
1a003632:	e7ab      	b.n	1a00358c <Chip_I2CM_XferHandler+0x54>

1a003634 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003634:	23ff      	movs	r3, #255	; 0xff
1a003636:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003638:	232c      	movs	r3, #44	; 0x2c
1a00363a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a00363c:	2360      	movs	r3, #96	; 0x60
1a00363e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003640:	4770      	bx	lr

1a003642 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003642:	b538      	push	{r3, r4, r5, lr}
1a003644:	4604      	mov	r4, r0
1a003646:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003648:	f7ff fff4 	bl	1a003634 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a00364c:	2000      	movs	r0, #0

	while (ret == 0) {
1a00364e:	e007      	b.n	1a003660 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a003650:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003652:	f013 0f08 	tst.w	r3, #8
1a003656:	d0fb      	beq.n	1a003650 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003658:	4629      	mov	r1, r5
1a00365a:	4620      	mov	r0, r4
1a00365c:	f7ff ff6c 	bl	1a003538 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003660:	2800      	cmp	r0, #0
1a003662:	d0f5      	beq.n	1a003650 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003664:	bd38      	pop	{r3, r4, r5, pc}
1a003666:	Address 0x000000001a003666 is out of bounds.


1a003668 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003668:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00366a:	4b0f      	ldr	r3, [pc, #60]	; (1a0036a8 <fpuInit+0x40>)
1a00366c:	681b      	ldr	r3, [r3, #0]
1a00366e:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003670:	4b0e      	ldr	r3, [pc, #56]	; (1a0036ac <fpuInit+0x44>)
1a003672:	681b      	ldr	r3, [r3, #0]
1a003674:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003676:	9a02      	ldr	r2, [sp, #8]
1a003678:	4b0d      	ldr	r3, [pc, #52]	; (1a0036b0 <fpuInit+0x48>)
1a00367a:	429a      	cmp	r2, r3
1a00367c:	d00c      	beq.n	1a003698 <fpuInit+0x30>
1a00367e:	2300      	movs	r3, #0

	if (vfpPresent) {
1a003680:	b143      	cbz	r3, 1a003694 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a003682:	4a0c      	ldr	r2, [pc, #48]	; (1a0036b4 <fpuInit+0x4c>)
1a003684:	6813      	ldr	r3, [r2, #0]
1a003686:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003688:	9b03      	ldr	r3, [sp, #12]
1a00368a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00368e:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a003690:	9b03      	ldr	r3, [sp, #12]
1a003692:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a003694:	b004      	add	sp, #16
1a003696:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003698:	9a01      	ldr	r2, [sp, #4]
1a00369a:	4b07      	ldr	r3, [pc, #28]	; (1a0036b8 <fpuInit+0x50>)
1a00369c:	429a      	cmp	r2, r3
1a00369e:	d001      	beq.n	1a0036a4 <fpuInit+0x3c>
1a0036a0:	2300      	movs	r3, #0
1a0036a2:	e7ed      	b.n	1a003680 <fpuInit+0x18>
1a0036a4:	2301      	movs	r3, #1
1a0036a6:	e7eb      	b.n	1a003680 <fpuInit+0x18>
1a0036a8:	e000ef40 	.word	0xe000ef40
1a0036ac:	e000ef44 	.word	0xe000ef44
1a0036b0:	10110021 	.word	0x10110021
1a0036b4:	e000ed88 	.word	0xe000ed88
1a0036b8:	11000011 	.word	0x11000011

1a0036bc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0036bc:	4770      	bx	lr
1a0036be:	Address 0x000000001a0036be is out of bounds.


1a0036c0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0036c0:	b570      	push	{r4, r5, r6, lr}
1a0036c2:	b08a      	sub	sp, #40	; 0x28
1a0036c4:	4605      	mov	r5, r0
1a0036c6:	460e      	mov	r6, r1
1a0036c8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0036ca:	f242 7310 	movw	r3, #10000	; 0x2710
1a0036ce:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0036d0:	2806      	cmp	r0, #6
1a0036d2:	d018      	beq.n	1a003706 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0036d4:	2300      	movs	r3, #0
1a0036d6:	2201      	movs	r2, #1
1a0036d8:	4629      	mov	r1, r5
1a0036da:	2004      	movs	r0, #4
1a0036dc:	f7ff fe88 	bl	1a0033f0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0036e0:	4a49      	ldr	r2, [pc, #292]	; (1a003808 <Chip_SetupCoreClock+0x148>)
1a0036e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0036e4:	f043 0301 	orr.w	r3, r3, #1
1a0036e8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0036ea:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0036ee:	a901      	add	r1, sp, #4
1a0036f0:	4630      	mov	r0, r6
1a0036f2:	f7ff fdf5 	bl	1a0032e0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0036f6:	4b45      	ldr	r3, [pc, #276]	; (1a00380c <Chip_SetupCoreClock+0x14c>)
1a0036f8:	429e      	cmp	r6, r3
1a0036fa:	d916      	bls.n	1a00372a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0036fc:	9b01      	ldr	r3, [sp, #4]
1a0036fe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003702:	d003      	beq.n	1a00370c <Chip_SetupCoreClock+0x4c>
1a003704:	e7fe      	b.n	1a003704 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003706:	f7ff fd4d 	bl	1a0031a4 <Chip_Clock_EnableCrystal>
1a00370a:	e7e3      	b.n	1a0036d4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00370c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003710:	d005      	beq.n	1a00371e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003716:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003718:	2500      	movs	r5, #0
			direct = 1;
1a00371a:	2601      	movs	r6, #1
1a00371c:	e007      	b.n	1a00372e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00371e:	9b04      	ldr	r3, [sp, #16]
1a003720:	3301      	adds	r3, #1
1a003722:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003724:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003726:	2600      	movs	r6, #0
1a003728:	e001      	b.n	1a00372e <Chip_SetupCoreClock+0x6e>
1a00372a:	2500      	movs	r5, #0
1a00372c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00372e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003732:	9b01      	ldr	r3, [sp, #4]
1a003734:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003738:	9a05      	ldr	r2, [sp, #20]
1a00373a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00373e:	9a03      	ldr	r2, [sp, #12]
1a003740:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003744:	9a04      	ldr	r2, [sp, #16]
1a003746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00374a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00374e:	4a2e      	ldr	r2, [pc, #184]	; (1a003808 <Chip_SetupCoreClock+0x148>)
1a003750:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003752:	4b2d      	ldr	r3, [pc, #180]	; (1a003808 <Chip_SetupCoreClock+0x148>)
1a003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003756:	f013 0f01 	tst.w	r3, #1
1a00375a:	d0fa      	beq.n	1a003752 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00375c:	2300      	movs	r3, #0
1a00375e:	2201      	movs	r2, #1
1a003760:	2109      	movs	r1, #9
1a003762:	2004      	movs	r0, #4
1a003764:	f7ff fe44 	bl	1a0033f0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003768:	b1fe      	cbz	r6, 1a0037aa <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00376a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00376e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003770:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003772:	1e5a      	subs	r2, r3, #1
1a003774:	9209      	str	r2, [sp, #36]	; 0x24
1a003776:	2b00      	cmp	r3, #0
1a003778:	d1fa      	bne.n	1a003770 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00377a:	9b01      	ldr	r3, [sp, #4]
1a00377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003780:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003782:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003786:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00378a:	9a05      	ldr	r2, [sp, #20]
1a00378c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003790:	9a03      	ldr	r2, [sp, #12]
1a003792:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003796:	9a04      	ldr	r2, [sp, #16]
1a003798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00379c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0037a0:	4a19      	ldr	r2, [pc, #100]	; (1a003808 <Chip_SetupCoreClock+0x148>)
1a0037a2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0037a4:	b36c      	cbz	r4, 1a003802 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0037a6:	2400      	movs	r4, #0
1a0037a8:	e029      	b.n	1a0037fe <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0037aa:	2d00      	cmp	r5, #0
1a0037ac:	d0fa      	beq.n	1a0037a4 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0037ae:	f242 7310 	movw	r3, #10000	; 0x2710
1a0037b2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0037b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0037b6:	1e5a      	subs	r2, r3, #1
1a0037b8:	9209      	str	r2, [sp, #36]	; 0x24
1a0037ba:	2b00      	cmp	r3, #0
1a0037bc:	d1fa      	bne.n	1a0037b4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0037be:	9b04      	ldr	r3, [sp, #16]
1a0037c0:	1e5a      	subs	r2, r3, #1
1a0037c2:	9204      	str	r2, [sp, #16]
1a0037c4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0037c8:	9b01      	ldr	r3, [sp, #4]
1a0037ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0037ce:	9905      	ldr	r1, [sp, #20]
1a0037d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0037d4:	9903      	ldr	r1, [sp, #12]
1a0037d6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0037da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0037de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0037e2:	4a09      	ldr	r2, [pc, #36]	; (1a003808 <Chip_SetupCoreClock+0x148>)
1a0037e4:	6453      	str	r3, [r2, #68]	; 0x44
1a0037e6:	e7dd      	b.n	1a0037a4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0037e8:	4809      	ldr	r0, [pc, #36]	; (1a003810 <Chip_SetupCoreClock+0x150>)
1a0037ea:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0037ee:	78cb      	ldrb	r3, [r1, #3]
1a0037f0:	788a      	ldrb	r2, [r1, #2]
1a0037f2:	7849      	ldrb	r1, [r1, #1]
1a0037f4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0037f8:	f7ff fdfa 	bl	1a0033f0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0037fc:	3401      	adds	r4, #1
1a0037fe:	2c11      	cmp	r4, #17
1a003800:	d9f2      	bls.n	1a0037e8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003802:	b00a      	add	sp, #40	; 0x28
1a003804:	bd70      	pop	{r4, r5, r6, pc}
1a003806:	bf00      	nop
1a003808:	40050000 	.word	0x40050000
1a00380c:	068e7780 	.word	0x068e7780
1a003810:	1a004d5c 	.word	0x1a004d5c

1a003814 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003814:	2901      	cmp	r1, #1
1a003816:	d000      	beq.n	1a00381a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003818:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00381a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00381e:	0082      	lsls	r2, r0, #2
1a003820:	4b03      	ldr	r3, [pc, #12]	; (1a003830 <Chip_I2C_EventHandler+0x1c>)
1a003822:	4413      	add	r3, r2
1a003824:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003826:	7d13      	ldrb	r3, [r2, #20]
1a003828:	b2db      	uxtb	r3, r3
1a00382a:	2b04      	cmp	r3, #4
1a00382c:	d0fb      	beq.n	1a003826 <Chip_I2C_EventHandler+0x12>
1a00382e:	e7f3      	b.n	1a003818 <Chip_I2C_EventHandler+0x4>
1a003830:	1000004c 	.word	0x1000004c

1a003834 <handleMasterXferState>:
{
1a003834:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003836:	6843      	ldr	r3, [r0, #4]
1a003838:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a00383c:	2b58      	cmp	r3, #88	; 0x58
1a00383e:	d87e      	bhi.n	1a00393e <handleMasterXferState+0x10a>
1a003840:	e8df f003 	tbb	[pc, r3]
1a003844:	7d7d7d79 	.word	0x7d7d7d79
1a003848:	7d7d7d7d 	.word	0x7d7d7d7d
1a00384c:	7d7d7d2f 	.word	0x7d7d7d2f
1a003850:	7d7d7d7d 	.word	0x7d7d7d7d
1a003854:	7d7d7d2f 	.word	0x7d7d7d2f
1a003858:	7d7d7d7d 	.word	0x7d7d7d7d
1a00385c:	7d7d7d39 	.word	0x7d7d7d39
1a003860:	7d7d7d7d 	.word	0x7d7d7d7d
1a003864:	7d7d7d6d 	.word	0x7d7d7d6d
1a003868:	7d7d7d7d 	.word	0x7d7d7d7d
1a00386c:	7d7d7d39 	.word	0x7d7d7d39
1a003870:	7d7d7d7d 	.word	0x7d7d7d7d
1a003874:	7d7d7d71 	.word	0x7d7d7d71
1a003878:	7d7d7d7d 	.word	0x7d7d7d7d
1a00387c:	7d7d7d75 	.word	0x7d7d7d75
1a003880:	7d7d7d7d 	.word	0x7d7d7d7d
1a003884:	7d7d7d6b 	.word	0x7d7d7d6b
1a003888:	7d7d7d7d 	.word	0x7d7d7d7d
1a00388c:	7d7d7d6d 	.word	0x7d7d7d6d
1a003890:	7d7d7d7d 	.word	0x7d7d7d7d
1a003894:	7d7d7d2d 	.word	0x7d7d7d2d
1a003898:	7d7d7d7d 	.word	0x7d7d7d7d
1a00389c:	4f          	.byte	0x4f
1a00389d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00389e:	233c      	movs	r3, #60	; 0x3c
1a0038a0:	e020      	b.n	1a0038e4 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0038a2:	780a      	ldrb	r2, [r1, #0]
1a0038a4:	688b      	ldr	r3, [r1, #8]
1a0038a6:	fab3 f383 	clz	r3, r3
1a0038aa:	095b      	lsrs	r3, r3, #5
1a0038ac:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0038b0:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0038b2:	233c      	movs	r3, #60	; 0x3c
		break;
1a0038b4:	e023      	b.n	1a0038fe <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0038b6:	688b      	ldr	r3, [r1, #8]
1a0038b8:	b94b      	cbnz	r3, 1a0038ce <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0038ba:	690b      	ldr	r3, [r1, #16]
1a0038bc:	b123      	cbz	r3, 1a0038c8 <handleMasterXferState+0x94>
1a0038be:	f06f 0320 	mvn.w	r3, #32
1a0038c2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0038c6:	e01a      	b.n	1a0038fe <handleMasterXferState+0xca>
1a0038c8:	f06f 0310 	mvn.w	r3, #16
1a0038cc:	e7f9      	b.n	1a0038c2 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0038ce:	684b      	ldr	r3, [r1, #4]
1a0038d0:	1c5a      	adds	r2, r3, #1
1a0038d2:	604a      	str	r2, [r1, #4]
1a0038d4:	781b      	ldrb	r3, [r3, #0]
1a0038d6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0038d8:	688b      	ldr	r3, [r1, #8]
1a0038da:	3b01      	subs	r3, #1
1a0038dc:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0038de:	233c      	movs	r3, #60	; 0x3c
1a0038e0:	e00d      	b.n	1a0038fe <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0038e2:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0038e4:	6884      	ldr	r4, [r0, #8]
1a0038e6:	68ca      	ldr	r2, [r1, #12]
1a0038e8:	1c55      	adds	r5, r2, #1
1a0038ea:	60cd      	str	r5, [r1, #12]
1a0038ec:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0038ee:	690a      	ldr	r2, [r1, #16]
1a0038f0:	3a01      	subs	r2, #1
1a0038f2:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0038f4:	690a      	ldr	r2, [r1, #16]
1a0038f6:	2a01      	cmp	r2, #1
1a0038f8:	dd01      	ble.n	1a0038fe <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0038fa:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0038fe:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003902:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003904:	f023 0210 	bic.w	r2, r3, #16
1a003908:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a00390a:	f013 0f10 	tst.w	r3, #16
1a00390e:	d018      	beq.n	1a003942 <handleMasterXferState+0x10e>
1a003910:	7d0b      	ldrb	r3, [r1, #20]
1a003912:	2b02      	cmp	r3, #2
1a003914:	d015      	beq.n	1a003942 <handleMasterXferState+0x10e>
	return 1;
1a003916:	2001      	movs	r0, #1
1a003918:	e017      	b.n	1a00394a <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a00391a:	233c      	movs	r3, #60	; 0x3c
1a00391c:	e7ea      	b.n	1a0038f4 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00391e:	2305      	movs	r3, #5
1a003920:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003922:	232c      	movs	r3, #44	; 0x2c
		break;
1a003924:	e7eb      	b.n	1a0038fe <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003926:	2301      	movs	r3, #1
1a003928:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00392a:	232c      	movs	r3, #44	; 0x2c
		break;
1a00392c:	e7e7      	b.n	1a0038fe <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00392e:	2302      	movs	r3, #2
1a003930:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003932:	233c      	movs	r3, #60	; 0x3c
		break;
1a003934:	e7e3      	b.n	1a0038fe <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003936:	2303      	movs	r3, #3
1a003938:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00393a:	232c      	movs	r3, #44	; 0x2c
1a00393c:	e7df      	b.n	1a0038fe <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00393e:	233c      	movs	r3, #60	; 0x3c
1a003940:	e7dd      	b.n	1a0038fe <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003942:	7d0b      	ldrb	r3, [r1, #20]
1a003944:	2b04      	cmp	r3, #4
1a003946:	d002      	beq.n	1a00394e <handleMasterXferState+0x11a>
		return 0;
1a003948:	2000      	movs	r0, #0
}
1a00394a:	bc30      	pop	{r4, r5}
1a00394c:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a00394e:	2000      	movs	r0, #0
1a003950:	7508      	strb	r0, [r1, #20]
1a003952:	e7fa      	b.n	1a00394a <handleMasterXferState+0x116>

1a003954 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003954:	b570      	push	{r4, r5, r6, lr}
1a003956:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003958:	4e06      	ldr	r6, [pc, #24]	; (1a003974 <Chip_I2C_Init+0x20>)
1a00395a:	00c4      	lsls	r4, r0, #3
1a00395c:	1a22      	subs	r2, r4, r0
1a00395e:	0093      	lsls	r3, r2, #2
1a003960:	4433      	add	r3, r6
1a003962:	8898      	ldrh	r0, [r3, #4]
1a003964:	f7ff fda8 	bl	1a0034b8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003968:	1b64      	subs	r4, r4, r5
1a00396a:	00a3      	lsls	r3, r4, #2
1a00396c:	58f3      	ldr	r3, [r6, r3]
1a00396e:	226c      	movs	r2, #108	; 0x6c
1a003970:	619a      	str	r2, [r3, #24]
}
1a003972:	bd70      	pop	{r4, r5, r6, pc}
1a003974:	1000004c 	.word	0x1000004c

1a003978 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00397c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00397e:	4e0b      	ldr	r6, [pc, #44]	; (1a0039ac <Chip_I2C_SetClockRate+0x34>)
1a003980:	00c5      	lsls	r5, r0, #3
1a003982:	1a2b      	subs	r3, r5, r0
1a003984:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003988:	eb06 0308 	add.w	r3, r6, r8
1a00398c:	8898      	ldrh	r0, [r3, #4]
1a00398e:	f7ff fdad 	bl	1a0034ec <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003992:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003996:	f856 3008 	ldr.w	r3, [r6, r8]
1a00399a:	0842      	lsrs	r2, r0, #1
1a00399c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00399e:	f856 3008 	ldr.w	r3, [r6, r8]
1a0039a2:	691a      	ldr	r2, [r3, #16]
1a0039a4:	1a80      	subs	r0, r0, r2
1a0039a6:	6158      	str	r0, [r3, #20]
}
1a0039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0039ac:	1000004c 	.word	0x1000004c

1a0039b0 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0039b0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0039b4:	009a      	lsls	r2, r3, #2
1a0039b6:	4b09      	ldr	r3, [pc, #36]	; (1a0039dc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0039b8:	4413      	add	r3, r2
1a0039ba:	691b      	ldr	r3, [r3, #16]
1a0039bc:	b153      	cbz	r3, 1a0039d4 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0039be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0039c2:	0082      	lsls	r2, r0, #2
1a0039c4:	4b05      	ldr	r3, [pc, #20]	; (1a0039dc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0039c6:	4413      	add	r3, r2
1a0039c8:	6898      	ldr	r0, [r3, #8]
}
1a0039ca:	4288      	cmp	r0, r1
1a0039cc:	bf14      	ite	ne
1a0039ce:	2000      	movne	r0, #0
1a0039d0:	2001      	moveq	r0, #1
1a0039d2:	4770      	bx	lr
		iic->mEvent = event;
1a0039d4:	4b01      	ldr	r3, [pc, #4]	; (1a0039dc <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0039d6:	4413      	add	r3, r2
1a0039d8:	6099      	str	r1, [r3, #8]
1a0039da:	e7f0      	b.n	1a0039be <Chip_I2C_SetMasterEventHandler+0xe>
1a0039dc:	1000004c 	.word	0x1000004c

1a0039e0 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0039e0:	b510      	push	{r4, lr}
1a0039e2:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0039e4:	4809      	ldr	r0, [pc, #36]	; (1a003a0c <Chip_I2C_MasterStateHandler+0x2c>)
1a0039e6:	00e3      	lsls	r3, r4, #3
1a0039e8:	1b1b      	subs	r3, r3, r4
1a0039ea:	009a      	lsls	r2, r3, #2
1a0039ec:	1883      	adds	r3, r0, r2
1a0039ee:	6919      	ldr	r1, [r3, #16]
1a0039f0:	5880      	ldr	r0, [r0, r2]
1a0039f2:	f7ff ff1f 	bl	1a003834 <handleMasterXferState>
1a0039f6:	b940      	cbnz	r0, 1a003a0a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0039f8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0039fc:	009a      	lsls	r2, r3, #2
1a0039fe:	4b03      	ldr	r3, [pc, #12]	; (1a003a0c <Chip_I2C_MasterStateHandler+0x2c>)
1a003a00:	4413      	add	r3, r2
1a003a02:	689b      	ldr	r3, [r3, #8]
1a003a04:	2102      	movs	r1, #2
1a003a06:	4620      	mov	r0, r4
1a003a08:	4798      	blx	r3
	}
}
1a003a0a:	bd10      	pop	{r4, pc}
1a003a0c:	1000004c 	.word	0x1000004c

1a003a10 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003a10:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003a14:	0083      	lsls	r3, r0, #2
1a003a16:	4a03      	ldr	r2, [pc, #12]	; (1a003a24 <Chip_I2C_IsStateChanged+0x14>)
1a003a18:	58d3      	ldr	r3, [r2, r3]
1a003a1a:	6818      	ldr	r0, [r3, #0]
}
1a003a1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003a20:	4770      	bx	lr
1a003a22:	bf00      	nop
1a003a24:	1000004c 	.word	0x1000004c

1a003a28 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003a28:	2901      	cmp	r1, #1
1a003a2a:	d000      	beq.n	1a003a2e <Chip_I2C_EventHandlerPolling+0x6>
1a003a2c:	4770      	bx	lr
{
1a003a2e:	b538      	push	{r3, r4, r5, lr}
1a003a30:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a003a32:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003a36:	009a      	lsls	r2, r3, #2
1a003a38:	4b08      	ldr	r3, [pc, #32]	; (1a003a5c <Chip_I2C_EventHandlerPolling+0x34>)
1a003a3a:	4413      	add	r3, r2
1a003a3c:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003a3e:	7d2b      	ldrb	r3, [r5, #20]
1a003a40:	b2db      	uxtb	r3, r3
1a003a42:	2b04      	cmp	r3, #4
1a003a44:	d108      	bne.n	1a003a58 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a003a46:	4620      	mov	r0, r4
1a003a48:	f7ff ffe2 	bl	1a003a10 <Chip_I2C_IsStateChanged>
1a003a4c:	2800      	cmp	r0, #0
1a003a4e:	d0f6      	beq.n	1a003a3e <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a003a50:	4620      	mov	r0, r4
1a003a52:	f7ff ffc5 	bl	1a0039e0 <Chip_I2C_MasterStateHandler>
1a003a56:	e7f2      	b.n	1a003a3e <Chip_I2C_EventHandlerPolling+0x16>
}
1a003a58:	bd38      	pop	{r3, r4, r5, pc}
1a003a5a:	bf00      	nop
1a003a5c:	1000004c 	.word	0x1000004c

1a003a60 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003a60:	4b03      	ldr	r3, [pc, #12]	; (1a003a70 <Chip_SSP_GetClockIndex+0x10>)
1a003a62:	4298      	cmp	r0, r3
1a003a64:	d001      	beq.n	1a003a6a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003a66:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003a68:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003a6a:	20a5      	movs	r0, #165	; 0xa5
1a003a6c:	4770      	bx	lr
1a003a6e:	bf00      	nop
1a003a70:	400c5000 	.word	0x400c5000

1a003a74 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003a74:	4b04      	ldr	r3, [pc, #16]	; (1a003a88 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003a76:	4298      	cmp	r0, r3
1a003a78:	d002      	beq.n	1a003a80 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003a7a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003a7e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003a80:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003a84:	4770      	bx	lr
1a003a86:	bf00      	nop
1a003a88:	400c5000 	.word	0x400c5000

1a003a8c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003a8c:	6803      	ldr	r3, [r0, #0]
1a003a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003a92:	0209      	lsls	r1, r1, #8
1a003a94:	b289      	uxth	r1, r1
1a003a96:	4319      	orrs	r1, r3
1a003a98:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003a9a:	6102      	str	r2, [r0, #16]
}
1a003a9c:	4770      	bx	lr

1a003a9e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003a9e:	b570      	push	{r4, r5, r6, lr}
1a003aa0:	4606      	mov	r6, r0
1a003aa2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003aa4:	f7ff ffe6 	bl	1a003a74 <Chip_SSP_GetPeriphClockIndex>
1a003aa8:	f7ff fd20 	bl	1a0034ec <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003aac:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003ab2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003ab4:	e000      	b.n	1a003ab8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003ab6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003ab8:	42ab      	cmp	r3, r5
1a003aba:	d90b      	bls.n	1a003ad4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003abc:	1c4c      	adds	r4, r1, #1
1a003abe:	fb02 f304 	mul.w	r3, r2, r4
1a003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003ac6:	429d      	cmp	r5, r3
1a003ac8:	d2f6      	bcs.n	1a003ab8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003aca:	2cff      	cmp	r4, #255	; 0xff
1a003acc:	d9f3      	bls.n	1a003ab6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003ace:	3202      	adds	r2, #2
				cr0_div = 0;
1a003ad0:	2100      	movs	r1, #0
1a003ad2:	e7f1      	b.n	1a003ab8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003ad4:	4630      	mov	r0, r6
1a003ad6:	f7ff ffd9 	bl	1a003a8c <Chip_SSP_SetClockRate>
}
1a003ada:	bd70      	pop	{r4, r5, r6, pc}

1a003adc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003adc:	b510      	push	{r4, lr}
1a003ade:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003ae0:	f7ff ffbe 	bl	1a003a60 <Chip_SSP_GetClockIndex>
1a003ae4:	f7ff fce8 	bl	1a0034b8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003ae8:	4620      	mov	r0, r4
1a003aea:	f7ff ffc3 	bl	1a003a74 <Chip_SSP_GetPeriphClockIndex>
1a003aee:	f7ff fce3 	bl	1a0034b8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003af2:	6863      	ldr	r3, [r4, #4]
1a003af4:	f023 0304 	bic.w	r3, r3, #4
1a003af8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003afa:	6823      	ldr	r3, [r4, #0]
1a003afc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003b00:	f043 0307 	orr.w	r3, r3, #7
1a003b04:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003b06:	4902      	ldr	r1, [pc, #8]	; (1a003b10 <Chip_SSP_Init+0x34>)
1a003b08:	4620      	mov	r0, r4
1a003b0a:	f7ff ffc8 	bl	1a003a9e <Chip_SSP_SetBitRate>
}
1a003b0e:	bd10      	pop	{r4, pc}
1a003b10:	000186a0 	.word	0x000186a0

1a003b14 <ResetISR>:
void ResetISR(void) {
1a003b14:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a003b16:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003b18:	4b18      	ldr	r3, [pc, #96]	; (1a003b7c <ResetISR+0x68>)
1a003b1a:	4a19      	ldr	r2, [pc, #100]	; (1a003b80 <ResetISR+0x6c>)
1a003b1c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003b1e:	3304      	adds	r3, #4
1a003b20:	4a18      	ldr	r2, [pc, #96]	; (1a003b84 <ResetISR+0x70>)
1a003b22:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003b24:	2300      	movs	r3, #0
1a003b26:	e005      	b.n	1a003b34 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003b28:	4a17      	ldr	r2, [pc, #92]	; (1a003b88 <ResetISR+0x74>)
1a003b2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a003b2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003b32:	3301      	adds	r3, #1
1a003b34:	2b07      	cmp	r3, #7
1a003b36:	d9f7      	bls.n	1a003b28 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a003b38:	b662      	cpsie	i
    SystemInit();
1a003b3a:	f7ff f88d 	bl	1a002c58 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a003b3e:	4b13      	ldr	r3, [pc, #76]	; (1a003b8c <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003b40:	e007      	b.n	1a003b52 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a003b42:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003b46:	689a      	ldr	r2, [r3, #8]
1a003b48:	6859      	ldr	r1, [r3, #4]
1a003b4a:	6818      	ldr	r0, [r3, #0]
1a003b4c:	f7fc fb1e 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a003b50:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003b52:	4a0f      	ldr	r2, [pc, #60]	; (1a003b90 <ResetISR+0x7c>)
1a003b54:	4293      	cmp	r3, r2
1a003b56:	d3f4      	bcc.n	1a003b42 <ResetISR+0x2e>
1a003b58:	e006      	b.n	1a003b68 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a003b5a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a003b5c:	6859      	ldr	r1, [r3, #4]
1a003b5e:	f854 0b08 	ldr.w	r0, [r4], #8
1a003b62:	f7fc fb22 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a003b66:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a003b68:	4a0a      	ldr	r2, [pc, #40]	; (1a003b94 <ResetISR+0x80>)
1a003b6a:	4293      	cmp	r3, r2
1a003b6c:	d3f5      	bcc.n	1a003b5a <ResetISR+0x46>
    __libc_init_array();
1a003b6e:	f000 fe83 	bl	1a004878 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a003b72:	f7ff f85b 	bl	1a002c2c <Board_Init>
    main();
1a003b76:	f7fc fceb 	bl	1a000550 <main>
1a003b7a:	e7fe      	b.n	1a003b7a <ResetISR+0x66>
1a003b7c:	40053100 	.word	0x40053100
1a003b80:	10df1000 	.word	0x10df1000
1a003b84:	01dff7ff 	.word	0x01dff7ff
1a003b88:	e000e280 	.word	0xe000e280
1a003b8c:	1a000114 	.word	0x1a000114
1a003b90:	1a000150 	.word	0x1a000150
1a003b94:	1a000178 	.word	0x1a000178

1a003b98 <_init>:
void _init(void) {}
1a003b98:	4770      	bx	lr
1a003b9a:	Address 0x000000001a003b9a is out of bounds.


1a003b9c <modf>:
1a003b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ba0:	ec55 4b10 	vmov	r4, r5, d0
1a003ba4:	f3c5 520a 	ubfx	r2, r5, #20, #11
1a003ba8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
1a003bac:	2b13      	cmp	r3, #19
1a003bae:	4606      	mov	r6, r0
1a003bb0:	dc19      	bgt.n	1a003be6 <modf+0x4a>
1a003bb2:	2b00      	cmp	r3, #0
1a003bb4:	db38      	blt.n	1a003c28 <modf+0x8c>
1a003bb6:	4a24      	ldr	r2, [pc, #144]	; (1a003c48 <modf+0xac>)
1a003bb8:	fa42 f303 	asr.w	r3, r2, r3
1a003bbc:	ea05 0203 	and.w	r2, r5, r3
1a003bc0:	ea52 0004 	orrs.w	r0, r2, r4
1a003bc4:	d027      	beq.n	1a003c16 <modf+0x7a>
1a003bc6:	f04f 0800 	mov.w	r8, #0
1a003bca:	ea25 0903 	bic.w	r9, r5, r3
1a003bce:	4642      	mov	r2, r8
1a003bd0:	464b      	mov	r3, r9
1a003bd2:	4620      	mov	r0, r4
1a003bd4:	4629      	mov	r1, r5
1a003bd6:	e9c6 2300 	strd	r2, r3, [r6]
1a003bda:	f000 f83b 	bl	1a003c54 <__aeabi_dsub>
1a003bde:	ec41 0b10 	vmov	d0, r0, r1
1a003be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003be6:	2b33      	cmp	r3, #51	; 0x33
1a003be8:	dc0c      	bgt.n	1a003c04 <modf+0x68>
1a003bea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
1a003bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a003bf2:	fa23 f202 	lsr.w	r2, r3, r2
1a003bf6:	ea12 0704 	ands.w	r7, r2, r4
1a003bfa:	d01c      	beq.n	1a003c36 <modf+0x9a>
1a003bfc:	46a9      	mov	r9, r5
1a003bfe:	ea24 0802 	bic.w	r8, r4, r2
1a003c02:	e7e4      	b.n	1a003bce <modf+0x32>
1a003c04:	2200      	movs	r2, #0
1a003c06:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a003c0a:	ed86 0b00 	vstr	d0, [r6]
1a003c0e:	ec43 2b10 	vmov	d0, r2, r3
1a003c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003c16:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a003c1a:	4602      	mov	r2, r0
1a003c1c:	ed86 0b00 	vstr	d0, [r6]
1a003c20:	ec43 2b10 	vmov	d0, r2, r3
1a003c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003c28:	2200      	movs	r2, #0
1a003c2a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a003c2e:	e9c6 2300 	strd	r2, r3, [r6]
1a003c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003c36:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
1a003c3a:	463a      	mov	r2, r7
1a003c3c:	ed86 0b00 	vstr	d0, [r6]
1a003c40:	ec43 2b10 	vmov	d0, r2, r3
1a003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003c48:	000fffff 	.word	0x000fffff

1a003c4c <__aeabi_drsub>:
1a003c4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003c50:	e002      	b.n	1a003c58 <__adddf3>
1a003c52:	bf00      	nop

1a003c54 <__aeabi_dsub>:
1a003c54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003c58 <__adddf3>:
1a003c58:	b530      	push	{r4, r5, lr}
1a003c5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a003c5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a003c62:	ea94 0f05 	teq	r4, r5
1a003c66:	bf08      	it	eq
1a003c68:	ea90 0f02 	teqeq	r0, r2
1a003c6c:	bf1f      	itttt	ne
1a003c6e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a003c72:	ea55 0c02 	orrsne.w	ip, r5, r2
1a003c76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a003c7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003c7e:	f000 80e2 	beq.w	1a003e46 <__adddf3+0x1ee>
1a003c82:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a003c86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a003c8a:	bfb8      	it	lt
1a003c8c:	426d      	neglt	r5, r5
1a003c8e:	dd0c      	ble.n	1a003caa <__adddf3+0x52>
1a003c90:	442c      	add	r4, r5
1a003c92:	ea80 0202 	eor.w	r2, r0, r2
1a003c96:	ea81 0303 	eor.w	r3, r1, r3
1a003c9a:	ea82 0000 	eor.w	r0, r2, r0
1a003c9e:	ea83 0101 	eor.w	r1, r3, r1
1a003ca2:	ea80 0202 	eor.w	r2, r0, r2
1a003ca6:	ea81 0303 	eor.w	r3, r1, r3
1a003caa:	2d36      	cmp	r5, #54	; 0x36
1a003cac:	bf88      	it	hi
1a003cae:	bd30      	pophi	{r4, r5, pc}
1a003cb0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003cb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003cb8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a003cbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a003cc0:	d002      	beq.n	1a003cc8 <__adddf3+0x70>
1a003cc2:	4240      	negs	r0, r0
1a003cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003cc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a003ccc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003cd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a003cd4:	d002      	beq.n	1a003cdc <__adddf3+0x84>
1a003cd6:	4252      	negs	r2, r2
1a003cd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003cdc:	ea94 0f05 	teq	r4, r5
1a003ce0:	f000 80a7 	beq.w	1a003e32 <__adddf3+0x1da>
1a003ce4:	f1a4 0401 	sub.w	r4, r4, #1
1a003ce8:	f1d5 0e20 	rsbs	lr, r5, #32
1a003cec:	db0d      	blt.n	1a003d0a <__adddf3+0xb2>
1a003cee:	fa02 fc0e 	lsl.w	ip, r2, lr
1a003cf2:	fa22 f205 	lsr.w	r2, r2, r5
1a003cf6:	1880      	adds	r0, r0, r2
1a003cf8:	f141 0100 	adc.w	r1, r1, #0
1a003cfc:	fa03 f20e 	lsl.w	r2, r3, lr
1a003d00:	1880      	adds	r0, r0, r2
1a003d02:	fa43 f305 	asr.w	r3, r3, r5
1a003d06:	4159      	adcs	r1, r3
1a003d08:	e00e      	b.n	1a003d28 <__adddf3+0xd0>
1a003d0a:	f1a5 0520 	sub.w	r5, r5, #32
1a003d0e:	f10e 0e20 	add.w	lr, lr, #32
1a003d12:	2a01      	cmp	r2, #1
1a003d14:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003d18:	bf28      	it	cs
1a003d1a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a003d1e:	fa43 f305 	asr.w	r3, r3, r5
1a003d22:	18c0      	adds	r0, r0, r3
1a003d24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003d2c:	d507      	bpl.n	1a003d3e <__adddf3+0xe6>
1a003d2e:	f04f 0e00 	mov.w	lr, #0
1a003d32:	f1dc 0c00 	rsbs	ip, ip, #0
1a003d36:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003d3a:	eb6e 0101 	sbc.w	r1, lr, r1
1a003d3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a003d42:	d31b      	bcc.n	1a003d7c <__adddf3+0x124>
1a003d44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003d48:	d30c      	bcc.n	1a003d64 <__adddf3+0x10c>
1a003d4a:	0849      	lsrs	r1, r1, #1
1a003d4c:	ea5f 0030 	movs.w	r0, r0, rrx
1a003d50:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a003d54:	f104 0401 	add.w	r4, r4, #1
1a003d58:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a003d5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003d60:	f080 809a 	bcs.w	1a003e98 <__adddf3+0x240>
1a003d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003d68:	bf08      	it	eq
1a003d6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003d6e:	f150 0000 	adcs.w	r0, r0, #0
1a003d72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003d76:	ea41 0105 	orr.w	r1, r1, r5
1a003d7a:	bd30      	pop	{r4, r5, pc}
1a003d7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003d80:	4140      	adcs	r0, r0
1a003d82:	eb41 0101 	adc.w	r1, r1, r1
1a003d86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003d8a:	f1a4 0401 	sub.w	r4, r4, #1
1a003d8e:	d1e9      	bne.n	1a003d64 <__adddf3+0x10c>
1a003d90:	f091 0f00 	teq	r1, #0
1a003d94:	bf04      	itt	eq
1a003d96:	4601      	moveq	r1, r0
1a003d98:	2000      	moveq	r0, #0
1a003d9a:	fab1 f381 	clz	r3, r1
1a003d9e:	bf08      	it	eq
1a003da0:	3320      	addeq	r3, #32
1a003da2:	f1a3 030b 	sub.w	r3, r3, #11
1a003da6:	f1b3 0220 	subs.w	r2, r3, #32
1a003daa:	da0c      	bge.n	1a003dc6 <__adddf3+0x16e>
1a003dac:	320c      	adds	r2, #12
1a003dae:	dd08      	ble.n	1a003dc2 <__adddf3+0x16a>
1a003db0:	f102 0c14 	add.w	ip, r2, #20
1a003db4:	f1c2 020c 	rsb	r2, r2, #12
1a003db8:	fa01 f00c 	lsl.w	r0, r1, ip
1a003dbc:	fa21 f102 	lsr.w	r1, r1, r2
1a003dc0:	e00c      	b.n	1a003ddc <__adddf3+0x184>
1a003dc2:	f102 0214 	add.w	r2, r2, #20
1a003dc6:	bfd8      	it	le
1a003dc8:	f1c2 0c20 	rsble	ip, r2, #32
1a003dcc:	fa01 f102 	lsl.w	r1, r1, r2
1a003dd0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003dd4:	bfdc      	itt	le
1a003dd6:	ea41 010c 	orrle.w	r1, r1, ip
1a003dda:	4090      	lslle	r0, r2
1a003ddc:	1ae4      	subs	r4, r4, r3
1a003dde:	bfa2      	ittt	ge
1a003de0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a003de4:	4329      	orrge	r1, r5
1a003de6:	bd30      	popge	{r4, r5, pc}
1a003de8:	ea6f 0404 	mvn.w	r4, r4
1a003dec:	3c1f      	subs	r4, #31
1a003dee:	da1c      	bge.n	1a003e2a <__adddf3+0x1d2>
1a003df0:	340c      	adds	r4, #12
1a003df2:	dc0e      	bgt.n	1a003e12 <__adddf3+0x1ba>
1a003df4:	f104 0414 	add.w	r4, r4, #20
1a003df8:	f1c4 0220 	rsb	r2, r4, #32
1a003dfc:	fa20 f004 	lsr.w	r0, r0, r4
1a003e00:	fa01 f302 	lsl.w	r3, r1, r2
1a003e04:	ea40 0003 	orr.w	r0, r0, r3
1a003e08:	fa21 f304 	lsr.w	r3, r1, r4
1a003e0c:	ea45 0103 	orr.w	r1, r5, r3
1a003e10:	bd30      	pop	{r4, r5, pc}
1a003e12:	f1c4 040c 	rsb	r4, r4, #12
1a003e16:	f1c4 0220 	rsb	r2, r4, #32
1a003e1a:	fa20 f002 	lsr.w	r0, r0, r2
1a003e1e:	fa01 f304 	lsl.w	r3, r1, r4
1a003e22:	ea40 0003 	orr.w	r0, r0, r3
1a003e26:	4629      	mov	r1, r5
1a003e28:	bd30      	pop	{r4, r5, pc}
1a003e2a:	fa21 f004 	lsr.w	r0, r1, r4
1a003e2e:	4629      	mov	r1, r5
1a003e30:	bd30      	pop	{r4, r5, pc}
1a003e32:	f094 0f00 	teq	r4, #0
1a003e36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a003e3a:	bf06      	itte	eq
1a003e3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a003e40:	3401      	addeq	r4, #1
1a003e42:	3d01      	subne	r5, #1
1a003e44:	e74e      	b.n	1a003ce4 <__adddf3+0x8c>
1a003e46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003e4a:	bf18      	it	ne
1a003e4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003e50:	d029      	beq.n	1a003ea6 <__adddf3+0x24e>
1a003e52:	ea94 0f05 	teq	r4, r5
1a003e56:	bf08      	it	eq
1a003e58:	ea90 0f02 	teqeq	r0, r2
1a003e5c:	d005      	beq.n	1a003e6a <__adddf3+0x212>
1a003e5e:	ea54 0c00 	orrs.w	ip, r4, r0
1a003e62:	bf04      	itt	eq
1a003e64:	4619      	moveq	r1, r3
1a003e66:	4610      	moveq	r0, r2
1a003e68:	bd30      	pop	{r4, r5, pc}
1a003e6a:	ea91 0f03 	teq	r1, r3
1a003e6e:	bf1e      	ittt	ne
1a003e70:	2100      	movne	r1, #0
1a003e72:	2000      	movne	r0, #0
1a003e74:	bd30      	popne	{r4, r5, pc}
1a003e76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a003e7a:	d105      	bne.n	1a003e88 <__adddf3+0x230>
1a003e7c:	0040      	lsls	r0, r0, #1
1a003e7e:	4149      	adcs	r1, r1
1a003e80:	bf28      	it	cs
1a003e82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a003e86:	bd30      	pop	{r4, r5, pc}
1a003e88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a003e8c:	bf3c      	itt	cc
1a003e8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a003e92:	bd30      	popcc	{r4, r5, pc}
1a003e94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003e98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a003e9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003ea0:	f04f 0000 	mov.w	r0, #0
1a003ea4:	bd30      	pop	{r4, r5, pc}
1a003ea6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003eaa:	bf1a      	itte	ne
1a003eac:	4619      	movne	r1, r3
1a003eae:	4610      	movne	r0, r2
1a003eb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a003eb4:	bf1c      	itt	ne
1a003eb6:	460b      	movne	r3, r1
1a003eb8:	4602      	movne	r2, r0
1a003eba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003ebe:	bf06      	itte	eq
1a003ec0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a003ec4:	ea91 0f03 	teqeq	r1, r3
1a003ec8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a003ecc:	bd30      	pop	{r4, r5, pc}
1a003ece:	bf00      	nop

1a003ed0 <__aeabi_ui2d>:
1a003ed0:	f090 0f00 	teq	r0, #0
1a003ed4:	bf04      	itt	eq
1a003ed6:	2100      	moveq	r1, #0
1a003ed8:	4770      	bxeq	lr
1a003eda:	b530      	push	{r4, r5, lr}
1a003edc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003ee0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003ee4:	f04f 0500 	mov.w	r5, #0
1a003ee8:	f04f 0100 	mov.w	r1, #0
1a003eec:	e750      	b.n	1a003d90 <__adddf3+0x138>
1a003eee:	bf00      	nop

1a003ef0 <__aeabi_i2d>:
1a003ef0:	f090 0f00 	teq	r0, #0
1a003ef4:	bf04      	itt	eq
1a003ef6:	2100      	moveq	r1, #0
1a003ef8:	4770      	bxeq	lr
1a003efa:	b530      	push	{r4, r5, lr}
1a003efc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003f00:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003f04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a003f08:	bf48      	it	mi
1a003f0a:	4240      	negmi	r0, r0
1a003f0c:	f04f 0100 	mov.w	r1, #0
1a003f10:	e73e      	b.n	1a003d90 <__adddf3+0x138>
1a003f12:	bf00      	nop

1a003f14 <__aeabi_f2d>:
1a003f14:	0042      	lsls	r2, r0, #1
1a003f16:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a003f1a:	ea4f 0131 	mov.w	r1, r1, rrx
1a003f1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a003f22:	bf1f      	itttt	ne
1a003f24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a003f28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a003f2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a003f30:	4770      	bxne	lr
1a003f32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a003f36:	bf08      	it	eq
1a003f38:	4770      	bxeq	lr
1a003f3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a003f3e:	bf04      	itt	eq
1a003f40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a003f44:	4770      	bxeq	lr
1a003f46:	b530      	push	{r4, r5, lr}
1a003f48:	f44f 7460 	mov.w	r4, #896	; 0x380
1a003f4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003f54:	e71c      	b.n	1a003d90 <__adddf3+0x138>
1a003f56:	bf00      	nop

1a003f58 <__aeabi_ul2d>:
1a003f58:	ea50 0201 	orrs.w	r2, r0, r1
1a003f5c:	bf08      	it	eq
1a003f5e:	4770      	bxeq	lr
1a003f60:	b530      	push	{r4, r5, lr}
1a003f62:	f04f 0500 	mov.w	r5, #0
1a003f66:	e00a      	b.n	1a003f7e <__aeabi_l2d+0x16>

1a003f68 <__aeabi_l2d>:
1a003f68:	ea50 0201 	orrs.w	r2, r0, r1
1a003f6c:	bf08      	it	eq
1a003f6e:	4770      	bxeq	lr
1a003f70:	b530      	push	{r4, r5, lr}
1a003f72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a003f76:	d502      	bpl.n	1a003f7e <__aeabi_l2d+0x16>
1a003f78:	4240      	negs	r0, r0
1a003f7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003f7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003f82:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003f86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a003f8a:	f43f aed8 	beq.w	1a003d3e <__adddf3+0xe6>
1a003f8e:	f04f 0203 	mov.w	r2, #3
1a003f92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003f96:	bf18      	it	ne
1a003f98:	3203      	addne	r2, #3
1a003f9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003f9e:	bf18      	it	ne
1a003fa0:	3203      	addne	r2, #3
1a003fa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003fa6:	f1c2 0320 	rsb	r3, r2, #32
1a003faa:	fa00 fc03 	lsl.w	ip, r0, r3
1a003fae:	fa20 f002 	lsr.w	r0, r0, r2
1a003fb2:	fa01 fe03 	lsl.w	lr, r1, r3
1a003fb6:	ea40 000e 	orr.w	r0, r0, lr
1a003fba:	fa21 f102 	lsr.w	r1, r1, r2
1a003fbe:	4414      	add	r4, r2
1a003fc0:	e6bd      	b.n	1a003d3e <__adddf3+0xe6>
1a003fc2:	bf00      	nop

1a003fc4 <__aeabi_dmul>:
1a003fc4:	b570      	push	{r4, r5, r6, lr}
1a003fc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003fca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003fce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003fd2:	bf1d      	ittte	ne
1a003fd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003fd8:	ea94 0f0c 	teqne	r4, ip
1a003fdc:	ea95 0f0c 	teqne	r5, ip
1a003fe0:	f000 f8de 	bleq	1a0041a0 <__aeabi_dmul+0x1dc>
1a003fe4:	442c      	add	r4, r5
1a003fe6:	ea81 0603 	eor.w	r6, r1, r3
1a003fea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a003fee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a003ff2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a003ff6:	bf18      	it	ne
1a003ff8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a003ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a004004:	d038      	beq.n	1a004078 <__aeabi_dmul+0xb4>
1a004006:	fba0 ce02 	umull	ip, lr, r0, r2
1a00400a:	f04f 0500 	mov.w	r5, #0
1a00400e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a004012:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a004016:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00401a:	f04f 0600 	mov.w	r6, #0
1a00401e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a004022:	f09c 0f00 	teq	ip, #0
1a004026:	bf18      	it	ne
1a004028:	f04e 0e01 	orrne.w	lr, lr, #1
1a00402c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004030:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004034:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a004038:	d204      	bcs.n	1a004044 <__aeabi_dmul+0x80>
1a00403a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00403e:	416d      	adcs	r5, r5
1a004040:	eb46 0606 	adc.w	r6, r6, r6
1a004044:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a004048:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00404c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004050:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004054:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a004058:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00405c:	bf88      	it	hi
1a00405e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004062:	d81e      	bhi.n	1a0040a2 <__aeabi_dmul+0xde>
1a004064:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a004068:	bf08      	it	eq
1a00406a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00406e:	f150 0000 	adcs.w	r0, r0, #0
1a004072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004076:	bd70      	pop	{r4, r5, r6, pc}
1a004078:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00407c:	ea46 0101 	orr.w	r1, r6, r1
1a004080:	ea40 0002 	orr.w	r0, r0, r2
1a004084:	ea81 0103 	eor.w	r1, r1, r3
1a004088:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00408c:	bfc2      	ittt	gt
1a00408e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004092:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004096:	bd70      	popgt	{r4, r5, r6, pc}
1a004098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00409c:	f04f 0e00 	mov.w	lr, #0
1a0040a0:	3c01      	subs	r4, #1
1a0040a2:	f300 80ab 	bgt.w	1a0041fc <__aeabi_dmul+0x238>
1a0040a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0040aa:	bfde      	ittt	le
1a0040ac:	2000      	movle	r0, #0
1a0040ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0040b2:	bd70      	pople	{r4, r5, r6, pc}
1a0040b4:	f1c4 0400 	rsb	r4, r4, #0
1a0040b8:	3c20      	subs	r4, #32
1a0040ba:	da35      	bge.n	1a004128 <__aeabi_dmul+0x164>
1a0040bc:	340c      	adds	r4, #12
1a0040be:	dc1b      	bgt.n	1a0040f8 <__aeabi_dmul+0x134>
1a0040c0:	f104 0414 	add.w	r4, r4, #20
1a0040c4:	f1c4 0520 	rsb	r5, r4, #32
1a0040c8:	fa00 f305 	lsl.w	r3, r0, r5
1a0040cc:	fa20 f004 	lsr.w	r0, r0, r4
1a0040d0:	fa01 f205 	lsl.w	r2, r1, r5
1a0040d4:	ea40 0002 	orr.w	r0, r0, r2
1a0040d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0040dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0040e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0040e4:	fa21 f604 	lsr.w	r6, r1, r4
1a0040e8:	eb42 0106 	adc.w	r1, r2, r6
1a0040ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0040f0:	bf08      	it	eq
1a0040f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0040f6:	bd70      	pop	{r4, r5, r6, pc}
1a0040f8:	f1c4 040c 	rsb	r4, r4, #12
1a0040fc:	f1c4 0520 	rsb	r5, r4, #32
1a004100:	fa00 f304 	lsl.w	r3, r0, r4
1a004104:	fa20 f005 	lsr.w	r0, r0, r5
1a004108:	fa01 f204 	lsl.w	r2, r1, r4
1a00410c:	ea40 0002 	orr.w	r0, r0, r2
1a004110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004114:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004118:	f141 0100 	adc.w	r1, r1, #0
1a00411c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004120:	bf08      	it	eq
1a004122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004126:	bd70      	pop	{r4, r5, r6, pc}
1a004128:	f1c4 0520 	rsb	r5, r4, #32
1a00412c:	fa00 f205 	lsl.w	r2, r0, r5
1a004130:	ea4e 0e02 	orr.w	lr, lr, r2
1a004134:	fa20 f304 	lsr.w	r3, r0, r4
1a004138:	fa01 f205 	lsl.w	r2, r1, r5
1a00413c:	ea43 0302 	orr.w	r3, r3, r2
1a004140:	fa21 f004 	lsr.w	r0, r1, r4
1a004144:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004148:	fa21 f204 	lsr.w	r2, r1, r4
1a00414c:	ea20 0002 	bic.w	r0, r0, r2
1a004150:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004154:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004158:	bf08      	it	eq
1a00415a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00415e:	bd70      	pop	{r4, r5, r6, pc}
1a004160:	f094 0f00 	teq	r4, #0
1a004164:	d10f      	bne.n	1a004186 <__aeabi_dmul+0x1c2>
1a004166:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00416a:	0040      	lsls	r0, r0, #1
1a00416c:	eb41 0101 	adc.w	r1, r1, r1
1a004170:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004174:	bf08      	it	eq
1a004176:	3c01      	subeq	r4, #1
1a004178:	d0f7      	beq.n	1a00416a <__aeabi_dmul+0x1a6>
1a00417a:	ea41 0106 	orr.w	r1, r1, r6
1a00417e:	f095 0f00 	teq	r5, #0
1a004182:	bf18      	it	ne
1a004184:	4770      	bxne	lr
1a004186:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00418a:	0052      	lsls	r2, r2, #1
1a00418c:	eb43 0303 	adc.w	r3, r3, r3
1a004190:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004194:	bf08      	it	eq
1a004196:	3d01      	subeq	r5, #1
1a004198:	d0f7      	beq.n	1a00418a <__aeabi_dmul+0x1c6>
1a00419a:	ea43 0306 	orr.w	r3, r3, r6
1a00419e:	4770      	bx	lr
1a0041a0:	ea94 0f0c 	teq	r4, ip
1a0041a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0041a8:	bf18      	it	ne
1a0041aa:	ea95 0f0c 	teqne	r5, ip
1a0041ae:	d00c      	beq.n	1a0041ca <__aeabi_dmul+0x206>
1a0041b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0041b4:	bf18      	it	ne
1a0041b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0041ba:	d1d1      	bne.n	1a004160 <__aeabi_dmul+0x19c>
1a0041bc:	ea81 0103 	eor.w	r1, r1, r3
1a0041c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0041c4:	f04f 0000 	mov.w	r0, #0
1a0041c8:	bd70      	pop	{r4, r5, r6, pc}
1a0041ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0041ce:	bf06      	itte	eq
1a0041d0:	4610      	moveq	r0, r2
1a0041d2:	4619      	moveq	r1, r3
1a0041d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0041d8:	d019      	beq.n	1a00420e <__aeabi_dmul+0x24a>
1a0041da:	ea94 0f0c 	teq	r4, ip
1a0041de:	d102      	bne.n	1a0041e6 <__aeabi_dmul+0x222>
1a0041e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0041e4:	d113      	bne.n	1a00420e <__aeabi_dmul+0x24a>
1a0041e6:	ea95 0f0c 	teq	r5, ip
1a0041ea:	d105      	bne.n	1a0041f8 <__aeabi_dmul+0x234>
1a0041ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0041f0:	bf1c      	itt	ne
1a0041f2:	4610      	movne	r0, r2
1a0041f4:	4619      	movne	r1, r3
1a0041f6:	d10a      	bne.n	1a00420e <__aeabi_dmul+0x24a>
1a0041f8:	ea81 0103 	eor.w	r1, r1, r3
1a0041fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004200:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004204:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004208:	f04f 0000 	mov.w	r0, #0
1a00420c:	bd70      	pop	{r4, r5, r6, pc}
1a00420e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a004212:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a004216:	bd70      	pop	{r4, r5, r6, pc}

1a004218 <__aeabi_ddiv>:
1a004218:	b570      	push	{r4, r5, r6, lr}
1a00421a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00421e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004226:	bf1d      	ittte	ne
1a004228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00422c:	ea94 0f0c 	teqne	r4, ip
1a004230:	ea95 0f0c 	teqne	r5, ip
1a004234:	f000 f8a7 	bleq	1a004386 <__aeabi_ddiv+0x16e>
1a004238:	eba4 0405 	sub.w	r4, r4, r5
1a00423c:	ea81 0e03 	eor.w	lr, r1, r3
1a004240:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004244:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a004248:	f000 8088 	beq.w	1a00435c <__aeabi_ddiv+0x144>
1a00424c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004250:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a004254:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a004258:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a00425c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004260:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004264:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a004268:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a00426c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004270:	429d      	cmp	r5, r3
1a004272:	bf08      	it	eq
1a004274:	4296      	cmpeq	r6, r2
1a004276:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00427a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00427e:	d202      	bcs.n	1a004286 <__aeabi_ddiv+0x6e>
1a004280:	085b      	lsrs	r3, r3, #1
1a004282:	ea4f 0232 	mov.w	r2, r2, rrx
1a004286:	1ab6      	subs	r6, r6, r2
1a004288:	eb65 0503 	sbc.w	r5, r5, r3
1a00428c:	085b      	lsrs	r3, r3, #1
1a00428e:	ea4f 0232 	mov.w	r2, r2, rrx
1a004292:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a004296:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00429a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00429e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0042a2:	bf22      	ittt	cs
1a0042a4:	1ab6      	subcs	r6, r6, r2
1a0042a6:	4675      	movcs	r5, lr
1a0042a8:	ea40 000c 	orrcs.w	r0, r0, ip
1a0042ac:	085b      	lsrs	r3, r3, #1
1a0042ae:	ea4f 0232 	mov.w	r2, r2, rrx
1a0042b2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0042b6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0042ba:	bf22      	ittt	cs
1a0042bc:	1ab6      	subcs	r6, r6, r2
1a0042be:	4675      	movcs	r5, lr
1a0042c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0042c4:	085b      	lsrs	r3, r3, #1
1a0042c6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0042ca:	ebb6 0e02 	subs.w	lr, r6, r2
1a0042ce:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0042d2:	bf22      	ittt	cs
1a0042d4:	1ab6      	subcs	r6, r6, r2
1a0042d6:	4675      	movcs	r5, lr
1a0042d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0042dc:	085b      	lsrs	r3, r3, #1
1a0042de:	ea4f 0232 	mov.w	r2, r2, rrx
1a0042e2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0042e6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0042ea:	bf22      	ittt	cs
1a0042ec:	1ab6      	subcs	r6, r6, r2
1a0042ee:	4675      	movcs	r5, lr
1a0042f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0042f4:	ea55 0e06 	orrs.w	lr, r5, r6
1a0042f8:	d018      	beq.n	1a00432c <__aeabi_ddiv+0x114>
1a0042fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0042fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a004302:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a004306:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00430a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00430e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a004312:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a004316:	d1c0      	bne.n	1a00429a <__aeabi_ddiv+0x82>
1a004318:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00431c:	d10b      	bne.n	1a004336 <__aeabi_ddiv+0x11e>
1a00431e:	ea41 0100 	orr.w	r1, r1, r0
1a004322:	f04f 0000 	mov.w	r0, #0
1a004326:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00432a:	e7b6      	b.n	1a00429a <__aeabi_ddiv+0x82>
1a00432c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004330:	bf04      	itt	eq
1a004332:	4301      	orreq	r1, r0
1a004334:	2000      	moveq	r0, #0
1a004336:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00433a:	bf88      	it	hi
1a00433c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004340:	f63f aeaf 	bhi.w	1a0040a2 <__aeabi_dmul+0xde>
1a004344:	ebb5 0c03 	subs.w	ip, r5, r3
1a004348:	bf04      	itt	eq
1a00434a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00434e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004352:	f150 0000 	adcs.w	r0, r0, #0
1a004356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00435a:	bd70      	pop	{r4, r5, r6, pc}
1a00435c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004360:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004364:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a004368:	bfc2      	ittt	gt
1a00436a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00436e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004372:	bd70      	popgt	{r4, r5, r6, pc}
1a004374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004378:	f04f 0e00 	mov.w	lr, #0
1a00437c:	3c01      	subs	r4, #1
1a00437e:	e690      	b.n	1a0040a2 <__aeabi_dmul+0xde>
1a004380:	ea45 0e06 	orr.w	lr, r5, r6
1a004384:	e68d      	b.n	1a0040a2 <__aeabi_dmul+0xde>
1a004386:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00438a:	ea94 0f0c 	teq	r4, ip
1a00438e:	bf08      	it	eq
1a004390:	ea95 0f0c 	teqeq	r5, ip
1a004394:	f43f af3b 	beq.w	1a00420e <__aeabi_dmul+0x24a>
1a004398:	ea94 0f0c 	teq	r4, ip
1a00439c:	d10a      	bne.n	1a0043b4 <__aeabi_ddiv+0x19c>
1a00439e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0043a2:	f47f af34 	bne.w	1a00420e <__aeabi_dmul+0x24a>
1a0043a6:	ea95 0f0c 	teq	r5, ip
1a0043aa:	f47f af25 	bne.w	1a0041f8 <__aeabi_dmul+0x234>
1a0043ae:	4610      	mov	r0, r2
1a0043b0:	4619      	mov	r1, r3
1a0043b2:	e72c      	b.n	1a00420e <__aeabi_dmul+0x24a>
1a0043b4:	ea95 0f0c 	teq	r5, ip
1a0043b8:	d106      	bne.n	1a0043c8 <__aeabi_ddiv+0x1b0>
1a0043ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0043be:	f43f aefd 	beq.w	1a0041bc <__aeabi_dmul+0x1f8>
1a0043c2:	4610      	mov	r0, r2
1a0043c4:	4619      	mov	r1, r3
1a0043c6:	e722      	b.n	1a00420e <__aeabi_dmul+0x24a>
1a0043c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0043cc:	bf18      	it	ne
1a0043ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0043d2:	f47f aec5 	bne.w	1a004160 <__aeabi_dmul+0x19c>
1a0043d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0043da:	f47f af0d 	bne.w	1a0041f8 <__aeabi_dmul+0x234>
1a0043de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0043e2:	f47f aeeb 	bne.w	1a0041bc <__aeabi_dmul+0x1f8>
1a0043e6:	e712      	b.n	1a00420e <__aeabi_dmul+0x24a>

1a0043e8 <__aeabi_d2iz>:
1a0043e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0043ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0043f0:	d215      	bcs.n	1a00441e <__aeabi_d2iz+0x36>
1a0043f2:	d511      	bpl.n	1a004418 <__aeabi_d2iz+0x30>
1a0043f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0043f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0043fc:	d912      	bls.n	1a004424 <__aeabi_d2iz+0x3c>
1a0043fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a004406:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00440a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00440e:	fa23 f002 	lsr.w	r0, r3, r2
1a004412:	bf18      	it	ne
1a004414:	4240      	negne	r0, r0
1a004416:	4770      	bx	lr
1a004418:	f04f 0000 	mov.w	r0, #0
1a00441c:	4770      	bx	lr
1a00441e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a004422:	d105      	bne.n	1a004430 <__aeabi_d2iz+0x48>
1a004424:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a004428:	bf08      	it	eq
1a00442a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00442e:	4770      	bx	lr
1a004430:	f04f 0000 	mov.w	r0, #0
1a004434:	4770      	bx	lr
1a004436:	bf00      	nop

1a004438 <__aeabi_d2f>:
1a004438:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00443c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a004440:	bf24      	itt	cs
1a004442:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a004446:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a00444a:	d90d      	bls.n	1a004468 <__aeabi_d2f+0x30>
1a00444c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a004450:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a004454:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a004458:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a00445c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a004460:	bf08      	it	eq
1a004462:	f020 0001 	biceq.w	r0, r0, #1
1a004466:	4770      	bx	lr
1a004468:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a00446c:	d121      	bne.n	1a0044b2 <__aeabi_d2f+0x7a>
1a00446e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a004472:	bfbc      	itt	lt
1a004474:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a004478:	4770      	bxlt	lr
1a00447a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00447e:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a004482:	f1c2 0218 	rsb	r2, r2, #24
1a004486:	f1c2 0c20 	rsb	ip, r2, #32
1a00448a:	fa10 f30c 	lsls.w	r3, r0, ip
1a00448e:	fa20 f002 	lsr.w	r0, r0, r2
1a004492:	bf18      	it	ne
1a004494:	f040 0001 	orrne.w	r0, r0, #1
1a004498:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00449c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0044a0:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0044a4:	ea40 000c 	orr.w	r0, r0, ip
1a0044a8:	fa23 f302 	lsr.w	r3, r3, r2
1a0044ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0044b0:	e7cc      	b.n	1a00444c <__aeabi_d2f+0x14>
1a0044b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a0044b6:	d107      	bne.n	1a0044c8 <__aeabi_d2f+0x90>
1a0044b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a0044bc:	bf1e      	ittt	ne
1a0044be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a0044c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a0044c6:	4770      	bxne	lr
1a0044c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0044cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0044d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a0044d4:	4770      	bx	lr
1a0044d6:	bf00      	nop

1a0044d8 <__aeabi_ldivmod>:
1a0044d8:	b97b      	cbnz	r3, 1a0044fa <__aeabi_ldivmod+0x22>
1a0044da:	b972      	cbnz	r2, 1a0044fa <__aeabi_ldivmod+0x22>
1a0044dc:	2900      	cmp	r1, #0
1a0044de:	bfbe      	ittt	lt
1a0044e0:	2000      	movlt	r0, #0
1a0044e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a0044e6:	e006      	blt.n	1a0044f6 <__aeabi_ldivmod+0x1e>
1a0044e8:	bf08      	it	eq
1a0044ea:	2800      	cmpeq	r0, #0
1a0044ec:	bf1c      	itt	ne
1a0044ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a0044f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0044f6:	f000 b9bd 	b.w	1a004874 <__aeabi_idiv0>
1a0044fa:	f1ad 0c08 	sub.w	ip, sp, #8
1a0044fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004502:	2900      	cmp	r1, #0
1a004504:	db09      	blt.n	1a00451a <__aeabi_ldivmod+0x42>
1a004506:	2b00      	cmp	r3, #0
1a004508:	db1a      	blt.n	1a004540 <__aeabi_ldivmod+0x68>
1a00450a:	f000 f84d 	bl	1a0045a8 <__udivmoddi4>
1a00450e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004516:	b004      	add	sp, #16
1a004518:	4770      	bx	lr
1a00451a:	4240      	negs	r0, r0
1a00451c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004520:	2b00      	cmp	r3, #0
1a004522:	db1b      	blt.n	1a00455c <__aeabi_ldivmod+0x84>
1a004524:	f000 f840 	bl	1a0045a8 <__udivmoddi4>
1a004528:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00452c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004530:	b004      	add	sp, #16
1a004532:	4240      	negs	r0, r0
1a004534:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004538:	4252      	negs	r2, r2
1a00453a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00453e:	4770      	bx	lr
1a004540:	4252      	negs	r2, r2
1a004542:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004546:	f000 f82f 	bl	1a0045a8 <__udivmoddi4>
1a00454a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00454e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004552:	b004      	add	sp, #16
1a004554:	4240      	negs	r0, r0
1a004556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00455a:	4770      	bx	lr
1a00455c:	4252      	negs	r2, r2
1a00455e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004562:	f000 f821 	bl	1a0045a8 <__udivmoddi4>
1a004566:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00456a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00456e:	b004      	add	sp, #16
1a004570:	4252      	negs	r2, r2
1a004572:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004576:	4770      	bx	lr

1a004578 <__aeabi_uldivmod>:
1a004578:	b953      	cbnz	r3, 1a004590 <__aeabi_uldivmod+0x18>
1a00457a:	b94a      	cbnz	r2, 1a004590 <__aeabi_uldivmod+0x18>
1a00457c:	2900      	cmp	r1, #0
1a00457e:	bf08      	it	eq
1a004580:	2800      	cmpeq	r0, #0
1a004582:	bf1c      	itt	ne
1a004584:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004588:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00458c:	f000 b972 	b.w	1a004874 <__aeabi_idiv0>
1a004590:	f1ad 0c08 	sub.w	ip, sp, #8
1a004594:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004598:	f000 f806 	bl	1a0045a8 <__udivmoddi4>
1a00459c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0045a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0045a4:	b004      	add	sp, #16
1a0045a6:	4770      	bx	lr

1a0045a8 <__udivmoddi4>:
1a0045a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0045ac:	9e08      	ldr	r6, [sp, #32]
1a0045ae:	4604      	mov	r4, r0
1a0045b0:	4688      	mov	r8, r1
1a0045b2:	2b00      	cmp	r3, #0
1a0045b4:	d14b      	bne.n	1a00464e <__udivmoddi4+0xa6>
1a0045b6:	428a      	cmp	r2, r1
1a0045b8:	4615      	mov	r5, r2
1a0045ba:	d967      	bls.n	1a00468c <__udivmoddi4+0xe4>
1a0045bc:	fab2 f282 	clz	r2, r2
1a0045c0:	b14a      	cbz	r2, 1a0045d6 <__udivmoddi4+0x2e>
1a0045c2:	f1c2 0720 	rsb	r7, r2, #32
1a0045c6:	fa01 f302 	lsl.w	r3, r1, r2
1a0045ca:	fa20 f707 	lsr.w	r7, r0, r7
1a0045ce:	4095      	lsls	r5, r2
1a0045d0:	ea47 0803 	orr.w	r8, r7, r3
1a0045d4:	4094      	lsls	r4, r2
1a0045d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0045da:	0c23      	lsrs	r3, r4, #16
1a0045dc:	fbb8 f7fe 	udiv	r7, r8, lr
1a0045e0:	fa1f fc85 	uxth.w	ip, r5
1a0045e4:	fb0e 8817 	mls	r8, lr, r7, r8
1a0045e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0045ec:	fb07 f10c 	mul.w	r1, r7, ip
1a0045f0:	4299      	cmp	r1, r3
1a0045f2:	d909      	bls.n	1a004608 <__udivmoddi4+0x60>
1a0045f4:	18eb      	adds	r3, r5, r3
1a0045f6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0045fa:	f080 811b 	bcs.w	1a004834 <__udivmoddi4+0x28c>
1a0045fe:	4299      	cmp	r1, r3
1a004600:	f240 8118 	bls.w	1a004834 <__udivmoddi4+0x28c>
1a004604:	3f02      	subs	r7, #2
1a004606:	442b      	add	r3, r5
1a004608:	1a5b      	subs	r3, r3, r1
1a00460a:	b2a4      	uxth	r4, r4
1a00460c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004610:	fb0e 3310 	mls	r3, lr, r0, r3
1a004614:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004618:	fb00 fc0c 	mul.w	ip, r0, ip
1a00461c:	45a4      	cmp	ip, r4
1a00461e:	d909      	bls.n	1a004634 <__udivmoddi4+0x8c>
1a004620:	192c      	adds	r4, r5, r4
1a004622:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004626:	f080 8107 	bcs.w	1a004838 <__udivmoddi4+0x290>
1a00462a:	45a4      	cmp	ip, r4
1a00462c:	f240 8104 	bls.w	1a004838 <__udivmoddi4+0x290>
1a004630:	3802      	subs	r0, #2
1a004632:	442c      	add	r4, r5
1a004634:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004638:	eba4 040c 	sub.w	r4, r4, ip
1a00463c:	2700      	movs	r7, #0
1a00463e:	b11e      	cbz	r6, 1a004648 <__udivmoddi4+0xa0>
1a004640:	40d4      	lsrs	r4, r2
1a004642:	2300      	movs	r3, #0
1a004644:	e9c6 4300 	strd	r4, r3, [r6]
1a004648:	4639      	mov	r1, r7
1a00464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00464e:	428b      	cmp	r3, r1
1a004650:	d909      	bls.n	1a004666 <__udivmoddi4+0xbe>
1a004652:	2e00      	cmp	r6, #0
1a004654:	f000 80eb 	beq.w	1a00482e <__udivmoddi4+0x286>
1a004658:	2700      	movs	r7, #0
1a00465a:	e9c6 0100 	strd	r0, r1, [r6]
1a00465e:	4638      	mov	r0, r7
1a004660:	4639      	mov	r1, r7
1a004662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004666:	fab3 f783 	clz	r7, r3
1a00466a:	2f00      	cmp	r7, #0
1a00466c:	d147      	bne.n	1a0046fe <__udivmoddi4+0x156>
1a00466e:	428b      	cmp	r3, r1
1a004670:	d302      	bcc.n	1a004678 <__udivmoddi4+0xd0>
1a004672:	4282      	cmp	r2, r0
1a004674:	f200 80fa 	bhi.w	1a00486c <__udivmoddi4+0x2c4>
1a004678:	1a84      	subs	r4, r0, r2
1a00467a:	eb61 0303 	sbc.w	r3, r1, r3
1a00467e:	2001      	movs	r0, #1
1a004680:	4698      	mov	r8, r3
1a004682:	2e00      	cmp	r6, #0
1a004684:	d0e0      	beq.n	1a004648 <__udivmoddi4+0xa0>
1a004686:	e9c6 4800 	strd	r4, r8, [r6]
1a00468a:	e7dd      	b.n	1a004648 <__udivmoddi4+0xa0>
1a00468c:	b902      	cbnz	r2, 1a004690 <__udivmoddi4+0xe8>
1a00468e:	deff      	udf	#255	; 0xff
1a004690:	fab2 f282 	clz	r2, r2
1a004694:	2a00      	cmp	r2, #0
1a004696:	f040 808f 	bne.w	1a0047b8 <__udivmoddi4+0x210>
1a00469a:	1b49      	subs	r1, r1, r5
1a00469c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0046a0:	fa1f f885 	uxth.w	r8, r5
1a0046a4:	2701      	movs	r7, #1
1a0046a6:	fbb1 fcfe 	udiv	ip, r1, lr
1a0046aa:	0c23      	lsrs	r3, r4, #16
1a0046ac:	fb0e 111c 	mls	r1, lr, ip, r1
1a0046b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0046b4:	fb08 f10c 	mul.w	r1, r8, ip
1a0046b8:	4299      	cmp	r1, r3
1a0046ba:	d907      	bls.n	1a0046cc <__udivmoddi4+0x124>
1a0046bc:	18eb      	adds	r3, r5, r3
1a0046be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0046c2:	d202      	bcs.n	1a0046ca <__udivmoddi4+0x122>
1a0046c4:	4299      	cmp	r1, r3
1a0046c6:	f200 80cd 	bhi.w	1a004864 <__udivmoddi4+0x2bc>
1a0046ca:	4684      	mov	ip, r0
1a0046cc:	1a59      	subs	r1, r3, r1
1a0046ce:	b2a3      	uxth	r3, r4
1a0046d0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0046d4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0046d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0046dc:	fb08 f800 	mul.w	r8, r8, r0
1a0046e0:	45a0      	cmp	r8, r4
1a0046e2:	d907      	bls.n	1a0046f4 <__udivmoddi4+0x14c>
1a0046e4:	192c      	adds	r4, r5, r4
1a0046e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0046ea:	d202      	bcs.n	1a0046f2 <__udivmoddi4+0x14a>
1a0046ec:	45a0      	cmp	r8, r4
1a0046ee:	f200 80b6 	bhi.w	1a00485e <__udivmoddi4+0x2b6>
1a0046f2:	4618      	mov	r0, r3
1a0046f4:	eba4 0408 	sub.w	r4, r4, r8
1a0046f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0046fc:	e79f      	b.n	1a00463e <__udivmoddi4+0x96>
1a0046fe:	f1c7 0c20 	rsb	ip, r7, #32
1a004702:	40bb      	lsls	r3, r7
1a004704:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004708:	ea4e 0e03 	orr.w	lr, lr, r3
1a00470c:	fa01 f407 	lsl.w	r4, r1, r7
1a004710:	fa20 f50c 	lsr.w	r5, r0, ip
1a004714:	fa21 f30c 	lsr.w	r3, r1, ip
1a004718:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a00471c:	4325      	orrs	r5, r4
1a00471e:	fbb3 f9f8 	udiv	r9, r3, r8
1a004722:	0c2c      	lsrs	r4, r5, #16
1a004724:	fb08 3319 	mls	r3, r8, r9, r3
1a004728:	fa1f fa8e 	uxth.w	sl, lr
1a00472c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004730:	fb09 f40a 	mul.w	r4, r9, sl
1a004734:	429c      	cmp	r4, r3
1a004736:	fa02 f207 	lsl.w	r2, r2, r7
1a00473a:	fa00 f107 	lsl.w	r1, r0, r7
1a00473e:	d90b      	bls.n	1a004758 <__udivmoddi4+0x1b0>
1a004740:	eb1e 0303 	adds.w	r3, lr, r3
1a004744:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004748:	f080 8087 	bcs.w	1a00485a <__udivmoddi4+0x2b2>
1a00474c:	429c      	cmp	r4, r3
1a00474e:	f240 8084 	bls.w	1a00485a <__udivmoddi4+0x2b2>
1a004752:	f1a9 0902 	sub.w	r9, r9, #2
1a004756:	4473      	add	r3, lr
1a004758:	1b1b      	subs	r3, r3, r4
1a00475a:	b2ad      	uxth	r5, r5
1a00475c:	fbb3 f0f8 	udiv	r0, r3, r8
1a004760:	fb08 3310 	mls	r3, r8, r0, r3
1a004764:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004768:	fb00 fa0a 	mul.w	sl, r0, sl
1a00476c:	45a2      	cmp	sl, r4
1a00476e:	d908      	bls.n	1a004782 <__udivmoddi4+0x1da>
1a004770:	eb1e 0404 	adds.w	r4, lr, r4
1a004774:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004778:	d26b      	bcs.n	1a004852 <__udivmoddi4+0x2aa>
1a00477a:	45a2      	cmp	sl, r4
1a00477c:	d969      	bls.n	1a004852 <__udivmoddi4+0x2aa>
1a00477e:	3802      	subs	r0, #2
1a004780:	4474      	add	r4, lr
1a004782:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004786:	fba0 8902 	umull	r8, r9, r0, r2
1a00478a:	eba4 040a 	sub.w	r4, r4, sl
1a00478e:	454c      	cmp	r4, r9
1a004790:	46c2      	mov	sl, r8
1a004792:	464b      	mov	r3, r9
1a004794:	d354      	bcc.n	1a004840 <__udivmoddi4+0x298>
1a004796:	d051      	beq.n	1a00483c <__udivmoddi4+0x294>
1a004798:	2e00      	cmp	r6, #0
1a00479a:	d069      	beq.n	1a004870 <__udivmoddi4+0x2c8>
1a00479c:	ebb1 050a 	subs.w	r5, r1, sl
1a0047a0:	eb64 0403 	sbc.w	r4, r4, r3
1a0047a4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0047a8:	40fd      	lsrs	r5, r7
1a0047aa:	40fc      	lsrs	r4, r7
1a0047ac:	ea4c 0505 	orr.w	r5, ip, r5
1a0047b0:	e9c6 5400 	strd	r5, r4, [r6]
1a0047b4:	2700      	movs	r7, #0
1a0047b6:	e747      	b.n	1a004648 <__udivmoddi4+0xa0>
1a0047b8:	f1c2 0320 	rsb	r3, r2, #32
1a0047bc:	fa20 f703 	lsr.w	r7, r0, r3
1a0047c0:	4095      	lsls	r5, r2
1a0047c2:	fa01 f002 	lsl.w	r0, r1, r2
1a0047c6:	fa21 f303 	lsr.w	r3, r1, r3
1a0047ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0047ce:	4338      	orrs	r0, r7
1a0047d0:	0c01      	lsrs	r1, r0, #16
1a0047d2:	fbb3 f7fe 	udiv	r7, r3, lr
1a0047d6:	fa1f f885 	uxth.w	r8, r5
1a0047da:	fb0e 3317 	mls	r3, lr, r7, r3
1a0047de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0047e2:	fb07 f308 	mul.w	r3, r7, r8
1a0047e6:	428b      	cmp	r3, r1
1a0047e8:	fa04 f402 	lsl.w	r4, r4, r2
1a0047ec:	d907      	bls.n	1a0047fe <__udivmoddi4+0x256>
1a0047ee:	1869      	adds	r1, r5, r1
1a0047f0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0047f4:	d22f      	bcs.n	1a004856 <__udivmoddi4+0x2ae>
1a0047f6:	428b      	cmp	r3, r1
1a0047f8:	d92d      	bls.n	1a004856 <__udivmoddi4+0x2ae>
1a0047fa:	3f02      	subs	r7, #2
1a0047fc:	4429      	add	r1, r5
1a0047fe:	1acb      	subs	r3, r1, r3
1a004800:	b281      	uxth	r1, r0
1a004802:	fbb3 f0fe 	udiv	r0, r3, lr
1a004806:	fb0e 3310 	mls	r3, lr, r0, r3
1a00480a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00480e:	fb00 f308 	mul.w	r3, r0, r8
1a004812:	428b      	cmp	r3, r1
1a004814:	d907      	bls.n	1a004826 <__udivmoddi4+0x27e>
1a004816:	1869      	adds	r1, r5, r1
1a004818:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00481c:	d217      	bcs.n	1a00484e <__udivmoddi4+0x2a6>
1a00481e:	428b      	cmp	r3, r1
1a004820:	d915      	bls.n	1a00484e <__udivmoddi4+0x2a6>
1a004822:	3802      	subs	r0, #2
1a004824:	4429      	add	r1, r5
1a004826:	1ac9      	subs	r1, r1, r3
1a004828:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00482c:	e73b      	b.n	1a0046a6 <__udivmoddi4+0xfe>
1a00482e:	4637      	mov	r7, r6
1a004830:	4630      	mov	r0, r6
1a004832:	e709      	b.n	1a004648 <__udivmoddi4+0xa0>
1a004834:	4607      	mov	r7, r0
1a004836:	e6e7      	b.n	1a004608 <__udivmoddi4+0x60>
1a004838:	4618      	mov	r0, r3
1a00483a:	e6fb      	b.n	1a004634 <__udivmoddi4+0x8c>
1a00483c:	4541      	cmp	r1, r8
1a00483e:	d2ab      	bcs.n	1a004798 <__udivmoddi4+0x1f0>
1a004840:	ebb8 0a02 	subs.w	sl, r8, r2
1a004844:	eb69 020e 	sbc.w	r2, r9, lr
1a004848:	3801      	subs	r0, #1
1a00484a:	4613      	mov	r3, r2
1a00484c:	e7a4      	b.n	1a004798 <__udivmoddi4+0x1f0>
1a00484e:	4660      	mov	r0, ip
1a004850:	e7e9      	b.n	1a004826 <__udivmoddi4+0x27e>
1a004852:	4618      	mov	r0, r3
1a004854:	e795      	b.n	1a004782 <__udivmoddi4+0x1da>
1a004856:	4667      	mov	r7, ip
1a004858:	e7d1      	b.n	1a0047fe <__udivmoddi4+0x256>
1a00485a:	4681      	mov	r9, r0
1a00485c:	e77c      	b.n	1a004758 <__udivmoddi4+0x1b0>
1a00485e:	3802      	subs	r0, #2
1a004860:	442c      	add	r4, r5
1a004862:	e747      	b.n	1a0046f4 <__udivmoddi4+0x14c>
1a004864:	f1ac 0c02 	sub.w	ip, ip, #2
1a004868:	442b      	add	r3, r5
1a00486a:	e72f      	b.n	1a0046cc <__udivmoddi4+0x124>
1a00486c:	4638      	mov	r0, r7
1a00486e:	e708      	b.n	1a004682 <__udivmoddi4+0xda>
1a004870:	4637      	mov	r7, r6
1a004872:	e6e9      	b.n	1a004648 <__udivmoddi4+0xa0>

1a004874 <__aeabi_idiv0>:
1a004874:	4770      	bx	lr
1a004876:	bf00      	nop

1a004878 <__libc_init_array>:
1a004878:	b570      	push	{r4, r5, r6, lr}
1a00487a:	4e0d      	ldr	r6, [pc, #52]	; (1a0048b0 <__libc_init_array+0x38>)
1a00487c:	4c0d      	ldr	r4, [pc, #52]	; (1a0048b4 <__libc_init_array+0x3c>)
1a00487e:	1ba4      	subs	r4, r4, r6
1a004880:	10a4      	asrs	r4, r4, #2
1a004882:	2500      	movs	r5, #0
1a004884:	42a5      	cmp	r5, r4
1a004886:	d109      	bne.n	1a00489c <__libc_init_array+0x24>
1a004888:	4e0b      	ldr	r6, [pc, #44]	; (1a0048b8 <__libc_init_array+0x40>)
1a00488a:	4c0c      	ldr	r4, [pc, #48]	; (1a0048bc <__libc_init_array+0x44>)
1a00488c:	f7ff f984 	bl	1a003b98 <_init>
1a004890:	1ba4      	subs	r4, r4, r6
1a004892:	10a4      	asrs	r4, r4, #2
1a004894:	2500      	movs	r5, #0
1a004896:	42a5      	cmp	r5, r4
1a004898:	d105      	bne.n	1a0048a6 <__libc_init_array+0x2e>
1a00489a:	bd70      	pop	{r4, r5, r6, pc}
1a00489c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0048a0:	4798      	blx	r3
1a0048a2:	3501      	adds	r5, #1
1a0048a4:	e7ee      	b.n	1a004884 <__libc_init_array+0xc>
1a0048a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0048aa:	4798      	blx	r3
1a0048ac:	3501      	adds	r5, #1
1a0048ae:	e7f2      	b.n	1a004896 <__libc_init_array+0x1e>
1a0048b0:	1a004da4 	.word	0x1a004da4
1a0048b4:	1a004da4 	.word	0x1a004da4
1a0048b8:	1a004da4 	.word	0x1a004da4
1a0048bc:	1a004da4 	.word	0x1a004da4

1a0048c0 <memcpy>:
1a0048c0:	b510      	push	{r4, lr}
1a0048c2:	1e43      	subs	r3, r0, #1
1a0048c4:	440a      	add	r2, r1
1a0048c6:	4291      	cmp	r1, r2
1a0048c8:	d100      	bne.n	1a0048cc <memcpy+0xc>
1a0048ca:	bd10      	pop	{r4, pc}
1a0048cc:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0048d0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0048d4:	e7f7      	b.n	1a0048c6 <memcpy+0x6>

1a0048d6 <memset>:
1a0048d6:	4402      	add	r2, r0
1a0048d8:	4603      	mov	r3, r0
1a0048da:	4293      	cmp	r3, r2
1a0048dc:	d100      	bne.n	1a0048e0 <memset+0xa>
1a0048de:	4770      	bx	lr
1a0048e0:	f803 1b01 	strb.w	r1, [r3], #1
1a0048e4:	e7f9      	b.n	1a0048da <memset+0x4>

1a0048e6 <strcat>:
1a0048e6:	b510      	push	{r4, lr}
1a0048e8:	4603      	mov	r3, r0
1a0048ea:	781a      	ldrb	r2, [r3, #0]
1a0048ec:	1c5c      	adds	r4, r3, #1
1a0048ee:	b93a      	cbnz	r2, 1a004900 <strcat+0x1a>
1a0048f0:	3b01      	subs	r3, #1
1a0048f2:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0048f6:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0048fa:	2a00      	cmp	r2, #0
1a0048fc:	d1f9      	bne.n	1a0048f2 <strcat+0xc>
1a0048fe:	bd10      	pop	{r4, pc}
1a004900:	4623      	mov	r3, r4
1a004902:	e7f2      	b.n	1a0048ea <strcat+0x4>

1a004904 <strlen>:
1a004904:	4603      	mov	r3, r0
1a004906:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00490a:	2a00      	cmp	r2, #0
1a00490c:	d1fb      	bne.n	1a004906 <strlen+0x2>
1a00490e:	1a18      	subs	r0, r3, r0
1a004910:	3801      	subs	r0, #1
1a004912:	4770      	bx	lr
1a004914:	7778797a 	.word	0x7778797a
1a004918:	73747576 	.word	0x73747576
1a00491c:	6f707172 	.word	0x6f707172
1a004920:	6b6c6d6e 	.word	0x6b6c6d6e
1a004924:	6768696a 	.word	0x6768696a
1a004928:	63646566 	.word	0x63646566
1a00492c:	38396162 	.word	0x38396162
1a004930:	34353637 	.word	0x34353637
1a004934:	30313233 	.word	0x30313233
1a004938:	34333231 	.word	0x34333231
1a00493c:	38373635 	.word	0x38373635
1a004940:	63626139 	.word	0x63626139
1a004944:	67666564 	.word	0x67666564
1a004948:	6b6a6968 	.word	0x6b6a6968
1a00494c:	6f6e6d6c 	.word	0x6f6e6d6c
1a004950:	73727170 	.word	0x73727170
1a004954:	77767574 	.word	0x77767574
1a004958:	007a7978 	.word	0x007a7978
1a00495c:	6e696c42 	.word	0x6e696c42
1a004960:	6320796b 	.word	0x6320796b
1a004964:	66206e6f 	.word	0x66206e6f
1a004968:	52656572 	.word	0x52656572
1a00496c:	20534f54 	.word	0x20534f54
1a004970:	41732079 	.word	0x41732079
1a004974:	002e4950 	.word	0x002e4950
1a004978:	6154796d 	.word	0x6154796d
1a00497c:	00006b73 	.word	0x00006b73
1a004980:	6b736174 	.word	0x6b736174
1a004984:	706d6554 	.word	0x706d6554
1a004988:	7361654d 	.word	0x7361654d
1a00498c:	00657275 	.word	0x00657275
1a004990:	63696e49 	.word	0x63696e49
1a004994:	646e6169 	.word	0x646e6169
1a004998:	6373206f 	.word	0x6373206f
1a00499c:	75646568 	.word	0x75646568
1a0049a0:	0072656c 	.word	0x0072656c
1a0049a4:	69676542 	.word	0x69676542
1a0049a8:	6e696e6e 	.word	0x6e696e6e
1a0049ac:	6f632067 	.word	0x6f632067
1a0049b0:	63656e6e 	.word	0x63656e6e
1a0049b4:	6e6f6974 	.word	0x6e6f6974
1a0049b8:	206f7420 	.word	0x206f7420
1a0049bc:	20656874 	.word	0x20656874
1a0049c0:	2e434441 	.word	0x2e434441
1a0049c4:	00002e2e 	.word	0x00002e2e
1a0049c8:	74746553 	.word	0x74746553
1a0049cc:	20676e69 	.word	0x20676e69
1a0049d0:	20656874 	.word	0x20656874
1a0049d4:	20433249 	.word	0x20433249
1a0049d8:	72646461 	.word	0x72646461
1a0049dc:	20737365 	.word	0x20737365
1a0049e0:	7420666f 	.word	0x7420666f
1a0049e4:	41206568 	.word	0x41206568
1a0049e8:	2e2e4344 	.word	0x2e2e4344
1a0049ec:	0000002e 	.word	0x0000002e
1a0049f0:	74746553 	.word	0x74746553
1a0049f4:	20676e69 	.word	0x20676e69
1a0049f8:	20656874 	.word	0x20656874
1a0049fc:	4e494147 	.word	0x4e494147
1a004a00:	20666f20 	.word	0x20666f20
1a004a04:	20656874 	.word	0x20656874
1a004a08:	20414750 	.word	0x20414750
1a004a0c:	7420666f 	.word	0x7420666f
1a004a10:	41206568 	.word	0x41206568
1a004a14:	2e2e4344 	.word	0x2e2e4344
1a004a18:	0000002e 	.word	0x0000002e
1a004a1c:	69676542 	.word	0x69676542
1a004a20:	6f74206e 	.word	0x6f74206e
1a004a24:	61657220 	.word	0x61657220
1a004a28:	68742064 	.word	0x68742064
1a004a2c:	44412065 	.word	0x44412065
1a004a30:	2e2e2e43 	.word	0x2e2e2e43
1a004a34:	00000000 	.word	0x00000000
1a004a38:	75736552 	.word	0x75736552
1a004a3c:	6f20746c 	.word	0x6f20746c
1a004a40:	68632066 	.word	0x68632066
1a004a44:	656e6e61 	.word	0x656e6e61
1a004a48:	0000206c 	.word	0x0000206c
1a004a4c:	0000203a 	.word	0x0000203a
1a004a50:	202d2d2d 	.word	0x202d2d2d
1a004a54:	746c6f56 	.word	0x746c6f56
1a004a58:	00203a73 	.word	0x00203a73
1a004a5c:	202d2d2d 	.word	0x202d2d2d
1a004a60:	69736552 	.word	0x69736552
1a004a64:	6e617473 	.word	0x6e617473
1a004a68:	203a6563 	.word	0x203a6563
1a004a6c:	00000000 	.word	0x00000000
1a004a70:	202d2d2d 	.word	0x202d2d2d
1a004a74:	706d6554 	.word	0x706d6554
1a004a78:	74617265 	.word	0x74617265
1a004a7c:	3a657275 	.word	0x3a657275
1a004a80:	ffff0020 	.word	0xffff0020
1a004a84:	454c4449 	.word	0x454c4449
1a004a88:	ffffff00 	.word	0xffffff00
1a004a8c:	51726d54 	.word	0x51726d54
1a004a90:	ffffff00 	.word	0xffffff00
1a004a94:	20726d54 	.word	0x20726d54
1a004a98:	00637653 	.word	0x00637653

1a004a9c <lpcUarts>:
1a004a9c:	40081000 06020406 00180205 40081000     ...@...........@
1a004aac:	09070509 00180706 40082000 00000000     ......... .@....
1a004abc:	00190000 400c1000 07060107 001a0602     .......@........
1a004acc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004adc:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a004aec:	0072656d                                mer.

1a004af0 <gpioPinsInit>:
1a004af0:	02000104 00050701 05010d03 04080100     ................
1a004b00:	02020002 02000304 00000403 04070002     ................
1a004b10:	030c0300 09050402 05040103 04030208     ................
1a004b20:	04020305 06040504 0802000c 03000b06     ................
1a004b30:	00090607 07060503 060f0504 03030004     ................
1a004b40:	02000404 00050404 06040502 04060200     ................
1a004b50:	0c050408 05040a04 0003010e 14010a00     ................
1a004b60:	010f0000 0d000012 00001101 0010010c     ................
1a004b70:	07070300 000f0300 01000001 00000000     ................
1a004b80:	000a0600 08060603 06100504 04030005     ................
1a004b90:	03000106 04090400 04010d05 010b0000     ................
1a004ba0:	0200000f 00000001 00010104 02010800     ................
1a004bb0:	01090000 09010006 05040002 04010200     ................
1a004bc0:	02020105 02020504 0e00000a 01000b02     ................
1a004bd0:	000c020b 00040c01 04000200 01020001     ................
1a004be0:	02000204 00030402 03070302 070b0300     ................
1a004bf0:	0c030004 03000507 0006070d 01020e03     ................
1a004c00:	04010504 06020006 02000504 00040405     ................
1a004c10:	08040402 040c0504 0d050409 05040a04     ................
1a004c20:	0005010e ffff0801 ff000a0d              ............

1a004c2c <ExtRateIn>:
1a004c2c:	00000000                                ....

1a004c30 <GpioButtons>:
1a004c30:	08000400 09010900                       ........

1a004c38 <GpioLeds>:
1a004c38:	01050005 0e000205 0c010b01              ............

1a004c44 <GpioPorts>:
1a004c44:	03030003 0f050403 05031005 07030603     ................
1a004c54:	ffff0802                                ....

1a004c58 <OscRateIn>:
1a004c58:	00b71b00                                ....

1a004c5c <InitClkStates>:
1a004c5c:	01010f01                                ....

1a004c60 <pinmuxing>:
1a004c60:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004c70:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004c80:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004c90:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004ca0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004cb0:	00d50301 00d50401 00160107 00560207     ..............V.
1a004cc0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004cd0:	00570206                                ..W.

1a004cd4 <UART_BClock>:
1a004cd4:	01a201c2 01620182                       ......b.

1a004cdc <UART_PClock>:
1a004cdc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004cec:	000000ff                                ....

1a004cf0 <periph_to_base>:
1a004cf0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004d00:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004d10:	000100e0 01000100 01200003 00060120     .......... . ...
1a004d20:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004d30:	01820013 00120182 01a201a2 01c20011     ................
1a004d40:	001001c2 01e201e2 0202000f 000e0202     ................
1a004d50:	02220222 0223000d 001c0223              "."...#.#...

1a004d5c <InitClkStates>:
1a004d5c:	00010100 00010909 0001090a 01010701     ................
1a004d6c:	00010902 00010906 0101090c 0001090d     ................
1a004d7c:	0001090e 0001090f 00010910 00010911     ................
1a004d8c:	00010912 00010913 00011114 00011119     ................
1a004d9c:	0001111a 0001111b                       ........
